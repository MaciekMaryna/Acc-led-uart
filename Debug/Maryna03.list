
Maryna03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b0  080096b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b8  080096b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080096c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000085c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ec  200008ec  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020dd7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000476b  00000000  00000000  00040e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00045608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  00046a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025147  00000000  00000000  00047cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d28c  00000000  00000000  0006ce1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfb4  00000000  00000000  0008a0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015805f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f4  00000000  00000000  001580b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009630 	.word	0x08009630

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009630 	.word	0x08009630

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b72      	ldr	r3, [pc, #456]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a71      	ldr	r2, [pc, #452]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b6f      	ldr	r3, [pc, #444]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0310 	and.w	r3, r3, #16
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b6b      	ldr	r3, [pc, #428]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a6a      	ldr	r2, [pc, #424]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b68      	ldr	r3, [pc, #416]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b64      	ldr	r3, [pc, #400]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a63      	ldr	r2, [pc, #396]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b61      	ldr	r3, [pc, #388]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b5d      	ldr	r3, [pc, #372]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a5c      	ldr	r2, [pc, #368]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b56      	ldr	r3, [pc, #344]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a55      	ldr	r2, [pc, #340]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b53      	ldr	r3, [pc, #332]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b4f      	ldr	r3, [pc, #316]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a4e      	ldr	r2, [pc, #312]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b4c      	ldr	r3, [pc, #304]	; (800074c <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	4849      	ldr	r0, [pc, #292]	; (8000750 <MX_GPIO_Init+0x1e8>)
 800062c:	f001 f850 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4847      	ldr	r0, [pc, #284]	; (8000754 <MX_GPIO_Init+0x1ec>)
 8000636:	f001 f84b 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800063a:	2200      	movs	r2, #0
 800063c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000640:	4845      	ldr	r0, [pc, #276]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000642:	f001 f845 	bl	80016d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000646:	2308      	movs	r3, #8
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	483c      	ldr	r0, [pc, #240]	; (8000750 <MX_GPIO_Init+0x1e8>)
 800065e:	f000 fe9b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000662:	2301      	movs	r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4836      	ldr	r0, [pc, #216]	; (8000754 <MX_GPIO_Init+0x1ec>)
 800067a:	f000 fe8d 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800067e:	2308      	movs	r3, #8
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800068e:	2305      	movs	r3, #5
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	482e      	ldr	r0, [pc, #184]	; (8000754 <MX_GPIO_Init+0x1ec>)
 800069a:	f000 fe7d 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	482a      	ldr	r0, [pc, #168]	; (800075c <MX_GPIO_Init+0x1f4>)
 80006b4:	f000 fe70 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b8:	2304      	movs	r3, #4
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4825      	ldr	r0, [pc, #148]	; (8000760 <MX_GPIO_Init+0x1f8>)
 80006cc:	f000 fe64 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e2:	2305      	movs	r3, #5
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	481c      	ldr	r0, [pc, #112]	; (8000760 <MX_GPIO_Init+0x1f8>)
 80006ee:	f000 fe53 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <MX_GPIO_Init+0x1f0>)
 800070c:	f000 fe44 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000710:	2320      	movs	r3, #32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000724:	f000 fe38 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800072c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0x1e8>)
 800073e:	f000 fe2b 	bl	8001398 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	; 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40021000 	.word	0x40021000
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400

08000764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x50>)
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_I2C1_Init+0x54>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_I2C1_Init+0x58>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_I2C1_Init+0x50>)
 80007a2:	f002 fd39 	bl	8003218 <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f9e4 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000c0 	.word	0x200000c0
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_I2C_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12c      	bne.n	800083c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000804:	2312      	movs	r3, #18
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000810:	2304      	movs	r3, #4
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_I2C_MspInit+0x8c>)
 800081c:	f000 fdbc 	bl	8001398 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_I2C_MspInit+0x88>)
 800082a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40005400 	.word	0x40005400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400

08000850 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <MX_I2S3_Init+0x5c>)
 800087a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000890:	f002 fe06 	bl	80034a0 <HAL_I2S_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089a:	f000 f96d 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000114 	.word	0x20000114
 80008a8:	40003c00 	.word	0x40003c00
 80008ac:	00017700 	.word	0x00017700

080008b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <HAL_I2S_MspInit+0xf0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d15a      	bne.n	8000996 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fee9 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008fc:	f000 f93c 	bl	8000b78 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800090a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000954:	2310      	movs	r3, #16
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000964:	2306      	movs	r3, #6
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <HAL_I2S_MspInit+0xf8>)
 8000970:	f000 fd12 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000974:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000986:	2306      	movs	r3, #6
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <HAL_I2S_MspInit+0xfc>)
 8000992:	f000 fd01 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3738      	adds	r7, #56	; 0x38
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40003c00 	.word	0x40003c00
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020800 	.word	0x40020800

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fab5 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f843 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f7ff fdd3 	bl	8000568 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c2:	f7ff fecf 	bl	8000764 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009c6:	f7ff ff43 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ca:	f000 f8db 	bl	8000b84 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009ce:	f007 feb7 	bl	8008740 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80009d2:	f000 fa03 	bl	8000ddc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4915      	ldr	r1, [pc, #84]	; (8000a30 <main+0x80>)
 80009da:	4816      	ldr	r0, [pc, #88]	; (8000a34 <main+0x84>)
 80009dc:	f004 f91c 	bl	8004c18 <HAL_UART_Receive_IT>
  char bufor[50]; // "This is the first UART transmision from my STM32F4-DISC1 ... ";
  static uint16_t cnt=0;
  uint8_t size=0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* Infinite loop */;
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009e6:	f007 fed1 	bl	800878c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


    ++cnt;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <main+0x88>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <main+0x88>)
 80009f4:	801a      	strh	r2, [r3, #0]
    size=sprintf(*bufor ,"Komunikat numer: %d\n\r", cnt);
 80009f6:	793b      	ldrb	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <main+0x88>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	490e      	ldr	r1, [pc, #56]	; (8000a3c <main+0x8c>)
 8000a02:	f008 faa1 	bl	8008f48 <siprintf>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    HAL_UART_Transmit(&huart2, bufor, size, 1);
 8000a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	1d39      	adds	r1, r7, #4
 8000a14:	2301      	movs	r3, #1
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <main+0x84>)
 8000a18:	f004 f86c 	bl	8004af4 <HAL_UART_Transmit>

    HAL_Delay(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a20:	f000 faf2 	bl	8001008 <HAL_Delay>



    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <main+0x90>)
 8000a2a:	f000 fe6a 	bl	8001702 <HAL_GPIO_TogglePin>
  {
 8000a2e:	e7da      	b.n	80009e6 <main+0x36>
 8000a30:	2000015c 	.word	0x2000015c
 8000a34:	200001b8 	.word	0x200001b8
 8000a38:	200000ac 	.word	0x200000ac
 8000a3c:	08009648 	.word	0x08009648
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	; 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f008 f9b6 	bl	8008dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 f988 	bl	8003de0 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ad6:	f000 f84f 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2105      	movs	r1, #5
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fbe9 	bl	80042d0 <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b04:	f000 f838 	bl	8000b78 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3750      	adds	r7, #80	; 0x50
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_RxCpltCallback+0x50>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d119      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x46>
	{
		if (znak=='e')
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_UART_RxCpltCallback+0x54>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b65      	cmp	r3, #101	; 0x65
 8000b30:	d106      	bne.n	8000b40 <HAL_UART_RxCpltCallback+0x28>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <HAL_UART_RxCpltCallback+0x58>)
 8000b3a:	f000 fdc9 	bl	80016d0 <HAL_GPIO_WritePin>
 8000b3e:	e009      	b.n	8000b54 <HAL_UART_RxCpltCallback+0x3c>
		else if (znak=='d')
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_UART_RxCpltCallback+0x54>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b64      	cmp	r3, #100	; 0x64
 8000b46:	d105      	bne.n	8000b54 <HAL_UART_RxCpltCallback+0x3c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <HAL_UART_RxCpltCallback+0x58>)
 8000b50:	f000 fdbe 	bl	80016d0 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	4905      	ldr	r1, [pc, #20]	; (8000b6c <HAL_UART_RxCpltCallback+0x54>)
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_UART_RxCpltCallback+0x5c>)
 8000b5a:	f004 f85d 	bl	8004c18 <HAL_UART_Receive_IT>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	2000015c 	.word	0x2000015c
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	200001b8 	.word	0x200001b8

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd6:	f003 feb7 	bl	8004948 <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f7ff ffca 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000160 	.word	0x20000160
 8000bec:	40013000 	.word	0x40013000

08000bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fb97 	bl	8001398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f000 fa96 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f954 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <USART2_IRQHandler+0x10>)
 8000d2a:	f003 ffa5 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200001b8 	.word	0x200001b8

08000d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <OTG_FS_IRQHandler+0x10>)
 8000d3e:	f000 ff65 	bl	8001c0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200005d8 	.word	0x200005d8

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f007 ffe8 	bl	8008d50 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200000b0 	.word	0x200000b0
 8000db4:	200008f0 	.word	0x200008f0

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f003 fe21 	bl	8004a5a <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f7ff feab 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001b8 	.word	0x200001b8
 8000e2c:	40004400 	.word	0x40004400

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0x94>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d133      	bne.n	8000eba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <HAL_UART_MspInit+0x9c>)
 8000ea6:	f000 fa77 	bl	8001398 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2026      	movs	r0, #38	; 0x26
 8000eb0:	f000 f9a9 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb4:	2026      	movs	r0, #38	; 0x26
 8000eb6:	f000 f9c2 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eec:	4c0b      	ldr	r4, [pc, #44]	; (8000f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efa:	f7ff ff5d 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f007 ff2d 	bl	8008d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fd55 	bl	80009b0 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f14:	080096c0 	.word	0x080096c0
  ldr r2, =_sbss
 8000f18:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f1c:	200008ec 	.word	0x200008ec

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f94f 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fe92 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f967 	bl	800125a <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f92f 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200001fc 	.word	0x200001fc

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200001fc 	.word	0x200001fc

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff feb6 	bl	8000ff0 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d008      	beq.n	80012a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e052      	b.n	800134a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0216 	bic.w	r2, r2, #22
 80012b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d103      	bne.n	80012d4 <HAL_DMA_Abort+0x62>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0208 	bic.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f4:	e013      	b.n	800131e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f6:	f7ff fe7b 	bl	8000ff0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b05      	cmp	r3, #5
 8001302:	d90c      	bls.n	800131e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2220      	movs	r2, #32
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e015      	b.n	800134a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e4      	bne.n	80012f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	223f      	movs	r2, #63	; 0x3f
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d004      	beq.n	8001370 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e00c      	b.n	800138a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2205      	movs	r2, #5
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	041a      	lsls	r2, r3, #16
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43d9      	mvns	r1, r3
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	400b      	ands	r3, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	619a      	str	r2, [r3, #24]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001738:	b08f      	sub	sp, #60	; 0x3c
 800173a:	af0a      	add	r7, sp, #40	; 0x28
 800173c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e054      	b.n	80017f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f007 f84a 	bl	80087fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f004 f9a0 	bl	8005acc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	687e      	ldr	r6, [r7, #4]
 8001794:	466d      	mov	r5, sp
 8001796:	f106 0410 	add.w	r4, r6, #16
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017aa:	1d33      	adds	r3, r6, #4
 80017ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f004 f91a 	bl	80059e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 f997 	bl	8005aee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	687e      	ldr	r6, [r7, #4]
 80017c8:	466d      	mov	r5, sp
 80017ca:	f106 0410 	add.w	r4, r6, #16
 80017ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017da:	e885 0003 	stmia.w	r5, {r0, r1}
 80017de:	1d33      	adds	r3, r6, #4
 80017e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e2:	6838      	ldr	r0, [r7, #0]
 80017e4:	f004 fafe 	bl	8005de4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017fa:	b590      	push	{r4, r7, lr}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af04      	add	r7, sp, #16
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	4608      	mov	r0, r1
 8001804:	4611      	mov	r1, r2
 8001806:	461a      	mov	r2, r3
 8001808:	4603      	mov	r3, r0
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	460b      	mov	r3, r1
 800180e:	70bb      	strb	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_HCD_HC_Init+0x28>
 800181e:	2302      	movs	r3, #2
 8001820:	e076      	b.n	8001910 <HAL_HCD_HC_Init+0x116>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	333d      	adds	r3, #61	; 0x3d
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3338      	adds	r3, #56	; 0x38
 800184a:	787a      	ldrb	r2, [r7, #1]
 800184c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	212c      	movs	r1, #44	; 0x2c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	3340      	adds	r3, #64	; 0x40
 800185c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800185e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3339      	adds	r3, #57	; 0x39
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	333f      	adds	r3, #63	; 0x3f
 8001880:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001884:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	78ba      	ldrb	r2, [r7, #2]
 800188a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800188e:	b2d0      	uxtb	r0, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	333a      	adds	r3, #58	; 0x3a
 800189c:	4602      	mov	r2, r0
 800189e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	da09      	bge.n	80018bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	212c      	movs	r1, #44	; 0x2c
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	333b      	adds	r3, #59	; 0x3b
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e008      	b.n	80018ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	333b      	adds	r3, #59	; 0x3b
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	333c      	adds	r3, #60	; 0x3c
 80018dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	787c      	ldrb	r4, [r7, #1]
 80018e8:	78ba      	ldrb	r2, [r7, #2]
 80018ea:	78f9      	ldrb	r1, [r7, #3]
 80018ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	4623      	mov	r3, r4
 80018fe:	f004 fbeb 	bl	80060d8 <USB_HC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}

08001918 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_HCD_HC_Halt+0x1e>
 8001932:	2302      	movs	r3, #2
 8001934:	e00f      	b.n	8001956 <HAL_HCD_HC_Halt+0x3e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fe27 	bl	800659a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4603      	mov	r3, r0
 8001970:	70fb      	strb	r3, [r7, #3]
 8001972:	460b      	mov	r3, r1
 8001974:	70bb      	strb	r3, [r7, #2]
 8001976:	4613      	mov	r3, r2
 8001978:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	333b      	adds	r3, #59	; 0x3b
 8001988:	78ba      	ldrb	r2, [r7, #2]
 800198a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	333f      	adds	r3, #63	; 0x3f
 800199a:	787a      	ldrb	r2, [r7, #1]
 800199c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800199e:	7c3b      	ldrb	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d112      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3342      	adds	r3, #66	; 0x42
 80019b2:	2203      	movs	r2, #3
 80019b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	333d      	adds	r3, #61	; 0x3d
 80019c4:	7f3a      	ldrb	r2, [r7, #28]
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e008      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	f200 80c6 	bhi.w	8001b70 <HAL_HCD_HC_SubmitRequest+0x210>
 80019e4:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001b5d 	.word	0x08001b5d
 80019f4:	08001a61 	.word	0x08001a61
 80019f8:	08001adf 	.word	0x08001adf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 80b8 	bne.w	8001b74 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a04:	78bb      	ldrb	r3, [r7, #2]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 80b4 	bne.w	8001b74 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a0c:	8b3b      	ldrh	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d108      	bne.n	8001a24 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3355      	adds	r3, #85	; 0x55
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	212c      	movs	r1, #44	; 0x2c
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3355      	adds	r3, #85	; 0x55
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	3342      	adds	r3, #66	; 0x42
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a4a:	e093      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	3342      	adds	r3, #66	; 0x42
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	701a      	strb	r2, [r3, #0]
      break;
 8001a5e:	e089      	b.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a60:	78bb      	ldrb	r3, [r7, #2]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11d      	bne.n	8001aa2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3355      	adds	r3, #85	; 0x55
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3342      	adds	r3, #66	; 0x42
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a8c:	e073      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3342      	adds	r3, #66	; 0x42
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e069      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	212c      	movs	r1, #44	; 0x2c
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	3354      	adds	r3, #84	; 0x54
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3342      	adds	r3, #66	; 0x42
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
      break;
 8001ac8:	e055      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
      break;
 8001adc:	e04b      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ade:	78bb      	ldrb	r3, [r7, #2]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d11d      	bne.n	8001b20 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3355      	adds	r3, #85	; 0x55
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3342      	adds	r3, #66	; 0x42
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b0a:	e034      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3342      	adds	r3, #66	; 0x42
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e02a      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3354      	adds	r3, #84	; 0x54
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3342      	adds	r3, #66	; 0x42
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
      break;
 8001b46:	e016      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	3342      	adds	r3, #66	; 0x42
 8001b56:	2202      	movs	r2, #2
 8001b58:	701a      	strb	r2, [r3, #0]
      break;
 8001b5a:	e00c      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3342      	adds	r3, #66	; 0x42
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b70:	bf00      	nop
 8001b72:	e000      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b74:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	212c      	movs	r1, #44	; 0x2c
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	3344      	adds	r3, #68	; 0x44
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	8b3a      	ldrh	r2, [r7, #24]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	202c      	movs	r0, #44	; 0x2c
 8001b90:	fb00 f303 	mul.w	r3, r0, r3
 8001b94:	440b      	add	r3, r1
 8001b96:	334c      	adds	r3, #76	; 0x4c
 8001b98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3360      	adds	r3, #96	; 0x60
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3350      	adds	r3, #80	; 0x50
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	212c      	movs	r1, #44	; 0x2c
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	3339      	adds	r3, #57	; 0x39
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3361      	adds	r3, #97	; 0x61
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	222c      	movs	r2, #44	; 0x2c
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	3338      	adds	r3, #56	; 0x38
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	18d1      	adds	r1, r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f004 fb7a 	bl	80062f4 <USB_HC_StartXfer>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop

08001c0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 f89d 	bl	8005d62 <USB_GetMode>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	f040 80f6 	bne.w	8001e1c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f881 	bl	8005d3c <USB_ReadInterrupts>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80ec 	beq.w	8001e1a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 f878 	bl	8005d3c <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c56:	d104      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 f868 	bl	8005d3c <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c76:	d104      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 f858 	bl	8005d3c <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c96:	d104      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 f848 	bl	8005d3c <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d103      	bne.n	8001cbe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 f83a 	bl	8005d3c <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd2:	d11c      	bne.n	8001d0e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cdc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cee:	2110      	movs	r1, #16
 8001cf0:	6938      	ldr	r0, [r7, #16]
 8001cf2:	f003 ff49 	bl	8005b88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cf6:	6938      	ldr	r0, [r7, #16]
 8001cf8:	f003 ff6a 	bl	8005bd0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f922 	bl	8005f4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f006 fdf5 	bl	80088f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 f812 	bl	8005d3c <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d22:	d102      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f001 fa03 	bl	8003130 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 f804 	bl	8005d3c <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d106      	bne.n	8001d4c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f006 fdbe 	bl	80088c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fff3 	bl	8005d3c <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d101      	bne.n	8001d64 <HAL_HCD_IRQHandler+0x158>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_HCD_IRQHandler+0x15a>
 8001d64:	2300      	movs	r3, #0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d012      	beq.n	8001d90 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0210 	bic.w	r2, r2, #16
 8001d78:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f001 f906 	bl	8002f8c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0210 	orr.w	r2, r2, #16
 8001d8e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 ffd1 	bl	8005d3c <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da4:	d13a      	bne.n	8001e1c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 fbe4 	bl	8006578 <USB_HC_ReadInterrupt>
 8001db0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e025      	b.n	8001e04 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d018      	beq.n	8001dfe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de2:	d106      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8ab 	bl	8001f46 <HCD_HC_IN_IRQHandler>
 8001df0:	e005      	b.n	8001dfe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fcc6 	bl	800278a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3d4      	bcc.n	8001db8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	615a      	str	r2, [r3, #20]
 8001e18:	e000      	b.n	8001e1c <HAL_HCD_IRQHandler+0x210>
      return;
 8001e1a:	bf00      	nop
    }
  }
}
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_HCD_Start+0x16>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e013      	b.n	8001e60 <HAL_HCD_Start+0x3e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 f8e4 	bl	8006014 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fe2a 	bl	8005aaa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_HCD_Stop+0x16>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e00d      	b.n	8001e9a <HAL_HCD_Stop+0x32>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fcde 	bl	800684c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 f886 	bl	8005fc0 <USB_ResetPort>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3360      	adds	r3, #96	; 0x60
 8001ed8:	781b      	ldrb	r3, [r3, #0]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3350      	adds	r3, #80	; 0x50
 8001f00:	681b      	ldr	r3, [r3, #0]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f8ca 	bl	80060b4 <USB_GetCurrentFrame>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f8a5 	bl	8006086 <USB_GetHostSpeed>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d119      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	2304      	movs	r3, #4
 8001f86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	0151      	lsls	r1, r2, #5
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	440a      	add	r2, r1
 8001f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	e101      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc0:	d12b      	bne.n	800201a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3361      	adds	r3, #97	; 0x61
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	0151      	lsls	r1, r2, #5
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	440a      	add	r2, r1
 8001ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fac1 	bl	800659a <USB_HC_Halt>
 8002018:	e0c9      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b20      	cmp	r3, #32
 800202e:	d109      	bne.n	8002044 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	461a      	mov	r2, r3
 800203e:	2320      	movs	r3, #32
 8002040:	6093      	str	r3, [r2, #8]
 8002042:	e0b4      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d133      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	0151      	lsls	r1, r2, #5
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	440a      	add	r2, r1
 8002070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3361      	adds	r3, #97	; 0x61
 8002088:	2205      	movs	r2, #5
 800208a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	461a      	mov	r2, r3
 800209a:	2310      	movs	r3, #16
 800209c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	2308      	movs	r3, #8
 80020ae:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fa6d 	bl	800659a <USB_HC_Halt>
 80020c0:	e075      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d8:	d134      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	0151      	lsls	r1, r2, #5
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	440a      	add	r2, r1
 80020f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3361      	adds	r3, #97	; 0x61
 8002108:	2208      	movs	r2, #8
 800210a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	2310      	movs	r3, #16
 800211c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fa2c 	bl	800659a <USB_HC_Halt>
 8002142:	e034      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b80      	cmp	r3, #128	; 0x80
 8002158:	d129      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	440a      	add	r2, r1
 8002170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3361      	adds	r3, #97	; 0x61
 8002188:	2206      	movs	r2, #6
 800218a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f9ff 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c4:	d122      	bne.n	800220c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	0151      	lsls	r1, r2, #5
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	440a      	add	r2, r1
 80021dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 f9d2 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002208:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800220a:	e2ba      	b.n	8002782 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	f040 811b 	bne.w	800245a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d019      	beq.n	8002260 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3348      	adds	r3, #72	; 0x48
 800223a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	0159      	lsls	r1, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	440b      	add	r3, r1
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800224e:	1ad2      	subs	r2, r2, r3
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	202c      	movs	r0, #44	; 0x2c
 8002256:	fb00 f303 	mul.w	r3, r0, r3
 800225a:	440b      	add	r3, r1
 800225c:	3350      	adds	r3, #80	; 0x50
 800225e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3361      	adds	r3, #97	; 0x61
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	333f      	adds	r3, #63	; 0x3f
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	333f      	adds	r3, #63	; 0x3f
 80022b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d121      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	0151      	lsls	r1, r2, #5
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	440a      	add	r2, r1
 80022d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 f956 	bl	800659a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2310      	movs	r3, #16
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	e066      	b.n	80023d0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	333f      	adds	r3, #63	; 0x3f
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d127      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	440a      	add	r2, r1
 800232c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002334:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3360      	adds	r3, #96	; 0x60
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	b2d9      	uxtb	r1, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	202c      	movs	r0, #44	; 0x2c
 8002352:	fb00 f303 	mul.w	r3, r0, r3
 8002356:	4413      	add	r3, r2
 8002358:	3360      	adds	r3, #96	; 0x60
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f006 fad8 	bl	8008914 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002364:	e034      	b.n	80023d0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	333f      	adds	r3, #63	; 0x3f
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d12a      	bne.n	80023d0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	3360      	adds	r3, #96	; 0x60
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3354      	adds	r3, #84	; 0x54
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2d8      	uxtb	r0, r3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3354      	adds	r3, #84	; 0x54
 80023b0:	4602      	mov	r2, r0
 80023b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	202c      	movs	r0, #44	; 0x2c
 80023be:	fb00 f303 	mul.w	r3, r0, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3360      	adds	r3, #96	; 0x60
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f006 faa2 	bl	8008914 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d12b      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3348      	adds	r3, #72	; 0x48
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	202c      	movs	r0, #44	; 0x2c
 80023ee:	fb00 f202 	mul.w	r2, r0, r2
 80023f2:	440a      	add	r2, r1
 80023f4:	3240      	adds	r2, #64	; 0x40
 80023f6:	8812      	ldrh	r2, [r2, #0]
 80023f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 81be 	beq.w	8002782 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3354      	adds	r3, #84	; 0x54
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	f083 0301 	eor.w	r3, r3, #1
 800241a:	b2d8      	uxtb	r0, r3
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3354      	adds	r3, #84	; 0x54
 800242a:	4602      	mov	r2, r0
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	e1a8      	b.n	8002782 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3354      	adds	r3, #84	; 0x54
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f083 0301 	eor.w	r3, r3, #1
 8002444:	b2d8      	uxtb	r0, r3
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3354      	adds	r3, #84	; 0x54
 8002454:	4602      	mov	r2, r0
 8002456:	701a      	strb	r2, [r3, #0]
}
 8002458:	e193      	b.n	8002782 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	f040 8106 	bne.w	800267e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	0151      	lsls	r1, r2, #5
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	440a      	add	r2, r1
 8002488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248c:	f023 0302 	bic.w	r3, r3, #2
 8002490:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3361      	adds	r3, #97	; 0x61
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d109      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e0c9      	b.n	800264e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3361      	adds	r3, #97	; 0x61
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d109      	bne.n	80024e2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3360      	adds	r3, #96	; 0x60
 80024dc:	2205      	movs	r2, #5
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e0b5      	b.n	800264e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3361      	adds	r3, #97	; 0x61
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d009      	beq.n	800250a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3361      	adds	r3, #97	; 0x61
 8002504:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002506:	2b08      	cmp	r3, #8
 8002508:	d150      	bne.n	80025ac <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	335c      	adds	r3, #92	; 0x5c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	202c      	movs	r0, #44	; 0x2c
 8002522:	fb00 f303 	mul.w	r3, r0, r3
 8002526:	440b      	add	r3, r1
 8002528:	335c      	adds	r3, #92	; 0x5c
 800252a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	335c      	adds	r3, #92	; 0x5c
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d912      	bls.n	8002566 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	3360      	adds	r3, #96	; 0x60
 8002560:	2204      	movs	r2, #4
 8002562:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002564:	e073      	b.n	800264e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3360      	adds	r3, #96	; 0x60
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800258e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002596:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025aa:	e050      	b.n	800264e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3361      	adds	r3, #97	; 0x61
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d122      	bne.n	8002606 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3360      	adds	r3, #96	; 0x60
 80025ce:	2202      	movs	r2, #2
 80025d0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025e8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e023      	b.n	800264e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3361      	adds	r3, #97	; 0x61
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b07      	cmp	r3, #7
 8002618:	d119      	bne.n	800264e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	202c      	movs	r0, #44	; 0x2c
 8002632:	fb00 f303 	mul.w	r3, r0, r3
 8002636:	440b      	add	r3, r1
 8002638:	335c      	adds	r3, #92	; 0x5c
 800263a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	2204      	movs	r2, #4
 800264c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2302      	movs	r3, #2
 800265e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	b2d9      	uxtb	r1, r3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	202c      	movs	r0, #44	; 0x2c
 800266a:	fb00 f303 	mul.w	r3, r0, r3
 800266e:	4413      	add	r3, r2
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f006 f94c 	bl	8008914 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800267c:	e081      	b.n	8002782 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d176      	bne.n	8002782 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	333f      	adds	r3, #63	; 0x3f
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d121      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	335c      	adds	r3, #92	; 0x5c
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	0151      	lsls	r1, r2, #5
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 ff58 	bl	800659a <USB_HC_Halt>
 80026ea:	e041      	b.n	8002770 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	333f      	adds	r3, #63	; 0x3f
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	333f      	adds	r3, #63	; 0x3f
 800270e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002710:	2b02      	cmp	r3, #2
 8002712:	d12d      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	335c      	adds	r3, #92	; 0x5c
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d120      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3361      	adds	r3, #97	; 0x61
 800273c:	2203      	movs	r2, #3
 800273e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f003 ff15 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	2310      	movs	r3, #16
 8002780:	6093      	str	r3, [r2, #8]
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d119      	bne.n	80027ee <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	2304      	movs	r3, #4
 80027ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027ec:	e3ca      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d13e      	bne.n	8002882 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2320      	movs	r3, #32
 8002814:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	333d      	adds	r3, #61	; 0x3d
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	f040 83ac 	bne.w	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	333d      	adds	r3, #61	; 0x3d
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	0151      	lsls	r1, r2, #5
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	440a      	add	r2, r1
 8002866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fe8d 	bl	800659a <USB_HC_Halt>
}
 8002880:	e380      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d122      	bne.n	80028e0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	0151      	lsls	r1, r2, #5
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	440a      	add	r2, r1
 80028b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fe68 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028dc:	6093      	str	r3, [r2, #8]
}
 80028de:	e351      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d150      	bne.n	8002998 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	335c      	adds	r3, #92	; 0x5c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d111      	bne.n	8002942 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	333d      	adds	r3, #61	; 0x3d
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	461a      	mov	r2, r3
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	0151      	lsls	r1, r2, #5
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	440a      	add	r2, r1
 8002958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fe14 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
}
 8002996:	e2f5      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d13c      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	2204      	movs	r2, #4
 80029be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	333d      	adds	r3, #61	; 0x3d
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	335c      	adds	r3, #92	; 0x5c
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fdc3 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2340      	movs	r3, #64	; 0x40
 8002a24:	6093      	str	r3, [r2, #8]
}
 8002a26:	e2ad      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d12a      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	0151      	lsls	r1, r2, #5
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	440a      	add	r2, r1
 8002a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 fd8d 	bl	800659a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3361      	adds	r3, #97	; 0x61
 8002a8e:	2205      	movs	r2, #5
 8002a90:	701a      	strb	r2, [r3, #0]
}
 8002a92:	e277      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d150      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3361      	adds	r3, #97	; 0x61
 8002aca:	2203      	movs	r2, #3
 8002acc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	333d      	adds	r3, #61	; 0x3d
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d112      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	333c      	adds	r3, #60	; 0x3c
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	333d      	adds	r3, #61	; 0x3d
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	0151      	lsls	r1, r2, #5
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fd31 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2310      	movs	r3, #16
 8002b48:	6093      	str	r3, [r2, #8]
}
 8002b4a:	e21b      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	d174      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d121      	bne.n	8002bae <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3361      	adds	r3, #97	; 0x61
 8002b78:	2206      	movs	r2, #6
 8002b7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	0151      	lsls	r1, r2, #5
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	440a      	add	r2, r1
 8002b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fcf7 	bl	800659a <USB_HC_Halt>
 8002bac:	e044      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	202c      	movs	r0, #44	; 0x2c
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	440b      	add	r3, r1
 8002bcc:	335c      	adds	r3, #92	; 0x5c
 8002bce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	335c      	adds	r3, #92	; 0x5c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d920      	bls.n	8002c26 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	335c      	adds	r3, #92	; 0x5c
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	2204      	movs	r2, #4
 8002c06:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	b2d9      	uxtb	r1, r3
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	202c      	movs	r0, #44	; 0x2c
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3360      	adds	r3, #96	; 0x60
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f005 fe78 	bl	8008914 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c24:	e008      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	6093      	str	r3, [r2, #8]
}
 8002c4a:	e19b      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d134      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fc83 	bl	800659a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3361      	adds	r3, #97	; 0x61
 8002cc8:	2208      	movs	r2, #8
 8002cca:	701a      	strb	r2, [r3, #0]
}
 8002ccc:	e15a      	b.n	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	f040 814f 	bne.w	8002f84 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	0151      	lsls	r1, r2, #5
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d00:	f023 0302 	bic.w	r3, r3, #2
 8002d04:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3361      	adds	r3, #97	; 0x61
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d17d      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	333f      	adds	r3, #63	; 0x3f
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d00a      	beq.n	8002d56 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	333f      	adds	r3, #63	; 0x3f
 8002d4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	f040 8100 	bne.w	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d113      	bne.n	8002d86 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3355      	adds	r3, #85	; 0x55
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3355      	adds	r3, #85	; 0x55
 8002d82:	4602      	mov	r2, r0
 8002d84:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	f040 80e3 	bne.w	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	334c      	adds	r3, #76	; 0x4c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80d8 	beq.w	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	334c      	adds	r3, #76	; 0x4c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f202 	mul.w	r2, r0, r2
 8002dc0:	440a      	add	r2, r1
 8002dc2:	3240      	adds	r2, #64	; 0x40
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	202c      	movs	r0, #44	; 0x2c
 8002dd0:	fb00 f202 	mul.w	r2, r0, r2
 8002dd4:	440a      	add	r2, r1
 8002dd6:	3240      	adds	r2, #64	; 0x40
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80b5 	beq.w	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3355      	adds	r3, #85	; 0x55
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2d8      	uxtb	r0, r3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3355      	adds	r3, #85	; 0x55
 8002e10:	4602      	mov	r2, r0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e09f      	b.n	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3361      	adds	r3, #97	; 0x61
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d109      	bne.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3360      	adds	r3, #96	; 0x60
 8002e38:	2202      	movs	r2, #2
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e08b      	b.n	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3361      	adds	r3, #97	; 0x61
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d109      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3360      	adds	r3, #96	; 0x60
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e077      	b.n	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d109      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3360      	adds	r3, #96	; 0x60
 8002e88:	2205      	movs	r2, #5
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e063      	b.n	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3361      	adds	r3, #97	; 0x61
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d009      	beq.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d14f      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	335c      	adds	r3, #92	; 0x5c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	202c      	movs	r0, #44	; 0x2c
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	335c      	adds	r3, #92	; 0x5c
 8002ed6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	335c      	adds	r3, #92	; 0x5c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d912      	bls.n	8002f12 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	335c      	adds	r3, #92	; 0x5c
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3360      	adds	r3, #96	; 0x60
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e021      	b.n	8002f56 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3360      	adds	r3, #96	; 0x60
 8002f20:	2202      	movs	r2, #2
 8002f22:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f3a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f42:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2302      	movs	r3, #2
 8002f66:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	b2d9      	uxtb	r1, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	202c      	movs	r0, #44	; 0x2c
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f005 fcc8 	bl	8008914 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	0c5b      	lsrs	r3, r3, #17
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d004      	beq.n	8002fd2 <HCD_RXQLVL_IRQHandler+0x46>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	f000 80a9 	beq.w	8003122 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fd0:	e0aa      	b.n	8003128 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a6 	beq.w	8003126 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3344      	adds	r3, #68	; 0x44
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 809b 	beq.w	8003126 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3350      	adds	r3, #80	; 0x50
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	441a      	add	r2, r3
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	202c      	movs	r0, #44	; 0x2c
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	; 0x4c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d87a      	bhi.n	800310e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3344      	adds	r3, #68	; 0x44
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	b292      	uxth	r2, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f002 fe2b 	bl	8005c8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3344      	adds	r3, #68	; 0x44
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	441a      	add	r2, r3
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	202c      	movs	r0, #44	; 0x2c
 8003050:	fb00 f303 	mul.w	r3, r0, r3
 8003054:	440b      	add	r3, r1
 8003056:	3344      	adds	r3, #68	; 0x44
 8003058:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3350      	adds	r3, #80	; 0x50
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	441a      	add	r2, r3
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	202c      	movs	r0, #44	; 0x2c
 8003074:	fb00 f303 	mul.w	r3, r0, r3
 8003078:	440b      	add	r3, r1
 800307a:	3350      	adds	r3, #80	; 0x50
 800307c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	0cdb      	lsrs	r3, r3, #19
 800308e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003092:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d13c      	bne.n	8003126 <HCD_RXQLVL_IRQHandler+0x19a>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d039      	beq.n	8003126 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030c8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3354      	adds	r3, #84	; 0x54
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2d8      	uxtb	r0, r3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3354      	adds	r3, #84	; 0x54
 8003108:	4602      	mov	r2, r0
 800310a:	701a      	strb	r2, [r3, #0]
      break;
 800310c:	e00b      	b.n	8003126 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3360      	adds	r3, #96	; 0x60
 800311c:	2204      	movs	r2, #4
 800311e:	701a      	strb	r2, [r3, #0]
      break;
 8003120:	e001      	b.n	8003126 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003126:	bf00      	nop
  }
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800315c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d10b      	bne.n	8003180 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f005 fbb2 	bl	80088dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b08      	cmp	r3, #8
 8003188:	d132      	bne.n	80031f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d126      	bne.n	80031ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d113      	bne.n	80031cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ae:	d106      	bne.n	80031be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fec8 	bl	8005f4c <USB_InitFSLSPClkSel>
 80031bc:	e011      	b.n	80031e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fec1 	bl	8005f4c <USB_InitFSLSPClkSel>
 80031ca:	e00a      	b.n	80031e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031da:	461a      	mov	r2, r3
 80031dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f005 fba4 	bl	8008930 <HAL_HCD_PortEnabled_Callback>
 80031e8:	e002      	b.n	80031f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f005 fbae 	bl	800894c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d103      	bne.n	8003202 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f043 0320 	orr.w	r3, r3, #32
 8003200:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e12b      	b.n	8003482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fabe 	bl	80007c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800327a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800327c:	f001 f9fc 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8003280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a81      	ldr	r2, [pc, #516]	; (800348c <HAL_I2C_Init+0x274>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d807      	bhi.n	800329c <HAL_I2C_Init+0x84>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a80      	ldr	r2, [pc, #512]	; (8003490 <HAL_I2C_Init+0x278>)
 8003290:	4293      	cmp	r3, r2
 8003292:	bf94      	ite	ls
 8003294:	2301      	movls	r3, #1
 8003296:	2300      	movhi	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e006      	b.n	80032aa <HAL_I2C_Init+0x92>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a7d      	ldr	r2, [pc, #500]	; (8003494 <HAL_I2C_Init+0x27c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bf94      	ite	ls
 80032a4:	2301      	movls	r3, #1
 80032a6:	2300      	movhi	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0e7      	b.n	8003482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a78      	ldr	r2, [pc, #480]	; (8003498 <HAL_I2C_Init+0x280>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0c9b      	lsrs	r3, r3, #18
 80032bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_I2C_Init+0x274>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d802      	bhi.n	80032ec <HAL_I2C_Init+0xd4>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3301      	adds	r3, #1
 80032ea:	e009      	b.n	8003300 <HAL_I2C_Init+0xe8>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_I2C_Init+0x284>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	3301      	adds	r3, #1
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	495c      	ldr	r1, [pc, #368]	; (800348c <HAL_I2C_Init+0x274>)
 800331c:	428b      	cmp	r3, r1
 800331e:	d819      	bhi.n	8003354 <HAL_I2C_Init+0x13c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e59      	subs	r1, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fbb1 f3f3 	udiv	r3, r1, r3
 800332e:	1c59      	adds	r1, r3, #1
 8003330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003334:	400b      	ands	r3, r1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_I2C_Init+0x138>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e59      	subs	r1, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fbb1 f3f3 	udiv	r3, r1, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334e:	e051      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 8003350:	2304      	movs	r3, #4
 8003352:	e04f      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d111      	bne.n	8003380 <HAL_I2C_Init+0x168>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e012      	b.n	80033a6 <HAL_I2C_Init+0x18e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Init+0x196>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e022      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <HAL_I2C_Init+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e58      	subs	r0, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	440b      	add	r3, r1
 80033c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	e00f      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e58      	subs	r0, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	0099      	lsls	r1, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	6809      	ldr	r1, [r1, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6911      	ldr	r1, [r2, #16]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68d2      	ldr	r2, [r2, #12]
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	000186a0 	.word	0x000186a0
 8003490:	001e847f 	.word	0x001e847f
 8003494:	003d08ff 	.word	0x003d08ff
 8003498:	431bde83 	.word	0x431bde83
 800349c:	10624dd3 	.word	0x10624dd3

080034a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e128      	b.n	8003704 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a90      	ldr	r2, [pc, #576]	; (800370c <HAL_I2S_Init+0x26c>)
 80034ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd f9ef 	bl	80008b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034e8:	f023 030f 	bic.w	r3, r3, #15
 80034ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2202      	movs	r2, #2
 80034f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d060      	beq.n	80035c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003506:	2310      	movs	r3, #16
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e001      	b.n	8003510 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b20      	cmp	r3, #32
 8003516:	d802      	bhi.n	800351e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800351e:	2001      	movs	r0, #1
 8003520:	f001 f9b4 	bl	800488c <HAL_RCCEx_GetPeriphCLKFreq>
 8003524:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352e:	d125      	bne.n	800357c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	461a      	mov	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	3305      	adds	r3, #5
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e01f      	b.n	800359a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	3305      	adds	r3, #5
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e00e      	b.n	800359a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fbb2 f2f3 	udiv	r2, r2, r3
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	461a      	mov	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	3305      	adds	r3, #5
 8003598:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4a5c      	ldr	r2, [pc, #368]	; (8003710 <HAL_I2S_Init+0x270>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035c0:	2302      	movs	r3, #2
 80035c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d902      	bls.n	80035d4 <HAL_I2S_Init+0x134>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2bff      	cmp	r3, #255	; 0xff
 80035d2:	d907      	bls.n	80035e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f043 0210 	orr.w	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e08f      	b.n	8003704 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	ea42 0103 	orr.w	r1, r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003602:	f023 030f 	bic.w	r3, r3, #15
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6851      	ldr	r1, [r2, #4]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6892      	ldr	r2, [r2, #8]
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68d2      	ldr	r2, [r2, #12]
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6992      	ldr	r2, [r2, #24]
 800361a:	430a      	orrs	r2, r1
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003626:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d161      	bne.n	80036f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a38      	ldr	r2, [pc, #224]	; (8003714 <HAL_I2S_Init+0x274>)
 8003634:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a37      	ldr	r2, [pc, #220]	; (8003718 <HAL_I2S_Init+0x278>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_I2S_Init+0x1a4>
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_I2S_Init+0x27c>)
 8003642:	e001      	b.n	8003648 <HAL_I2S_Init+0x1a8>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4932      	ldr	r1, [pc, #200]	; (8003718 <HAL_I2S_Init+0x278>)
 8003650:	428a      	cmp	r2, r1
 8003652:	d101      	bne.n	8003658 <HAL_I2S_Init+0x1b8>
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <HAL_I2S_Init+0x27c>)
 8003656:	e001      	b.n	800365c <HAL_I2S_Init+0x1bc>
 8003658:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800365c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <HAL_I2S_Init+0x278>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_I2S_Init+0x1d4>
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_I2S_Init+0x27c>)
 8003672:	e001      	b.n	8003678 <HAL_I2S_Init+0x1d8>
 8003674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003678:	2202      	movs	r2, #2
 800367a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <HAL_I2S_Init+0x278>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_I2S_Init+0x1ea>
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_I2S_Init+0x27c>)
 8003688:	e001      	b.n	800368e <HAL_I2S_Init+0x1ee>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369a:	d003      	beq.n	80036a4 <HAL_I2S_Init+0x204>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e001      	b.n	80036b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036c4:	4313      	orrs	r3, r2
 80036c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <HAL_I2S_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_I2S_Init+0x24c>
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_I2S_Init+0x27c>)
 80036ea:	e001      	b.n	80036f0 <HAL_I2S_Init+0x250>
 80036ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f0:	897a      	ldrh	r2, [r7, #10]
 80036f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	08003817 	.word	0x08003817
 8003710:	cccccccd 	.word	0xcccccccd
 8003714:	0800392d 	.word	0x0800392d
 8003718:	40003800 	.word	0x40003800
 800371c:	40003400 	.word	0x40003400

08003720 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c9a      	adds	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10e      	bne.n	80037b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ffb8 	bl	8003720 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	b292      	uxth	r2, r2
 80037cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	1c9a      	adds	r2, r3, #2
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10e      	bne.n	800380e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff93 	bl	8003734 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b04      	cmp	r3, #4
 8003830:	d13a      	bne.n	80038a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d109      	bne.n	8003850 <I2S_IRQHandler+0x3a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d102      	bne.n	8003850 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffb4 	bl	80037b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d126      	bne.n	80038a8 <I2S_IRQHandler+0x92>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d11f      	bne.n	80038a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003876:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff50 	bl	8003748 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d136      	bne.n	8003922 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d109      	bne.n	80038d2 <I2S_IRQHandler+0xbc>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d102      	bne.n	80038d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff45 	bl	800375c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d122      	bne.n	8003922 <I2S_IRQHandler+0x10c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d11b      	bne.n	8003922 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0204 	orr.w	r2, r3, #4
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff13 	bl	8003748 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4aa2      	ldr	r2, [pc, #648]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003946:	4ba2      	ldr	r3, [pc, #648]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003948:	e001      	b.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a9b      	ldr	r2, [pc, #620]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003964:	4b9a      	ldr	r3, [pc, #616]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003966:	e001      	b.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003978:	d004      	beq.n	8003984 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 8099 	bne.w	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d107      	bne.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f925 	bl	8003be8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9c8 	bl	8003d48 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d13a      	bne.n	8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d035      	beq.n	8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039d6:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d8:	e001      	b.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4979      	ldr	r1, [pc, #484]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d101      	bne.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ea:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ec:	e001      	b.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0202 	orr.w	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fe88 	bl	8003748 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	f040 80be 	bne.w	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80b8 	beq.w	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a59      	ldr	r2, [pc, #356]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a6a:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a6c:	e001      	b.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4954      	ldr	r1, [pc, #336]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a7a:	428b      	cmp	r3, r1
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a7e:	4b54      	ldr	r3, [pc, #336]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a80:	e001      	b.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f043 0204 	orr.w	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fe4a 	bl	8003748 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ab4:	e084      	b.n	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d107      	bne.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8be 	bl	8003c4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8fd 	bl	8003ce4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b40      	cmp	r3, #64	; 0x40
 8003af2:	d12f      	bne.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02a      	beq.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b1a:	e001      	b.n	8003b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4929      	ldr	r1, [pc, #164]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	d101      	bne.n	8003b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b2e:	e001      	b.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f043 0202 	orr.w	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fdfa 	bl	8003748 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d131      	bne.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d02c      	beq.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b74:	e001      	b.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4912      	ldr	r1, [pc, #72]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b82:	428b      	cmp	r3, r1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b88:	e001      	b.n	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fdc5 	bl	8003748 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bbe:	e000      	b.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bc0:	bf00      	nop
}
 8003bc2:	bf00      	nop
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40003800 	.word	0x40003800
 8003bd0:	40003400 	.word	0x40003400

08003bd4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	1c99      	adds	r1, r3, #2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d113      	bne.n	8003c42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ffc9 	bl	8003bd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c99      	adds	r1, r3, #2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c5e:	8819      	ldrh	r1, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <I2SEx_TxISR_I2SExt+0x90>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <I2SEx_TxISR_I2SExt+0x22>
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c6c:	e001      	b.n	8003c72 <I2SEx_TxISR_I2SExt+0x26>
 8003c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c72:	460a      	mov	r2, r1
 8003c74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d121      	bne.n	8003cd2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <I2SEx_TxISR_I2SExt+0x90>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <I2SEx_TxISR_I2SExt+0x50>
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c9a:	e001      	b.n	8003ca0 <I2SEx_TxISR_I2SExt+0x54>
 8003c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	490d      	ldr	r1, [pc, #52]	; (8003cdc <I2SEx_TxISR_I2SExt+0x90>)
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d101      	bne.n	8003cb0 <I2SEx_TxISR_I2SExt+0x64>
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <I2SEx_TxISR_I2SExt+0x94>)
 8003cae:	e001      	b.n	8003cb4 <I2SEx_TxISR_I2SExt+0x68>
 8003cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff81 	bl	8003bd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40003800 	.word	0x40003800
 8003ce0:	40003400 	.word	0x40003400

08003ce4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68d8      	ldr	r0, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	1c99      	adds	r1, r3, #2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cfc:	b282      	uxth	r2, r0
 8003cfe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d26:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ff4a 	bl	8003bd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <I2SEx_RxISR_I2SExt+0x16>
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <I2SEx_RxISR_I2SExt+0x94>)
 8003d5c:	e001      	b.n	8003d62 <I2SEx_RxISR_I2SExt+0x1a>
 8003d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d62:	68d8      	ldr	r0, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	1c99      	adds	r1, r3, #2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d6e:	b282      	uxth	r2, r0
 8003d70:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d121      	bne.n	8003dce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <I2SEx_RxISR_I2SExt+0x50>
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <I2SEx_RxISR_I2SExt+0x94>)
 8003d96:	e001      	b.n	8003d9c <I2SEx_RxISR_I2SExt+0x54>
 8003d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	490d      	ldr	r1, [pc, #52]	; (8003dd8 <I2SEx_RxISR_I2SExt+0x90>)
 8003da4:	428b      	cmp	r3, r1
 8003da6:	d101      	bne.n	8003dac <I2SEx_RxISR_I2SExt+0x64>
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <I2SEx_RxISR_I2SExt+0x94>)
 8003daa:	e001      	b.n	8003db0 <I2SEx_RxISR_I2SExt+0x68>
 8003dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff03 	bl	8003bd4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40003800 	.word	0x40003800
 8003ddc:	40003400 	.word	0x40003400

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e264      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfe:	4ba3      	ldr	r3, [pc, #652]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4ba0      	ldr	r3, [pc, #640]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b9d      	ldr	r3, [pc, #628]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b99      	ldr	r3, [pc, #612]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e23f      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x74>
 8003e46:	4b91      	ldr	r3, [pc, #580]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a90      	ldr	r2, [pc, #576]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b8b      	ldr	r3, [pc, #556]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a8a      	ldr	r2, [pc, #552]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a87      	ldr	r2, [pc, #540]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e78:	4b84      	ldr	r3, [pc, #528]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a83      	ldr	r2, [pc, #524]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a80      	ldr	r2, [pc, #512]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd f8aa 	bl	8000ff0 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd f8a6 	bl	8000ff0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e204      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc0>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd f896 	bl	8000ff0 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fd f892 	bl	8000ff0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1f0      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b6c      	ldr	r3, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe8>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b62      	ldr	r3, [pc, #392]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c4      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b56      	ldr	r3, [pc, #344]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4952      	ldr	r1, [pc, #328]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <HAL_RCC_OscConfig+0x2b0>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd f84b 	bl	8000ff0 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fd f847 	bl	8000ff0 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a5      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4940      	ldr	r1, [pc, #256]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_OscConfig+0x2b0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd f82a 	bl	8000ff0 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fd f826 	bl	8000ff0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e184      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b36      	ldr	r3, [pc, #216]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d030      	beq.n	800402c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCC_OscConfig+0x2b4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fd f80a 	bl	8000ff0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fd f806 	bl	8000ff0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e164      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003ffe:	e015      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x2b4>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fc fff3 	bl	8000ff0 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400e:	f7fc ffef 	bl	8000ff0 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e14d      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a0 	beq.w	800417a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCC_OscConfig+0x2ac>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d121      	bne.n	80040ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <HAL_RCC_OscConfig+0x2b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <HAL_RCC_OscConfig+0x2b8>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7fc ffb5 	bl	8000ff0 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e011      	b.n	80040ae <HAL_RCC_OscConfig+0x2ce>
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	42470000 	.word	0x42470000
 8004094:	42470e80 	.word	0x42470e80
 8004098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fc ffa8 	bl	8000ff0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e106      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <HAL_RCC_OscConfig+0x4e4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2f0>
 80040c2:	4b81      	ldr	r3, [pc, #516]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a80      	ldr	r2, [pc, #512]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	e01c      	b.n	800410a <HAL_RCC_OscConfig+0x32a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d10c      	bne.n	80040f2 <HAL_RCC_OscConfig+0x312>
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a7a      	ldr	r2, [pc, #488]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	e00b      	b.n	800410a <HAL_RCC_OscConfig+0x32a>
 80040f2:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fc ff6d 	bl	8000ff0 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fc ff69 	bl	8000ff0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0c5      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	4b65      	ldr	r3, [pc, #404]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ee      	beq.n	800411a <HAL_RCC_OscConfig+0x33a>
 800413c:	e014      	b.n	8004168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413e:	f7fc ff57 	bl	8000ff0 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fc ff53 	bl	8000ff0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0af      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415c:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ee      	bne.n	8004146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d105      	bne.n	800417a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416e:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a55      	ldr	r2, [pc, #340]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 809b 	beq.w	80042ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d05c      	beq.n	800424a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d141      	bne.n	800421c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419e:	f7fc ff27 	bl	8000ff0 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a6:	f7fc ff23 	bl	8000ff0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e081      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	019b      	lsls	r3, r3, #6
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	4937      	ldr	r1, [pc, #220]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ee:	4b37      	ldr	r3, [pc, #220]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fc fefc 	bl	8000ff0 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fc fef8 	bl	8000ff0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e056      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x41c>
 800421a:	e04e      	b.n	80042ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fc fee5 	bl	8000ff0 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422a:	f7fc fee1 	bl	8000ff0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e03f      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x44a>
 8004248:	e037      	b.n	80042ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e032      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_RCC_OscConfig+0x4e8>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d028      	beq.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d121      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d11a      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004286:	4013      	ands	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800428c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	3b01      	subs	r3, #1
 80042a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40007000 	.word	0x40007000
 80042c8:	40023800 	.word	0x40023800
 80042cc:	42470060 	.word	0x42470060

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7fc fe16 	bl	8000ff0 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7fc fe12 	bl	8000ff0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004456:	f000 f821 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc fd76 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	08009664 	.word	0x08009664
 8004494:	20000000 	.word	0x20000000
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	2300      	movs	r3, #0
 80044ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	4b67      	ldr	r3, [pc, #412]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x40>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	f200 80bd 	bhi.w	8004640 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ce:	e0b7      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044d2:	60bb      	str	r3, [r7, #8]
       break;
 80044d4:	e0b7      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044d8:	60bb      	str	r3, [r7, #8]
      break;
 80044da:	e0b4      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04d      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	461a      	mov	r2, r3
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	ea02 0800 	and.w	r8, r2, r0
 800450a:	ea03 0901 	and.w	r9, r3, r1
 800450e:	4640      	mov	r0, r8
 8004510:	4649      	mov	r1, r9
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	014b      	lsls	r3, r1, #5
 800451c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004520:	0142      	lsls	r2, r0, #5
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	ebb0 0008 	subs.w	r0, r0, r8
 800452a:	eb61 0109 	sbc.w	r1, r1, r9
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	018b      	lsls	r3, r1, #6
 8004538:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800453c:	0182      	lsls	r2, r0, #6
 800453e:	1a12      	subs	r2, r2, r0
 8004540:	eb63 0301 	sbc.w	r3, r3, r1
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	00d9      	lsls	r1, r3, #3
 800454e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004552:	00d0      	lsls	r0, r2, #3
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	eb12 0208 	adds.w	r2, r2, r8
 800455c:	eb43 0309 	adc.w	r3, r3, r9
 8004560:	f04f 0000 	mov.w	r0, #0
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	0259      	lsls	r1, r3, #9
 800456a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800456e:	0250      	lsls	r0, r2, #9
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	f7fb fe76 	bl	8000270 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e04a      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	099b      	lsrs	r3, r3, #6
 8004594:	461a      	mov	r2, r3
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	ea02 0400 	and.w	r4, r2, r0
 80045a6:	ea03 0501 	and.w	r5, r3, r1
 80045aa:	4620      	mov	r0, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	014b      	lsls	r3, r1, #5
 80045b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045bc:	0142      	lsls	r2, r0, #5
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	1b00      	subs	r0, r0, r4
 80045c4:	eb61 0105 	sbc.w	r1, r1, r5
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	018b      	lsls	r3, r1, #6
 80045d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045d6:	0182      	lsls	r2, r0, #6
 80045d8:	1a12      	subs	r2, r2, r0
 80045da:	eb63 0301 	sbc.w	r3, r3, r1
 80045de:	f04f 0000 	mov.w	r0, #0
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	00d9      	lsls	r1, r3, #3
 80045e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ec:	00d0      	lsls	r0, r2, #3
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	1912      	adds	r2, r2, r4
 80045f4:	eb45 0303 	adc.w	r3, r5, r3
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0299      	lsls	r1, r3, #10
 8004602:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004606:	0290      	lsls	r0, r2, #10
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	461a      	mov	r2, r3
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	f7fb fe2a 	bl	8000270 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	60bb      	str	r3, [r7, #8]
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004642:	60bb      	str	r3, [r7, #8]
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	68bb      	ldr	r3, [r7, #8]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	007a1200 	.word	0x007a1200

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff0 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0a9b      	lsrs	r3, r3, #10
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08009674 	.word	0x08009674

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffdc 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08009674 	.word	0x08009674

080046c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d035      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f0:	4b62      	ldr	r3, [pc, #392]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f6:	f7fc fc7b 	bl	8000ff0 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046fe:	f7fc fc77 	bl	8000ff0 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0b0      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004710:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	019a      	lsls	r2, r3, #6
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	071b      	lsls	r3, r3, #28
 8004728:	4955      	ldr	r1, [pc, #340]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004730:	4b52      	ldr	r3, [pc, #328]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004736:	f7fc fc5b 	bl	8000ff0 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800473e:	f7fc fc57 	bl	8000ff0 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e090      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8083 	beq.w	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3e      	ldr	r2, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004792:	f7fc fc2d 	bl	8000ff0 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fc fc29 	bl	8000ff0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e062      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047b8:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02f      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d028      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d114      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fc fbf7 	bl	8000ff0 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fc fbf3 	bl	8000ff0 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e02a      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ee      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d10d      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484a:	490d      	ldr	r1, [pc, #52]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]
 8004850:	e005      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800485c:	6093      	str	r3, [r2, #8]
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	4905      	ldr	r1, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	42470068 	.word	0x42470068
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470e40 	.word	0x42470e40

0800488c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d13e      	bne.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d12f      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048c2:	617b      	str	r3, [r7, #20]
          break;
 80048c4:	e02f      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d2:	d108      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	e007      	b.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	0f1b      	lsrs	r3, r3, #28
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
          break;
 800491e:	e002      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
          break;
 8004924:	bf00      	nop
        }
      }
      break;
 8004926:	bf00      	nop
    }
  }
  return frequency;
 8004928:	697b      	ldr	r3, [r7, #20]
}
 800492a:	4618      	mov	r0, r3
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	00bb8000 	.word	0x00bb8000
 8004940:	007a1200 	.word	0x007a1200
 8004944:	00f42400 	.word	0x00f42400

08004948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e07b      	b.n	8004a52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d108      	bne.n	8004974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496a:	d009      	beq.n	8004980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
 8004972:	e005      	b.n	8004980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc f928 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	ea42 0103 	orr.w	r1, r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	f003 0104 	and.w	r1, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0210 	and.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e03f      	b.n	8004aec <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc f9d5 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2224      	movs	r2, #36	; 0x24
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fdda 	bl	8005658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d17c      	bne.n	8004c0e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Transmit+0x2c>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e075      	b.n	8004c10 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Transmit+0x3e>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e06e      	b.n	8004c10 <HAL_UART_Transmit+0x11c>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2221      	movs	r2, #33	; 0x21
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b48:	f7fc fa52 	bl	8000ff0 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	d108      	bne.n	8004b76 <HAL_UART_Transmit+0x82>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e003      	b.n	8004b7e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b86:	e02a      	b.n	8004bde <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fb1e 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e036      	b.n	8004c10 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10b      	bne.n	8004bc0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	3302      	adds	r3, #2
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	e007      	b.n	8004bd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1cf      	bne.n	8004b88 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 faee 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d11d      	bne.n	8004c6e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_UART_Receive_IT+0x26>
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e016      	b.n	8004c70 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_UART_Receive_IT+0x38>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e00f      	b.n	8004c70 <HAL_UART_Receive_IT+0x58>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb23 	bl	80052b0 <UART_Start_Receive_IT>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	e000      	b.n	8004c70 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b0ba      	sub	sp, #232	; 0xe8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_UART_IRQHandler+0x66>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fc03 	bl	80054e2 <UART_Receive_IT>
      return;
 8004cdc:	e256      	b.n	800518c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80de 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x22c>
 8004ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80d1 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_UART_IRQHandler+0xae>
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f043 0201 	orr.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
 8004d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0202 	orr.w	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_UART_IRQHandler+0xf6>
 8004d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d011      	beq.n	8004d9e <HAL_UART_IRQHandler+0x126>
 8004d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d105      	bne.n	8004d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0208 	orr.w	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 81ed 	beq.w	8005182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x14e>
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb8e 	bl	80054e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_UART_IRQHandler+0x17a>
 8004dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d04f      	beq.n	8004e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa96 	bl	8005324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d141      	bne.n	8004e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1d9      	bne.n	8004e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d013      	beq.n	8004e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	4a7d      	ldr	r2, [pc, #500]	; (8005054 <HAL_UART_IRQHandler+0x3dc>)
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fc fa73 	bl	8001352 <HAL_DMA_Abort_IT>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	e00e      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f990 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e00a      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f98c 	bl	80051a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e006      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f988 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e9e:	e170      	b.n	8005182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	bf00      	nop
    return;
 8004ea2:	e16e      	b.n	8005182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 814a 	bne.w	8005142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8143 	beq.w	8005142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 813c 	beq.w	8005142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	f040 80b4 	bne.w	8005058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8140 	beq.w	8005186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	f080 8139 	bcs.w	8005186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f26:	f000 8088 	beq.w	800503a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1d9      	bne.n	8004f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e1      	bne.n	8004f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800501c:	65ba      	str	r2, [r7, #88]	; 0x58
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800502a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	4618      	mov	r0, r3
 8005036:	f7fc f91c 	bl	8001272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005042:	b29b      	uxth	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8b6 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005050:	e099      	b.n	8005186 <HAL_UART_IRQHandler+0x50e>
 8005052:	bf00      	nop
 8005054:	080053eb 	.word	0x080053eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 808b 	beq.w	800518a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8086 	beq.w	800518a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050a2:	647a      	str	r2, [r7, #68]	; 0x44
 80050a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	623b      	str	r3, [r7, #32]
   return(result);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050da:	633a      	str	r2, [r7, #48]	; 0x30
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e3      	bne.n	80050b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	617b      	str	r3, [r7, #20]
   return(result);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e3      	bne.n	80050fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f83e 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005140:	e023      	b.n	800518a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_UART_IRQHandler+0x4ea>
 800514e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f959 	bl	8005412 <UART_Transmit_IT>
    return;
 8005160:	e014      	b.n	800518c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <HAL_UART_IRQHandler+0x514>
 800516e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f999 	bl	80054b2 <UART_EndTransmit_IT>
    return;
 8005180:	e004      	b.n	800518c <HAL_UART_IRQHandler+0x514>
    return;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_UART_IRQHandler+0x514>
      return;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_UART_IRQHandler+0x514>
      return;
 800518a:	bf00      	nop
  }
}
 800518c:	37e8      	adds	r7, #232	; 0xe8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop

08005194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b090      	sub	sp, #64	; 0x40
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	e050      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d04c      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f4:	f7fb fefc 	bl	8000ff0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005200:	429a      	cmp	r2, r3
 8005202:	d241      	bcs.n	8005288 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005224:	637a      	str	r2, [r7, #52]	; 0x34
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800522a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	613b      	str	r3, [r7, #16]
   return(result);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005258:	623a      	str	r2, [r7, #32]
 800525a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	61bb      	str	r3, [r7, #24]
   return(result);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e00f      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d09f      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3740      	adds	r7, #64	; 0x40
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2222      	movs	r2, #34	; 0x22
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b095      	sub	sp, #84	; 0x54
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800534c:	643a      	str	r2, [r7, #64]	; 0x40
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	; 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d119      	bne.n	80053d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053de:	bf00      	nop
 80053e0:	3754      	adds	r7, #84	; 0x54
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff fecf 	bl	80051a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b21      	cmp	r3, #33	; 0x21
 8005424:	d13e      	bne.n	80054a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	d114      	bne.n	800545a <UART_Transmit_IT+0x48>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d110      	bne.n	800545a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]
 8005458:	e008      	b.n	800546c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6211      	str	r1, [r2, #32]
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4619      	mov	r1, r3
 800547a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800548e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fe5e 	bl	8005194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08c      	sub	sp, #48	; 0x30
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b22      	cmp	r3, #34	; 0x22
 80054f4:	f040 80ab 	bne.w	800564e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005500:	d117      	bne.n	8005532 <UART_Receive_IT+0x50>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005520:	b29a      	uxth	r2, r3
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
 8005530:	e026      	b.n	8005580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	d007      	beq.n	8005556 <UART_Receive_IT+0x74>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <UART_Receive_IT+0x82>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e008      	b.n	8005576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005570:	b2da      	uxtb	r2, r3
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4619      	mov	r1, r3
 800558e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005590:	2b00      	cmp	r3, #0
 8005592:	d15a      	bne.n	800564a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0220 	bic.w	r2, r2, #32
 80055a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d135      	bne.n	8005640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 0310 	bic.w	r3, r3, #16
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	623a      	str	r2, [r7, #32]
 80055fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	69f9      	ldr	r1, [r7, #28]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	61bb      	str	r3, [r7, #24]
   return(result);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d10a      	bne.n	8005632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fdbf 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 800563e:	e002      	b.n	8005646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fb fa69 	bl	8000b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e002      	b.n	8005650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	b09f      	sub	sp, #124	; 0x7c
 800565e:	af00      	add	r7, sp, #0
 8005660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800566c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566e:	68d9      	ldr	r1, [r3, #12]
 8005670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	ea40 0301 	orr.w	r3, r0, r1
 8005678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	431a      	orrs	r2, r3
 800568a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800569c:	f021 010c 	bic.w	r1, r1, #12
 80056a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a6:	430b      	orrs	r3, r1
 80056a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	6999      	ldr	r1, [r3, #24]
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	ea40 0301 	orr.w	r3, r0, r1
 80056c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4bc5      	ldr	r3, [pc, #788]	; (80059dc <UART_SetConfig+0x384>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d004      	beq.n	80056d6 <UART_SetConfig+0x7e>
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4bc3      	ldr	r3, [pc, #780]	; (80059e0 <UART_SetConfig+0x388>)
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d103      	bne.n	80056de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d6:	f7fe ffe3 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 80056da:	6778      	str	r0, [r7, #116]	; 0x74
 80056dc:	e002      	b.n	80056e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056de:	f7fe ffcb 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80056e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	f040 80b6 	bne.w	800585c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f2:	461c      	mov	r4, r3
 80056f4:	f04f 0500 	mov.w	r5, #0
 80056f8:	4622      	mov	r2, r4
 80056fa:	462b      	mov	r3, r5
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005700:	415b      	adcs	r3, r3
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
 8005704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005708:	1912      	adds	r2, r2, r4
 800570a:	eb45 0303 	adc.w	r3, r5, r3
 800570e:	f04f 0000 	mov.w	r0, #0
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	00d9      	lsls	r1, r3, #3
 8005718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800571c:	00d0      	lsls	r0, r2, #3
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	1911      	adds	r1, r2, r4
 8005724:	6639      	str	r1, [r7, #96]	; 0x60
 8005726:	416b      	adcs	r3, r5
 8005728:	667b      	str	r3, [r7, #100]	; 0x64
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	461a      	mov	r2, r3
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	1891      	adds	r1, r2, r2
 8005736:	63b9      	str	r1, [r7, #56]	; 0x38
 8005738:	415b      	adcs	r3, r3
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005744:	f7fa fd94 	bl	8000270 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4ba5      	ldr	r3, [pc, #660]	; (80059e4 <UART_SetConfig+0x38c>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011e      	lsls	r6, r3, #4
 8005756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005758:	461c      	mov	r4, r3
 800575a:	f04f 0500 	mov.w	r5, #0
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	1891      	adds	r1, r2, r2
 8005764:	6339      	str	r1, [r7, #48]	; 0x30
 8005766:	415b      	adcs	r3, r3
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800576e:	1912      	adds	r2, r2, r4
 8005770:	eb45 0303 	adc.w	r3, r5, r3
 8005774:	f04f 0000 	mov.w	r0, #0
 8005778:	f04f 0100 	mov.w	r1, #0
 800577c:	00d9      	lsls	r1, r3, #3
 800577e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005782:	00d0      	lsls	r0, r2, #3
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	1911      	adds	r1, r2, r4
 800578a:	65b9      	str	r1, [r7, #88]	; 0x58
 800578c:	416b      	adcs	r3, r5
 800578e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	461a      	mov	r2, r3
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	1891      	adds	r1, r2, r2
 800579c:	62b9      	str	r1, [r7, #40]	; 0x28
 800579e:	415b      	adcs	r3, r3
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057aa:	f7fa fd61 	bl	8000270 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4b8c      	ldr	r3, [pc, #560]	; (80059e4 <UART_SetConfig+0x38c>)
 80057b4:	fba3 1302 	umull	r1, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	2164      	movs	r1, #100	; 0x64
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	3332      	adds	r3, #50	; 0x32
 80057c6:	4a87      	ldr	r2, [pc, #540]	; (80059e4 <UART_SetConfig+0x38c>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057d4:	441e      	add	r6, r3
 80057d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d8:	4618      	mov	r0, r3
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	1894      	adds	r4, r2, r2
 80057e4:	623c      	str	r4, [r7, #32]
 80057e6:	415b      	adcs	r3, r3
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ee:	1812      	adds	r2, r2, r0
 80057f0:	eb41 0303 	adc.w	r3, r1, r3
 80057f4:	f04f 0400 	mov.w	r4, #0
 80057f8:	f04f 0500 	mov.w	r5, #0
 80057fc:	00dd      	lsls	r5, r3, #3
 80057fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005802:	00d4      	lsls	r4, r2, #3
 8005804:	4622      	mov	r2, r4
 8005806:	462b      	mov	r3, r5
 8005808:	1814      	adds	r4, r2, r0
 800580a:	653c      	str	r4, [r7, #80]	; 0x50
 800580c:	414b      	adcs	r3, r1
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	1891      	adds	r1, r2, r2
 800581c:	61b9      	str	r1, [r7, #24]
 800581e:	415b      	adcs	r3, r3
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800582a:	f7fa fd21 	bl	8000270 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <UART_SetConfig+0x38c>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a67      	ldr	r2, [pc, #412]	; (80059e4 <UART_SetConfig+0x38c>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4432      	add	r2, r6
 8005858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800585a:	e0b9      	b.n	80059d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585e:	461c      	mov	r4, r3
 8005860:	f04f 0500 	mov.w	r5, #0
 8005864:	4622      	mov	r2, r4
 8005866:	462b      	mov	r3, r5
 8005868:	1891      	adds	r1, r2, r2
 800586a:	6139      	str	r1, [r7, #16]
 800586c:	415b      	adcs	r3, r3
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005874:	1912      	adds	r2, r2, r4
 8005876:	eb45 0303 	adc.w	r3, r5, r3
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	00d9      	lsls	r1, r3, #3
 8005884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005888:	00d0      	lsls	r0, r2, #3
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	eb12 0804 	adds.w	r8, r2, r4
 8005892:	eb43 0905 	adc.w	r9, r3, r5
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	008b      	lsls	r3, r1, #2
 80058aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ae:	0082      	lsls	r2, r0, #2
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fcdc 	bl	8000270 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4b49      	ldr	r3, [pc, #292]	; (80059e4 <UART_SetConfig+0x38c>)
 80058be:	fba3 2302 	umull	r2, r3, r3, r2
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	011e      	lsls	r6, r3, #4
 80058c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c8:	4618      	mov	r0, r3
 80058ca:	f04f 0100 	mov.w	r1, #0
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	1894      	adds	r4, r2, r2
 80058d4:	60bc      	str	r4, [r7, #8]
 80058d6:	415b      	adcs	r3, r3
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058de:	1812      	adds	r2, r2, r0
 80058e0:	eb41 0303 	adc.w	r3, r1, r3
 80058e4:	f04f 0400 	mov.w	r4, #0
 80058e8:	f04f 0500 	mov.w	r5, #0
 80058ec:	00dd      	lsls	r5, r3, #3
 80058ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058f2:	00d4      	lsls	r4, r2, #3
 80058f4:	4622      	mov	r2, r4
 80058f6:	462b      	mov	r3, r5
 80058f8:	1814      	adds	r4, r2, r0
 80058fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80058fc:	414b      	adcs	r3, r1
 80058fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	f04f 0100 	mov.w	r1, #0
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	008b      	lsls	r3, r1, #2
 8005914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005918:	0082      	lsls	r2, r0, #2
 800591a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800591e:	f7fa fca7 	bl	8000270 <__aeabi_uldivmod>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <UART_SetConfig+0x38c>)
 8005928:	fba3 1302 	umull	r1, r3, r3, r2
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	2164      	movs	r1, #100	; 0x64
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	3332      	adds	r3, #50	; 0x32
 800593a:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <UART_SetConfig+0x38c>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005946:	441e      	add	r6, r3
 8005948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594a:	4618      	mov	r0, r3
 800594c:	f04f 0100 	mov.w	r1, #0
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	1894      	adds	r4, r2, r2
 8005956:	603c      	str	r4, [r7, #0]
 8005958:	415b      	adcs	r3, r3
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005960:	1812      	adds	r2, r2, r0
 8005962:	eb41 0303 	adc.w	r3, r1, r3
 8005966:	f04f 0400 	mov.w	r4, #0
 800596a:	f04f 0500 	mov.w	r5, #0
 800596e:	00dd      	lsls	r5, r3, #3
 8005970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005974:	00d4      	lsls	r4, r2, #3
 8005976:	4622      	mov	r2, r4
 8005978:	462b      	mov	r3, r5
 800597a:	eb12 0a00 	adds.w	sl, r2, r0
 800597e:	eb43 0b01 	adc.w	fp, r3, r1
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	f04f 0100 	mov.w	r1, #0
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	008b      	lsls	r3, r1, #2
 8005996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800599a:	0082      	lsls	r2, r0, #2
 800599c:	4650      	mov	r0, sl
 800599e:	4659      	mov	r1, fp
 80059a0:	f7fa fc66 	bl	8000270 <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <UART_SetConfig+0x38c>)
 80059aa:	fba3 1302 	umull	r1, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2164      	movs	r1, #100	; 0x64
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <UART_SetConfig+0x38c>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4432      	add	r2, r6
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	377c      	adds	r7, #124	; 0x7c
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	40011000 	.word	0x40011000
 80059e0:	40011400 	.word	0x40011400
 80059e4:	51eb851f 	.word	0x51eb851f

080059e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e8:	b084      	sub	sp, #16
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	f107 001c 	add.w	r0, r7, #28
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d122      	bne.n	8005a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f9a0 	bl	8005d80 <USB_CoreReset>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
 8005a44:	e01a      	b.n	8005a7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f994 	bl	8005d80 <USB_CoreReset>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a6e:	e005      	b.n	8005a7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10b      	bne.n	8005a9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f043 0206 	orr.w	r2, r3, #6
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa6:	b004      	add	sp, #16
 8005aa8:	4770      	bx	lr

08005aaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 0201 	bic.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d115      	bne.n	8005b3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7fb fa73 	bl	8001008 <HAL_Delay>
      ms++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f91a 	bl	8005d62 <USB_GetMode>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d01e      	beq.n	8005b72 <USB_SetCurrentMode+0x84>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b31      	cmp	r3, #49	; 0x31
 8005b38:	d9f0      	bls.n	8005b1c <USB_SetCurrentMode+0x2e>
 8005b3a:	e01a      	b.n	8005b72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d115      	bne.n	8005b6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b4e:	2001      	movs	r0, #1
 8005b50:	f7fb fa5a 	bl	8001008 <HAL_Delay>
      ms++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f901 	bl	8005d62 <USB_GetMode>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <USB_SetCurrentMode+0x84>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b31      	cmp	r3, #49	; 0x31
 8005b6a:	d9f0      	bls.n	8005b4e <USB_SetCurrentMode+0x60>
 8005b6c:	e001      	b.n	8005b72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e005      	b.n	8005b7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b32      	cmp	r3, #50	; 0x32
 8005b76:	d101      	bne.n	8005b7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <USB_FlushTxFifo+0x44>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e006      	b.n	8005bc0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d0f1      	beq.n	8005ba2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	00030d40 	.word	0x00030d40

08005bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2210      	movs	r2, #16
 8005be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <USB_FlushRxFifo+0x3c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e006      	b.n	8005c00 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d0f1      	beq.n	8005be2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	00030d40 	.word	0x00030d40

08005c10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	460b      	mov	r3, r1
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d123      	bne.n	8005c7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c36:	88bb      	ldrh	r3, [r7, #4]
 8005c38:	3303      	adds	r3, #3
 8005c3a:	089b      	lsrs	r3, r3, #2
 8005c3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e018      	b.n	8005c76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	031a      	lsls	r2, r3, #12
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c50:	461a      	mov	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d3e2      	bcc.n	8005c44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3724      	adds	r7, #36	; 0x24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b08b      	sub	sp, #44	; 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	e014      	b.n	8005ce2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	3301      	adds	r3, #1
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	623b      	str	r3, [r7, #32]
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d3e6      	bcc.n	8005cb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01e      	beq.n	8005d2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	701a      	strb	r2, [r3, #0]
      i++;
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d22:	8bfb      	ldrh	r3, [r7, #30]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d28:	8bfb      	ldrh	r3, [r7, #30]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1ea      	bne.n	8005d04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	372c      	adds	r7, #44	; 0x2c
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <USB_CoreReset+0x60>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e01a      	b.n	8005dd2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	daf3      	bge.n	8005d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f043 0201 	orr.w	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <USB_CoreReset+0x60>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e006      	b.n	8005dd2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d0f1      	beq.n	8005db4 <USB_CoreReset+0x34>

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	00030d40 	.word	0x00030d40

08005de4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de4:	b084      	sub	sp, #16
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	f107 001c 	add.w	r0, r7, #28
 8005df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e00:	461a      	mov	r2, r3
 8005e02:	2300      	movs	r3, #0
 8005e04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d018      	beq.n	8005e68 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10a      	bne.n	8005e52 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	e014      	b.n	8005e7c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e009      	b.n	8005e7c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e76:	f023 0304 	bic.w	r3, r3, #4
 8005e7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005e7c:	2110      	movs	r1, #16
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff fe82 	bl	8005b88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fea3 	bl	8005bd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e015      	b.n	8005ebc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3e5      	bcc.n	8005e90 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <USB_HostInit+0x154>)
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <USB_HostInit+0x158>)
 8005ef0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ef4:	e009      	b.n	8005f0a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <USB_HostInit+0x15c>)
 8005f00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <USB_HostInit+0x160>)
 8005f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f043 0210 	orr.w	r2, r3, #16
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <USB_HostInit+0x164>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f34:	b004      	add	sp, #16
 8005f36:	4770      	bx	lr
 8005f38:	01000200 	.word	0x01000200
 8005f3c:	00e00300 	.word	0x00e00300
 8005f40:	00600080 	.word	0x00600080
 8005f44:	004000e0 	.word	0x004000e0
 8005f48:	a3200008 	.word	0xa3200008

08005f4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d107      	bne.n	8005f9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f94:	461a      	mov	r2, r3
 8005f96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f9a:	6053      	str	r3, [r2, #4]
 8005f9c:	e009      	b.n	8005fb2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d106      	bne.n	8005fb2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005faa:	461a      	mov	r2, r3
 8005fac:	f241 7370 	movw	r3, #6000	; 0x1770
 8005fb0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005fe0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ff0:	2064      	movs	r0, #100	; 0x64
 8005ff2:	f7fb f809 	bl	8001008 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006002:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006004:	200a      	movs	r0, #10
 8006006:	f7fa ffff 	bl	8001008 <HAL_Delay>

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006038:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <USB_DriveVbus+0x44>
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d106      	bne.n	8006058 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006056:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	d109      	bne.n	8006078 <USB_DriveVbus+0x64>
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006076:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	0c5b      	lsrs	r3, r3, #17
 80060a4:	f003 0303 	and.w	r3, r3, #3
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	b29b      	uxth	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	70fb      	strb	r3, [r7, #3]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70bb      	strb	r3, [r7, #2]
 80060ee:	4613      	mov	r3, r2
 80060f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	461a      	mov	r2, r3
 8006108:	f04f 33ff 	mov.w	r3, #4294967295
 800610c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800610e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006112:	2b03      	cmp	r3, #3
 8006114:	d87e      	bhi.n	8006214 <USB_HC_Init+0x13c>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <USB_HC_Init+0x44>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	0800612d 	.word	0x0800612d
 8006120:	080061d7 	.word	0x080061d7
 8006124:	0800612d 	.word	0x0800612d
 8006128:	08006199 	.word	0x08006199
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006138:	461a      	mov	r2, r3
 800613a:	f240 439d 	movw	r3, #1181	; 0x49d
 800613e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da10      	bge.n	800616a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	440a      	add	r2, r1
 800615e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006166:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006168:	e057      	b.n	800621a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d051      	beq.n	800621a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	440a      	add	r2, r1
 800618c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006190:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006194:	60d3      	str	r3, [r2, #12]
      break;
 8006196:	e040      	b.n	800621a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a4:	461a      	mov	r2, r3
 80061a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80061aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	da34      	bge.n	800621e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061d4:	e023      	b.n	800621e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	f240 2325 	movw	r3, #549	; 0x225
 80061e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da17      	bge.n	8006222 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	440a      	add	r2, r1
 8006208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006210:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006212:	e006      	b.n	8006222 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	77fb      	strb	r3, [r7, #31]
      break;
 8006218:	e004      	b.n	8006224 <USB_HC_Init+0x14c>
      break;
 800621a:	bf00      	nop
 800621c:	e002      	b.n	8006224 <USB_HC_Init+0x14c>
      break;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <USB_HC_Init+0x14c>
      break;
 8006222:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	2101      	movs	r1, #1
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	6939      	ldr	r1, [r7, #16]
 800623a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800623e:	4313      	orrs	r3, r2
 8006240:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800624e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da03      	bge.n	800625e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	e001      	b.n	8006262 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff ff0f 	bl	8006086 <USB_GetHostSpeed>
 8006268:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800626a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800626e:	2b02      	cmp	r3, #2
 8006270:	d106      	bne.n	8006280 <USB_HC_Init+0x1a8>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d003      	beq.n	8006280 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e001      	b.n	8006284 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006284:	787b      	ldrb	r3, [r7, #1]
 8006286:	059b      	lsls	r3, r3, #22
 8006288:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800628c:	78bb      	ldrb	r3, [r7, #2]
 800628e:	02db      	lsls	r3, r3, #11
 8006290:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006294:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006296:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800629a:	049b      	lsls	r3, r3, #18
 800629c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	0159      	lsls	r1, r3, #5
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	440b      	add	r3, r1
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062c0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80062c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d10f      	bne.n	80062ea <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08c      	sub	sp, #48	; 0x30
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800630c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006310:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d02d      	beq.n	800637a <USB_HC_StartXfer+0x86>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	791b      	ldrb	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d129      	bne.n	800637a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d117      	bne.n	800635c <USB_HC_StartXfer+0x68>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	79db      	ldrb	r3, [r3, #7]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <USB_HC_StartXfer+0x48>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	79db      	ldrb	r3, [r3, #7]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d10f      	bne.n	800635c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <USB_HC_StartXfer+0x86>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	795b      	ldrb	r3, [r3, #5]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d107      	bne.n	800637a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	4619      	mov	r1, r3
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fa2f 	bl	80067d4 <USB_DoPing>
      return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e0f8      	b.n	800656c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d018      	beq.n	80063b4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	8912      	ldrh	r2, [r2, #8]
 800638a:	4413      	add	r3, r2
 800638c:	3b01      	subs	r3, #1
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	8912      	ldrh	r2, [r2, #8]
 8006392:	fbb3 f3f2 	udiv	r3, r3, r2
 8006396:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006398:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	429a      	cmp	r2, r3
 800639e:	d90b      	bls.n	80063b8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80063a0:	8b7b      	ldrh	r3, [r7, #26]
 80063a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	8912      	ldrh	r2, [r2, #8]
 80063aa:	fb02 f203 	mul.w	r2, r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	611a      	str	r2, [r3, #16]
 80063b2:	e001      	b.n	80063b8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	78db      	ldrb	r3, [r3, #3]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	8912      	ldrh	r2, [r2, #8]
 80063c6:	fb02 f203 	mul.w	r2, r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	611a      	str	r2, [r3, #16]
 80063ce:	e003      	b.n	80063d8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063e2:	04d9      	lsls	r1, r3, #19
 80063e4:	4b63      	ldr	r3, [pc, #396]	; (8006574 <USB_HC_StartXfer+0x280>)
 80063e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	7a9b      	ldrb	r3, [r3, #10]
 80063ee:	075b      	lsls	r3, r3, #29
 80063f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063f4:	69f9      	ldr	r1, [r7, #28]
 80063f6:	0148      	lsls	r0, r1, #5
 80063f8:	6a39      	ldr	r1, [r7, #32]
 80063fa:	4401      	add	r1, r0
 80063fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006400:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006402:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	68d9      	ldr	r1, [r3, #12]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	460a      	mov	r2, r1
 800641c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf0c      	ite	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	2300      	movne	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	440a      	add	r2, r1
 800644c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006450:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006454:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	7e7b      	ldrb	r3, [r7, #25]
 8006466:	075b      	lsls	r3, r3, #29
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	0148      	lsls	r0, r1, #5
 800646c:	6a39      	ldr	r1, [r7, #32]
 800646e:	4401      	add	r1, r0
 8006470:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006474:	4313      	orrs	r3, r2
 8006476:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800648e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	78db      	ldrb	r3, [r3, #3]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	e003      	b.n	80064aa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064a8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064be:	461a      	mov	r2, r3
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e04e      	b.n	800656c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	78db      	ldrb	r3, [r3, #3]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d149      	bne.n	800656a <USB_HC_StartXfer+0x276>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d045      	beq.n	800656a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	79db      	ldrb	r3, [r3, #7]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d830      	bhi.n	8006548 <USB_HC_StartXfer+0x254>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <USB_HC_StartXfer+0x1f8>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	08006521 	.word	0x08006521
 80064f4:	080064fd 	.word	0x080064fd
 80064f8:	08006521 	.word	0x08006521
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	3303      	adds	r3, #3
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006506:	8afa      	ldrh	r2, [r7, #22]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	b29b      	uxth	r3, r3
 800650e:	429a      	cmp	r2, r3
 8006510:	d91c      	bls.n	800654c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f043 0220 	orr.w	r2, r3, #32
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	619a      	str	r2, [r3, #24]
        }
        break;
 800651e:	e015      	b.n	800654c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	3303      	adds	r3, #3
 8006526:	089b      	lsrs	r3, r3, #2
 8006528:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800652a:	8afa      	ldrh	r2, [r7, #22]
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	b29b      	uxth	r3, r3
 8006536:	429a      	cmp	r2, r3
 8006538:	d90a      	bls.n	8006550 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	619a      	str	r2, [r3, #24]
        }
        break;
 8006546:	e003      	b.n	8006550 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006548:	bf00      	nop
 800654a:	e002      	b.n	8006552 <USB_HC_StartXfer+0x25e>
        break;
 800654c:	bf00      	nop
 800654e:	e000      	b.n	8006552 <USB_HC_StartXfer+0x25e>
        break;
 8006550:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	68d9      	ldr	r1, [r3, #12]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	785a      	ldrb	r2, [r3, #1]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	b29b      	uxth	r3, r3
 8006560:	2000      	movs	r0, #0
 8006562:	9000      	str	r0, [sp, #0]
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fb53 	bl	8005c10 <USB_WritePacket>
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3728      	adds	r7, #40	; 0x28
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	1ff80000 	.word	0x1ff80000

08006578 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	b29b      	uxth	r3, r3
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800659a:	b480      	push	{r7}
 800659c:	b089      	sub	sp, #36	; 0x24
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	460b      	mov	r3, r1
 80065a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	0c9b      	lsrs	r3, r3, #18
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	0fdb      	lsrs	r3, r3, #31
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d104      	bne.n	80065f4 <USB_HC_Halt+0x5a>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	e0e8      	b.n	80067c6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <USB_HC_Halt+0x66>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d173      	bne.n	80066e8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	440a      	add	r2, r1
 8006616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800661e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 80cb 	bne.w	80067c4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d143      	bne.n	80066c2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	440a      	add	r2, r1
 8006650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006658:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	440a      	add	r2, r1
 8006670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006678:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	440a      	add	r2, r1
 8006690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006694:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006698:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	3301      	adds	r3, #1
 800669e:	61fb      	str	r3, [r7, #28]
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a6:	d81d      	bhi.n	80066e4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066be:	d0ec      	beq.n	800669a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066c0:	e080      	b.n	80067c4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066e2:	e06f      	b.n	80067c4 <USB_HC_Halt+0x22a>
            break;
 80066e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066e6:	e06d      	b.n	80067c4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006706:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d143      	bne.n	80067a0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	440a      	add	r2, r1
 800672e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006736:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	440a      	add	r2, r1
 800674e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006756:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	440a      	add	r2, r1
 800676e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006776:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3301      	adds	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006784:	d81d      	bhi.n	80067c2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679c:	d0ec      	beq.n	8006778 <USB_HC_Halt+0x1de>
 800679e:	e011      	b.n	80067c4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e000      	b.n	80067c4 <USB_HC_Halt+0x22a>
          break;
 80067c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3724      	adds	r7, #36	; 0x24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	04da      	lsls	r2, r3, #19
 80067f0:	4b15      	ldr	r3, [pc, #84]	; (8006848 <USB_DoPing+0x74>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006804:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800681c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006824:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	1ff80000 	.word	0x1ff80000

0800684c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f935 	bl	8005acc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006862:	2110      	movs	r1, #16
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff f98f 	bl	8005b88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff f9b0 	bl	8005bd0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e01f      	b.n	80068b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800688c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006894:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800689c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	461a      	mov	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	3301      	adds	r3, #1
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d9dc      	bls.n	8006876 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	e034      	b.n	800692c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3301      	adds	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006908:	d80c      	bhi.n	8006924 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006920:	d0ec      	beq.n	80068fc <USB_StopHost+0xb0>
 8006922:	e000      	b.n	8006926 <USB_StopHost+0xda>
        break;
 8006924:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	3301      	adds	r3, #1
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b0f      	cmp	r3, #15
 8006930:	d9c7      	bls.n	80068c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006938:	461a      	mov	r2, r3
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff f8ae 	bl	8005aaa <USB_EnableGlobalInt>

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006958:	b590      	push	{r4, r7, lr}
 800695a:	b089      	sub	sp, #36	; 0x24
 800695c:	af04      	add	r7, sp, #16
 800695e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006960:	2301      	movs	r3, #1
 8006962:	2202      	movs	r2, #2
 8006964:	2102      	movs	r1, #2
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc66 	bl	8007238 <USBH_FindInterface>
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2bff      	cmp	r3, #255	; 0xff
 8006974:	d002      	beq.n	800697c <USBH_CDC_InterfaceInit+0x24>
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d901      	bls.n	8006980 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800697c:	2302      	movs	r3, #2
 800697e:	e13d      	b.n	8006bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc3b 	bl	8007200 <USBH_SelectInterface>
 800698a:	4603      	mov	r3, r0
 800698c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006994:	2302      	movs	r3, #2
 8006996:	e131      	b.n	8006bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800699e:	2050      	movs	r0, #80	; 0x50
 80069a0:	f002 fa00 	bl	8008da4 <malloc>
 80069a4:	4603      	mov	r3, r0
 80069a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e11f      	b.n	8006bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069bc:	2250      	movs	r2, #80	; 0x50
 80069be:	2100      	movs	r1, #0
 80069c0:	68b8      	ldr	r0, [r7, #8]
 80069c2:	f002 f9ff 	bl	8008dc4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	211a      	movs	r1, #26
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	4413      	add	r3, r2
 80069d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	da15      	bge.n	8006a0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	211a      	movs	r1, #26
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	211a      	movs	r1, #26
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fe32 	bl	800867a <USBH_AllocPipe>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	7819      	ldrb	r1, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	7858      	ldrb	r0, [r3, #1]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	8952      	ldrh	r2, [r2, #10]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	4623      	mov	r3, r4
 8006a40:	4602      	mov	r2, r0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fdea 	bl	800861c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f002 f8f9 	bl	8008c48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a56:	2300      	movs	r3, #0
 8006a58:	2200      	movs	r2, #0
 8006a5a:	210a      	movs	r1, #10
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fbeb 	bl	8007238 <USBH_FindInterface>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2bff      	cmp	r3, #255	; 0xff
 8006a6a:	d002      	beq.n	8006a72 <USBH_CDC_InterfaceInit+0x11a>
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d901      	bls.n	8006a76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a72:	2302      	movs	r3, #2
 8006a74:	e0c2      	b.n	8006bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	211a      	movs	r1, #26
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da16      	bge.n	8006abc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	211a      	movs	r1, #26
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	211a      	movs	r1, #26
 8006aaa:	fb01 f303 	mul.w	r3, r1, r3
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ab4:	881a      	ldrh	r2, [r3, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	835a      	strh	r2, [r3, #26]
 8006aba:	e015      	b.n	8006ae8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	211a      	movs	r1, #26
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	211a      	movs	r1, #26
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	211a      	movs	r1, #26
 8006aee:	fb01 f303 	mul.w	r3, r1, r3
 8006af2:	4413      	add	r3, r2
 8006af4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da16      	bge.n	8006b2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	211a      	movs	r1, #26
 8006b06:	fb01 f303 	mul.w	r3, r1, r3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	211a      	movs	r1, #26
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	835a      	strh	r2, [r3, #26]
 8006b2c:	e015      	b.n	8006b5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	211a      	movs	r1, #26
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	211a      	movs	r1, #26
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b54:	881a      	ldrh	r2, [r3, #0]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	7b9b      	ldrb	r3, [r3, #14]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fd8a 	bl	800867a <USBH_AllocPipe>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	7bdb      	ldrb	r3, [r3, #15]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fd80 	bl	800867a <USBH_AllocPipe>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	7b59      	ldrb	r1, [r3, #13]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	7b98      	ldrb	r0, [r3, #14]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	8b12      	ldrh	r2, [r2, #24]
 8006b9a:	9202      	str	r2, [sp, #8]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	9201      	str	r2, [sp, #4]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4623      	mov	r3, r4
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fd38 	bl	800861c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	7b19      	ldrb	r1, [r3, #12]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	7bd8      	ldrb	r0, [r3, #15]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	8b52      	ldrh	r2, [r2, #26]
 8006bc4:	9202      	str	r2, [sp, #8]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	9201      	str	r2, [sp, #4]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	4623      	mov	r3, r4
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 fd23 	bl	800861c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	7b5b      	ldrb	r3, [r3, #13]
 8006be2:	2200      	movs	r2, #0
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f002 f82e 	bl	8008c48 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	7b1b      	ldrb	r3, [r3, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f002 f827 	bl	8008c48 <USBH_LL_SetToggle>

  return USBH_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd90      	pop	{r4, r7, pc}

08006c04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fd18 	bl	800865a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fd43 	bl	80086bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	7b1b      	ldrb	r3, [r3, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00e      	beq.n	8006c62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fd05 	bl	800865a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7b1b      	ldrb	r3, [r3, #12]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fd30 	bl	80086bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	7b5b      	ldrb	r3, [r3, #13]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	7b5b      	ldrb	r3, [r3, #13]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fcf2 	bl	800865a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	7b5b      	ldrb	r3, [r3, #13]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fd1d 	bl	80086bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f002 f889 	bl	8008db4 <free>
    phost->pActiveClass->pData = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3340      	adds	r3, #64	; 0x40
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8b1 	bl	8006e36 <GetLineCoding>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006cea:	7afb      	ldrb	r3, [r7, #11]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d877      	bhi.n	8006e08 <USBH_CDC_Process+0x114>
 8006d18:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <USBH_CDC_Process+0x2c>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d35 	.word	0x08006d35
 8006d24:	08006d3b 	.word	0x08006d3b
 8006d28:	08006d6b 	.word	0x08006d6b
 8006d2c:	08006ddf 	.word	0x08006ddf
 8006d30:	08006ded 	.word	0x08006ded
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73fb      	strb	r3, [r7, #15]
      break;
 8006d38:	e06d      	b.n	8006e16 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f897 	bl	8006e74 <SetLineCoding>
 8006d46:	4603      	mov	r3, r0
 8006d48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d58:	e058      	b.n	8006e0c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d055      	beq.n	8006e0c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2204      	movs	r2, #4
 8006d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d68:	e050      	b.n	8006e0c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3340      	adds	r3, #64	; 0x40
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f860 	bl	8006e36 <GetLineCoding>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d126      	bne.n	8006dce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d92:	791b      	ldrb	r3, [r3, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d13b      	bne.n	8006e10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d133      	bne.n	8006e10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d12b      	bne.n	8006e10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d124      	bne.n	8006e10 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f958 	bl	800707c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006dcc:	e020      	b.n	8006e10 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d01d      	beq.n	8006e10 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ddc:	e018      	b.n	8006e10 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f867 	bl	8006eb2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8da 	bl	8006f9e <CDC_ProcessReception>
      break;
 8006dea:	e014      	b.n	8006e16 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 ffe3 	bl	8007dba <USBH_ClrFeature>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e06:	e005      	b.n	8006e14 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e08:	bf00      	nop
 8006e0a:	e004      	b.n	8006e16 <USBH_CDC_Process+0x122>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <USBH_CDC_Process+0x122>
      break;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <USBH_CDC_Process+0x122>
      break;
 8006e14:	bf00      	nop

  }

  return status;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	22a1      	movs	r2, #161	; 0xa1
 8006e44:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2221      	movs	r2, #33	; 0x21
 8006e4a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2207      	movs	r2, #7
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f988 	bl	800817a <USBH_CtlReq>
 8006e6a:	4603      	mov	r3, r0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2221      	movs	r2, #33	; 0x21
 8006e82:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2207      	movs	r2, #7
 8006e9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f969 	bl	800817a <USBH_CtlReq>
 8006ea8:	4603      	mov	r3, r0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af02      	add	r7, sp, #8
 8006eb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d002      	beq.n	8006ed8 <CDC_ProcessTransmission+0x26>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d023      	beq.n	8006f1e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ed6:	e05e      	b.n	8006f96 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	8b12      	ldrh	r2, [r2, #24]
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d90b      	bls.n	8006efc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8b1a      	ldrh	r2, [r3, #24]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	7b5b      	ldrb	r3, [r3, #13]
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	9000      	str	r0, [sp, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fb4e 	bl	8008596 <USBH_BulkSendData>
 8006efa:	e00b      	b.n	8006f14 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	7b5b      	ldrb	r3, [r3, #13]
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	9000      	str	r0, [sp, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fb41 	bl	8008596 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f1c:	e03b      	b.n	8006f96 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	7b5b      	ldrb	r3, [r3, #13]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fe65 	bl	8008bf4 <USBH_LL_GetURBState>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d128      	bne.n	8006f86 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	8b12      	ldrh	r2, [r2, #24]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d90e      	bls.n	8006f5e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	8b12      	ldrh	r2, [r2, #24]
 8006f48:	1a9a      	subs	r2, r3, r2
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	8b12      	ldrh	r2, [r2, #24]
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	61da      	str	r2, [r3, #28]
 8006f5c:	e002      	b.n	8006f64 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f74:	e00e      	b.n	8006f94 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f868 	bl	8007054 <USBH_CDC_TransmitCallback>
      break;
 8006f84:	e006      	b.n	8006f94 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d103      	bne.n	8006f94 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f94:	bf00      	nop
  }
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d002      	beq.n	8006fc4 <CDC_ProcessReception+0x26>
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d00e      	beq.n	8006fe0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fc2:	e043      	b.n	800704c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	6a19      	ldr	r1, [r3, #32]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	8b5a      	ldrh	r2, [r3, #26]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	7b1b      	ldrb	r3, [r3, #12]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fb05 	bl	80085e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006fde:	e035      	b.n	800704c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	7b1b      	ldrb	r3, [r3, #12]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fe04 	bl	8008bf4 <USBH_LL_GetURBState>
 8006fec:	4603      	mov	r3, r0
 8006fee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ff0:	7cfb      	ldrb	r3, [r7, #19]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d129      	bne.n	800704a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	7b1b      	ldrb	r3, [r3, #12]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fd67 	bl	8008ad0 <USBH_LL_GetLastXferSize>
 8007002:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	429a      	cmp	r2, r3
 800700c:	d016      	beq.n	800703c <CDC_ProcessReception+0x9e>
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	8b5b      	ldrh	r3, [r3, #26]
 8007012:	461a      	mov	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4293      	cmp	r3, r2
 8007018:	d910      	bls.n	800703c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6a1a      	ldr	r2, [r3, #32]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	441a      	add	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2203      	movs	r2, #3
 8007036:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800703a:	e006      	b.n	800704a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f80f 	bl	8007068 <USBH_CDC_ReceiveCallback>
      break;
 800704a:	bf00      	nop
  }
}
 800704c:	bf00      	nop
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070a4:	2302      	movs	r3, #2
 80070a6:	e029      	b.n	80070fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	79fa      	ldrb	r2, [r7, #7]
 80070ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f81f 	bl	8007104 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f001 fc37 	bl	8008968 <USBH_LL_Init>

  return USBH_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e009      	b.n	800712a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	33e0      	adds	r3, #224	; 0xe0
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b0e      	cmp	r3, #14
 800712e:	d9f2      	bls.n	8007116 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e009      	b.n	800714a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d3f1      	bcc.n	8007136 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d016      	beq.n	80071ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10e      	bne.n	80071e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071d0:	1c59      	adds	r1, r3, #1
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	33de      	adds	r3, #222	; 0xde
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
 80071e6:	e004      	b.n	80071f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071e8:	2302      	movs	r3, #2
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e001      	b.n	80071f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071ee:	2302      	movs	r3, #2
 80071f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	429a      	cmp	r2, r3
 800721a:	d204      	bcs.n	8007226 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007224:	e001      	b.n	800722a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007226:	2302      	movs	r3, #2
 8007228:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	4608      	mov	r0, r1
 8007242:	4611      	mov	r1, r2
 8007244:	461a      	mov	r2, r3
 8007246:	4603      	mov	r3, r0
 8007248:	70fb      	strb	r3, [r7, #3]
 800724a:	460b      	mov	r3, r1
 800724c:	70bb      	strb	r3, [r7, #2]
 800724e:	4613      	mov	r3, r2
 8007250:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007260:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007262:	e025      	b.n	80072b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	221a      	movs	r2, #26
 8007268:	fb02 f303 	mul.w	r3, r2, r3
 800726c:	3308      	adds	r3, #8
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	3302      	adds	r3, #2
 8007274:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	795b      	ldrb	r3, [r3, #5]
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	429a      	cmp	r2, r3
 800727e:	d002      	beq.n	8007286 <USBH_FindInterface+0x4e>
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	2bff      	cmp	r3, #255	; 0xff
 8007284:	d111      	bne.n	80072aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800728a:	78ba      	ldrb	r2, [r7, #2]
 800728c:	429a      	cmp	r2, r3
 800728e:	d002      	beq.n	8007296 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007290:	78bb      	ldrb	r3, [r7, #2]
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d109      	bne.n	80072aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800729a:	787a      	ldrb	r2, [r7, #1]
 800729c:	429a      	cmp	r2, r3
 800729e:	d002      	beq.n	80072a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072a0:	787b      	ldrb	r3, [r7, #1]
 80072a2:	2bff      	cmp	r3, #255	; 0xff
 80072a4:	d101      	bne.n	80072aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	e006      	b.n	80072b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	3301      	adds	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d9d6      	bls.n	8007264 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072b6:	23ff      	movs	r3, #255	; 0xff
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fb87 	bl	80089e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80072d2:	2101      	movs	r1, #1
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fca0 	bl	8008c1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af04      	add	r7, sp, #16
 80072ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072ec:	2302      	movs	r3, #2
 80072ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d102      	bne.n	8007306 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2203      	movs	r2, #3
 8007304:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b0b      	cmp	r3, #11
 800730e:	f200 81b3 	bhi.w	8007678 <USBH_Process+0x394>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <USBH_Process+0x34>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007349 	.word	0x08007349
 800731c:	0800737b 	.word	0x0800737b
 8007320:	080073e3 	.word	0x080073e3
 8007324:	08007613 	.word	0x08007613
 8007328:	08007679 	.word	0x08007679
 800732c:	08007487 	.word	0x08007487
 8007330:	080075b9 	.word	0x080075b9
 8007334:	080074bd 	.word	0x080074bd
 8007338:	080074dd 	.word	0x080074dd
 800733c:	080074fd 	.word	0x080074fd
 8007340:	0800752b 	.word	0x0800752b
 8007344:	080075fb 	.word	0x080075fb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8193 	beq.w	800767c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800735c:	20c8      	movs	r0, #200	; 0xc8
 800735e:	f001 fca3 	bl	8008ca8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fb99 	bl	8008a9a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007378:	e180      	b.n	800767c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007380:	2b01      	cmp	r3, #1
 8007382:	d107      	bne.n	8007394 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007392:	e182      	b.n	800769a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800739a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739e:	d914      	bls.n	80073ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073a6:	3301      	adds	r3, #1
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d903      	bls.n	80073c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220d      	movs	r2, #13
 80073be:	701a      	strb	r2, [r3, #0]
      break;
 80073c0:	e16b      	b.n	800769a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
      break;
 80073c8:	e167      	b.n	800769a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073d0:	f103 020a 	add.w	r2, r3, #10
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073da:	200a      	movs	r0, #10
 80073dc:	f001 fc64 	bl	8008ca8 <USBH_Delay>
      break;
 80073e0:	e15b      	b.n	800769a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073f2:	2104      	movs	r1, #4
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80073f8:	2064      	movs	r0, #100	; 0x64
 80073fa:	f001 fc55 	bl	8008ca8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fb24 	bl	8008a4c <USBH_LL_GetSpeed>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2205      	movs	r2, #5
 8007412:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007414:	2100      	movs	r1, #0
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 f92f 	bl	800867a <USBH_AllocPipe>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007424:	2180      	movs	r1, #128	; 0x80
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f927 	bl	800867a <USBH_AllocPipe>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7919      	ldrb	r1, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007448:	b292      	uxth	r2, r2
 800744a:	9202      	str	r2, [sp, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	9201      	str	r2, [sp, #4]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	4603      	mov	r3, r0
 8007454:	2280      	movs	r2, #128	; 0x80
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 f8e0 	bl	800861c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7959      	ldrb	r1, [r3, #5]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007470:	b292      	uxth	r2, r2
 8007472:	9202      	str	r2, [sp, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	9201      	str	r2, [sp, #4]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4603      	mov	r3, r0
 800747c:	2200      	movs	r2, #0
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 f8cc 	bl	800861c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007484:	e109      	b.n	800769a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f90c 	bl	80076a4 <USBH_HandleEnum>
 800748c:	4603      	mov	r3, r0
 800748e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	f040 80f3 	bne.w	8007680 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d103      	bne.n	80074b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2208      	movs	r2, #8
 80074b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074b2:	e0e5      	b.n	8007680 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2207      	movs	r2, #7
 80074b8:	701a      	strb	r2, [r3, #0]
      break;
 80074ba:	e0e1      	b.n	8007680 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80de 	beq.w	8007684 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ce:	2101      	movs	r1, #1
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2208      	movs	r2, #8
 80074d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80074da:	e0d3      	b.n	8007684 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fc20 	bl	8007d2c <USBH_SetCfg>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 80ca 	bne.w	8007688 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2209      	movs	r2, #9
 80074f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074fa:	e0c5      	b.n	8007688 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800750a:	2101      	movs	r1, #1
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc30 	bl	8007d72 <USBH_SetFeature>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	f040 80b9 	bne.w	800768c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	220a      	movs	r2, #10
 800751e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007520:	e0b4      	b.n	800768c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	220a      	movs	r2, #10
 8007526:	701a      	strb	r2, [r3, #0]
      break;
 8007528:	e0b0      	b.n	800768c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80ad 	beq.w	8007690 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
 8007542:	e016      	b.n	8007572 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007544:	7bfa      	ldrb	r2, [r7, #15]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	32de      	adds	r2, #222	; 0xde
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	791a      	ldrb	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007556:	429a      	cmp	r2, r3
 8007558:	d108      	bne.n	800756c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800755a:	7bfa      	ldrb	r2, [r7, #15]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	32de      	adds	r2, #222	; 0xde
 8007560:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800756a:	e005      	b.n	8007578 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	3301      	adds	r3, #1
 8007570:	73fb      	strb	r3, [r7, #15]
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0e5      	beq.n	8007544 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d016      	beq.n	80075b0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2206      	movs	r2, #6
 8007598:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a0:	2103      	movs	r1, #3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075a6:	e073      	b.n	8007690 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	220d      	movs	r2, #13
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e06f      	b.n	8007690 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	220d      	movs	r2, #13
 80075b4:	701a      	strb	r2, [r3, #0]
      break;
 80075b6:	e06b      	b.n	8007690 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d017      	beq.n	80075f2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	220b      	movs	r2, #11
 80075de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075e0:	e058      	b.n	8007694 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d154      	bne.n	8007694 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220d      	movs	r2, #13
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	e050      	b.n	8007694 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	220d      	movs	r2, #13
 80075f6:	701a      	strb	r2, [r3, #0]
      break;
 80075f8:	e04c      	b.n	8007694 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d049      	beq.n	8007698 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
      }
      break;
 8007610:	e042      	b.n	8007698 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fd72 	bl	8007104 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800764e:	2105      	movs	r1, #5
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b01      	cmp	r3, #1
 800765e:	d107      	bne.n	8007670 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fe2b 	bl	80072c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800766e:	e014      	b.n	800769a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 f9b5 	bl	80089e0 <USBH_LL_Start>
      break;
 8007676:	e010      	b.n	800769a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007678:	bf00      	nop
 800767a:	e00e      	b.n	800769a <USBH_Process+0x3b6>
      break;
 800767c:	bf00      	nop
 800767e:	e00c      	b.n	800769a <USBH_Process+0x3b6>
      break;
 8007680:	bf00      	nop
 8007682:	e00a      	b.n	800769a <USBH_Process+0x3b6>
    break;
 8007684:	bf00      	nop
 8007686:	e008      	b.n	800769a <USBH_Process+0x3b6>
      break;
 8007688:	bf00      	nop
 800768a:	e006      	b.n	800769a <USBH_Process+0x3b6>
      break;
 800768c:	bf00      	nop
 800768e:	e004      	b.n	800769a <USBH_Process+0x3b6>
      break;
 8007690:	bf00      	nop
 8007692:	e002      	b.n	800769a <USBH_Process+0x3b6>
      break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <USBH_Process+0x3b6>
      break;
 8007698:	bf00      	nop
  }
  return USBH_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af04      	add	r7, sp, #16
 80076aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b07      	cmp	r3, #7
 80076ba:	f200 81c1 	bhi.w	8007a40 <USBH_HandleEnum+0x39c>
 80076be:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <USBH_HandleEnum+0x20>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076e5 	.word	0x080076e5
 80076c8:	080077a3 	.word	0x080077a3
 80076cc:	0800780d 	.word	0x0800780d
 80076d0:	0800789b 	.word	0x0800789b
 80076d4:	08007905 	.word	0x08007905
 80076d8:	08007975 	.word	0x08007975
 80076dc:	080079bb 	.word	0x080079bb
 80076e0:	08007a01 	.word	0x08007a01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80076e4:	2108      	movs	r1, #8
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa50 	bl	8007b8c <USBH_Get_DevDesc>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d130      	bne.n	8007758 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7919      	ldrb	r1, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800771a:	b292      	uxth	r2, r2
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	2200      	movs	r2, #0
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	2280      	movs	r2, #128	; 0x80
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ff77 	bl	800861c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7959      	ldrb	r1, [r3, #5]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007742:	b292      	uxth	r2, r2
 8007744:	9202      	str	r2, [sp, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4603      	mov	r3, r0
 800774e:	2200      	movs	r2, #0
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 ff63 	bl	800861c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007756:	e175      	b.n	8007a44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b03      	cmp	r3, #3
 800775c:	f040 8172 	bne.w	8007a44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007766:	3301      	adds	r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007776:	2b03      	cmp	r3, #3
 8007778:	d903      	bls.n	8007782 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	220d      	movs	r2, #13
 800777e:	701a      	strb	r2, [r3, #0]
      break;
 8007780:	e160      	b.n	8007a44 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	795b      	ldrb	r3, [r3, #5]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 ff97 	bl	80086bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 ff91 	bl	80086bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
      break;
 80077a0:	e150      	b.n	8007a44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077a2:	2112      	movs	r1, #18
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9f1 	bl	8007b8c <USBH_Get_DevDesc>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d103      	bne.n	80077bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077ba:	e145      	b.n	8007a48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	f040 8142 	bne.w	8007a48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ca:	3301      	adds	r3, #1
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d903      	bls.n	80077e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220d      	movs	r2, #13
 80077e2:	701a      	strb	r2, [r3, #0]
      break;
 80077e4:	e130      	b.n	8007a48 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	795b      	ldrb	r3, [r3, #5]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 ff65 	bl	80086bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	791b      	ldrb	r3, [r3, #4]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 ff5f 	bl	80086bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e11d      	b.n	8007a48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800780c:	2101      	movs	r1, #1
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa68 	bl	8007ce4 <USBH_SetAddress>
 8007814:	4603      	mov	r3, r0
 8007816:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d132      	bne.n	8007884 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800781e:	2002      	movs	r0, #2
 8007820:	f001 fa42 	bl	8008ca8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2203      	movs	r2, #3
 8007830:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7919      	ldrb	r1, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007846:	b292      	uxth	r2, r2
 8007848:	9202      	str	r2, [sp, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	9201      	str	r2, [sp, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4603      	mov	r3, r0
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fee1 	bl	800861c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7959      	ldrb	r1, [r3, #5]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800786e:	b292      	uxth	r2, r2
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4603      	mov	r3, r0
 800787a:	2200      	movs	r2, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fecd 	bl	800861c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007882:	e0e3      	b.n	8007a4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b03      	cmp	r3, #3
 8007888:	f040 80e0 	bne.w	8007a4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	220d      	movs	r2, #13
 8007890:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	705a      	strb	r2, [r3, #1]
      break;
 8007898:	e0d8      	b.n	8007a4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800789a:	2109      	movs	r1, #9
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f99d 	bl	8007bdc <USBH_Get_CfgDesc>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2204      	movs	r2, #4
 80078b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078b2:	e0cd      	b.n	8007a50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	f040 80ca 	bne.w	8007a50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078c2:	3301      	adds	r3, #1
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d903      	bls.n	80078de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	220d      	movs	r2, #13
 80078da:	701a      	strb	r2, [r3, #0]
      break;
 80078dc:	e0b8      	b.n	8007a50 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	795b      	ldrb	r3, [r3, #5]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fee9 	bl	80086bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	791b      	ldrb	r3, [r3, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fee3 	bl	80086bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
      break;
 8007902:	e0a5      	b.n	8007a50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f965 	bl	8007bdc <USBH_Get_CfgDesc>
 8007912:	4603      	mov	r3, r0
 8007914:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2205      	movs	r2, #5
 8007920:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007922:	e097      	b.n	8007a54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b03      	cmp	r3, #3
 8007928:	f040 8094 	bne.w	8007a54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007932:	3301      	adds	r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007942:	2b03      	cmp	r3, #3
 8007944:	d903      	bls.n	800794e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220d      	movs	r2, #13
 800794a:	701a      	strb	r2, [r3, #0]
      break;
 800794c:	e082      	b.n	8007a54 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 feb1 	bl	80086bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	791b      	ldrb	r3, [r3, #4]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 feab 	bl	80086bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
      break;
 8007972:	e06f      	b.n	8007a54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800797a:	2b00      	cmp	r3, #0
 800797c:	d019      	beq.n	80079b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800798a:	23ff      	movs	r3, #255	; 0xff
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f949 	bl	8007c24 <USBH_Get_StringDesc>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d103      	bne.n	80079a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2206      	movs	r2, #6
 80079a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079a2:	e059      	b.n	8007a58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d156      	bne.n	8007a58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2206      	movs	r2, #6
 80079ae:	705a      	strb	r2, [r3, #1]
      break;
 80079b0:	e052      	b.n	8007a58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2206      	movs	r2, #6
 80079b6:	705a      	strb	r2, [r3, #1]
      break;
 80079b8:	e04e      	b.n	8007a58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d019      	beq.n	80079f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079d0:	23ff      	movs	r3, #255	; 0xff
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f926 	bl	8007c24 <USBH_Get_StringDesc>
 80079d8:	4603      	mov	r3, r0
 80079da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2207      	movs	r2, #7
 80079e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079e8:	e038      	b.n	8007a5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d135      	bne.n	8007a5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2207      	movs	r2, #7
 80079f4:	705a      	strb	r2, [r3, #1]
      break;
 80079f6:	e031      	b.n	8007a5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2207      	movs	r2, #7
 80079fc:	705a      	strb	r2, [r3, #1]
      break;
 80079fe:	e02d      	b.n	8007a5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d017      	beq.n	8007a3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a16:	23ff      	movs	r3, #255	; 0xff
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f903 	bl	8007c24 <USBH_Get_StringDesc>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a2c:	e018      	b.n	8007a60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d115      	bne.n	8007a60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
      break;
 8007a38:	e012      	b.n	8007a60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3e:	e00f      	b.n	8007a60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a40:	bf00      	nop
 8007a42:	e00e      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a44:	bf00      	nop
 8007a46:	e00c      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e00a      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e008      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a50:	bf00      	nop
 8007a52:	e006      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a54:	bf00      	nop
 8007a56:	e004      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e002      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e000      	b.n	8007a62 <USBH_HandleEnum+0x3be>
      break;
 8007a60:	bf00      	nop
  }
  return Status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f804 	bl	8007aae <USBH_HandleSof>
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b0b      	cmp	r3, #11
 8007abe:	d10a      	bne.n	8007ad6 <USBH_HandleSof+0x28>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
  }
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007aee:	bf00      	nop
}
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b0a:	bf00      	nop
}
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 ff56 	bl	8008a16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	791b      	ldrb	r3, [r3, #4]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fda3 	bl	80086bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	795b      	ldrb	r3, [r3, #5]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fd9d 	bl	80086bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f864 	bl	8007c7a <USBH_GetDescriptor>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f000 f918 	bl	8007e02 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	331c      	adds	r3, #28
 8007bec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007bee:	887b      	ldrh	r3, [r7, #2]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f83d 	bl	8007c7a <USBH_GetDescriptor>
 8007c00:	4603      	mov	r3, r0
 8007c02:	72fb      	strb	r3, [r7, #11]
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c10:	887a      	ldrh	r2, [r7, #2]
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 f964 	bl	8007ee2 <USBH_ParseCfgDesc>
  }

  return status;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	607a      	str	r2, [r7, #4]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	460b      	mov	r3, r1
 8007c32:	72fb      	strb	r3, [r7, #11]
 8007c34:	4613      	mov	r3, r2
 8007c36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c40:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c48:	893b      	ldrh	r3, [r7, #8]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	2100      	movs	r1, #0
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f812 	bl	8007c7a <USBH_GetDescriptor>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d107      	bne.n	8007c70 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c66:	893a      	ldrh	r2, [r7, #8]
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fa37 	bl	80080de <USBH_ParseStringDesc>
  }

  return status;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	607b      	str	r3, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	789b      	ldrb	r3, [r3, #2]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d11c      	bne.n	8007cce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c94:	7afb      	ldrb	r3, [r7, #11]
 8007c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2206      	movs	r2, #6
 8007ca4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	893a      	ldrh	r2, [r7, #8]
 8007caa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cac:	893b      	ldrh	r3, [r7, #8]
 8007cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb6:	d104      	bne.n	8007cc2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f240 4209 	movw	r2, #1033	; 0x409
 8007cbe:	829a      	strh	r2, [r3, #20]
 8007cc0:	e002      	b.n	8007cc8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8b3a      	ldrh	r2, [r7, #24]
 8007ccc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cce:	8b3b      	ldrh	r3, [r7, #24]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fa50 	bl	800817a <USBH_CtlReq>
 8007cda:	4603      	mov	r3, r0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	789b      	ldrb	r3, [r3, #2]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10f      	bne.n	8007d18 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2205      	movs	r2, #5
 8007d02:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa2c 	bl	800817a <USBH_CtlReq>
 8007d22:	4603      	mov	r3, r0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	789b      	ldrb	r3, [r3, #2]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10e      	bne.n	8007d5e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2209      	movs	r2, #9
 8007d4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	887a      	ldrh	r2, [r7, #2]
 8007d50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2100      	movs	r1, #0
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa09 	bl	800817a <USBH_CtlReq>
 8007d68:	4603      	mov	r3, r0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	789b      	ldrb	r3, [r3, #2]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d10f      	bne.n	8007da6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9e5 	bl	800817a <USBH_CtlReq>
 8007db0:	4603      	mov	r3, r0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	789b      	ldrb	r3, [r3, #2]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10f      	bne.n	8007dee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f9c1 	bl	800817a <USBH_CtlReq>
 8007df8:	4603      	mov	r3, r0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785a      	ldrb	r2, [r3, #1]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3302      	adds	r3, #2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	791a      	ldrb	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	795a      	ldrb	r2, [r3, #5]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	799a      	ldrb	r2, [r3, #6]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	79da      	ldrb	r2, [r3, #7]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d939      	bls.n	8007ed6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3308      	adds	r3, #8
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	3309      	adds	r3, #9
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	4313      	orrs	r3, r2
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	330a      	adds	r3, #10
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	330b      	adds	r3, #11
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	4313      	orrs	r3, r2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	330d      	adds	r3, #13
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	7b9a      	ldrb	r2, [r3, #14]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	7bda      	ldrb	r2, [r3, #15]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	7c1a      	ldrb	r2, [r3, #16]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	7c5a      	ldrb	r2, [r3, #17]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	745a      	strb	r2, [r3, #17]
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b08a      	sub	sp, #40	; 0x28
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	4613      	mov	r3, r2
 8007eee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	785a      	ldrb	r2, [r3, #1]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	3302      	adds	r3, #2
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	3303      	adds	r3, #3
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	791a      	ldrb	r2, [r3, #4]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	795a      	ldrb	r2, [r3, #5]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	799a      	ldrb	r2, [r3, #6]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	79da      	ldrb	r2, [r3, #7]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	7a1a      	ldrb	r2, [r3, #8]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f58:	88fb      	ldrh	r3, [r7, #6]
 8007f5a:	2b09      	cmp	r3, #9
 8007f5c:	d95f      	bls.n	800801e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f5e:	2309      	movs	r3, #9
 8007f60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f66:	e051      	b.n	800800c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f68:	f107 0316 	add.w	r3, r7, #22
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f70:	f000 f8e8 	bl	8008144 <USBH_GetNextDesc>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d146      	bne.n	800800c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f82:	221a      	movs	r2, #26
 8007f84:	fb02 f303 	mul.w	r3, r2, r3
 8007f88:	3308      	adds	r3, #8
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3302      	adds	r3, #2
 8007f90:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f94:	69f8      	ldr	r0, [r7, #28]
 8007f96:	f000 f846 	bl	8008026 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fa4:	e022      	b.n	8007fec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fa6:	f107 0316 	add.w	r3, r7, #22
 8007faa:	4619      	mov	r1, r3
 8007fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fae:	f000 f8c9 	bl	8008144 <USBH_GetNextDesc>
 8007fb2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d117      	bne.n	8007fec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fc0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fc4:	3201      	adds	r2, #1
 8007fc6:	00d2      	lsls	r2, r2, #3
 8007fc8:	211a      	movs	r1, #26
 8007fca:	fb01 f303 	mul.w	r3, r1, r3
 8007fce:	4413      	add	r3, r2
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fdc:	69b8      	ldr	r0, [r7, #24]
 8007fde:	f000 f851 	bl	8008084 <USBH_ParseEPDesc>
            ep_ix++;
 8007fe2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	791b      	ldrb	r3, [r3, #4]
 8007ff0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d204      	bcs.n	8008002 <USBH_ParseCfgDesc+0x120>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	885a      	ldrh	r2, [r3, #2]
 8007ffc:	8afb      	ldrh	r3, [r7, #22]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d8d1      	bhi.n	8007fa6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008006:	3301      	adds	r3, #1
 8008008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800800c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008010:	2b01      	cmp	r3, #1
 8008012:	d804      	bhi.n	800801e <USBH_ParseCfgDesc+0x13c>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	885a      	ldrh	r2, [r3, #2]
 8008018:	8afb      	ldrh	r3, [r7, #22]
 800801a:	429a      	cmp	r2, r3
 800801c:	d8a4      	bhi.n	8007f68 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800801e:	bf00      	nop
 8008020:	3728      	adds	r7, #40	; 0x28
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	785a      	ldrb	r2, [r3, #1]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	789a      	ldrb	r2, [r3, #2]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	78da      	ldrb	r2, [r3, #3]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	791a      	ldrb	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	795a      	ldrb	r2, [r3, #5]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	799a      	ldrb	r2, [r3, #6]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	79da      	ldrb	r2, [r3, #7]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	7a1a      	ldrb	r2, [r3, #8]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	721a      	strb	r2, [r3, #8]
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	785a      	ldrb	r2, [r3, #1]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	789a      	ldrb	r2, [r3, #2]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	78da      	ldrb	r2, [r3, #3]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	3304      	adds	r3, #4
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	3305      	adds	r3, #5
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	4313      	orrs	r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	799a      	ldrb	r2, [r3, #6]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	719a      	strb	r2, [r3, #6]
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3301      	adds	r3, #1
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d120      	bne.n	8008138 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	1e9a      	subs	r2, r3, #2
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	4293      	cmp	r3, r2
 8008100:	bf28      	it	cs
 8008102:	4613      	movcs	r3, r2
 8008104:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3302      	adds	r3, #2
 800810a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800810c:	2300      	movs	r3, #0
 800810e:	82fb      	strh	r3, [r7, #22]
 8008110:	e00b      	b.n	800812a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008112:	8afb      	ldrh	r3, [r7, #22]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	3301      	adds	r3, #1
 8008122:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008124:	8afb      	ldrh	r3, [r7, #22]
 8008126:	3302      	adds	r3, #2
 8008128:	82fb      	strh	r3, [r7, #22]
 800812a:	8afa      	ldrh	r2, [r7, #22]
 800812c:	8abb      	ldrh	r3, [r7, #20]
 800812e:	429a      	cmp	r2, r3
 8008130:	d3ef      	bcc.n	8008112 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	701a      	strb	r2, [r3, #0]
  }
}
 8008138:	bf00      	nop
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	881a      	ldrh	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	4413      	add	r3, r2
 800815a:	b29a      	uxth	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800816c:	68fb      	ldr	r3, [r7, #12]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	4613      	mov	r3, r2
 8008186:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	789b      	ldrb	r3, [r3, #2]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d002      	beq.n	800819a <USBH_CtlReq+0x20>
 8008194:	2b02      	cmp	r3, #2
 8008196:	d00f      	beq.n	80081b8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008198:	e027      	b.n	80081ea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2202      	movs	r2, #2
 80081b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081b2:	2301      	movs	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
      break;
 80081b6:	e018      	b.n	80081ea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f81b 	bl	80081f4 <USBH_HandleControl>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <USBH_CtlReq+0x54>
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d106      	bne.n	80081dc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	761a      	strb	r2, [r3, #24]
      break;
 80081da:	e005      	b.n	80081e8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d102      	bne.n	80081e8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	709a      	strb	r2, [r3, #2]
      break;
 80081e8:	bf00      	nop
  }
  return status;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008200:	2300      	movs	r3, #0
 8008202:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7e1b      	ldrb	r3, [r3, #24]
 8008208:	3b01      	subs	r3, #1
 800820a:	2b0a      	cmp	r3, #10
 800820c:	f200 8156 	bhi.w	80084bc <USBH_HandleControl+0x2c8>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBH_HandleControl+0x24>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008245 	.word	0x08008245
 800821c:	0800825f 	.word	0x0800825f
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082ef 	.word	0x080082ef
 8008228:	08008327 	.word	0x08008327
 800822c:	08008351 	.word	0x08008351
 8008230:	080083a3 	.word	0x080083a3
 8008234:	080083c5 	.word	0x080083c5
 8008238:	08008401 	.word	0x08008401
 800823c:	08008427 	.word	0x08008427
 8008240:	08008465 	.word	0x08008465
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f103 0110 	add.w	r1, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	795b      	ldrb	r3, [r3, #5]
 800824e:	461a      	mov	r2, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f943 	bl	80084dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2202      	movs	r2, #2
 800825a:	761a      	strb	r2, [r3, #24]
      break;
 800825c:	e139      	b.n	80084d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	795b      	ldrb	r3, [r3, #5]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fcc5 	bl	8008bf4 <USBH_LL_GetURBState>
 800826a:	4603      	mov	r3, r0
 800826c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d11e      	bne.n	80082b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7c1b      	ldrb	r3, [r3, #16]
 8008278:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800827c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8adb      	ldrh	r3, [r3, #22]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008286:	7b7b      	ldrb	r3, [r7, #13]
 8008288:	2b80      	cmp	r3, #128	; 0x80
 800828a:	d103      	bne.n	8008294 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2203      	movs	r2, #3
 8008290:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008292:	e115      	b.n	80084c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2205      	movs	r2, #5
 8008298:	761a      	strb	r2, [r3, #24]
      break;
 800829a:	e111      	b.n	80084c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800829c:	7b7b      	ldrb	r3, [r7, #13]
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d103      	bne.n	80082aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2209      	movs	r2, #9
 80082a6:	761a      	strb	r2, [r3, #24]
      break;
 80082a8:	e10a      	b.n	80084c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2207      	movs	r2, #7
 80082ae:	761a      	strb	r2, [r3, #24]
      break;
 80082b0:	e106      	b.n	80084c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d003      	beq.n	80082c0 <USBH_HandleControl+0xcc>
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	f040 8100 	bne.w	80084c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	220b      	movs	r2, #11
 80082c4:	761a      	strb	r2, [r3, #24]
      break;
 80082c6:	e0fb      	b.n	80084c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6899      	ldr	r1, [r3, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	899a      	ldrh	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	791b      	ldrb	r3, [r3, #4]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f93a 	bl	800855a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2204      	movs	r2, #4
 80082ea:	761a      	strb	r2, [r3, #24]
      break;
 80082ec:	e0f1      	b.n	80084d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	791b      	ldrb	r3, [r3, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fc7d 	bl	8008bf4 <USBH_LL_GetURBState>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d102      	bne.n	800830a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2209      	movs	r2, #9
 8008308:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b05      	cmp	r3, #5
 800830e:	d102      	bne.n	8008316 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008310:	2303      	movs	r3, #3
 8008312:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008314:	e0d6      	b.n	80084c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b04      	cmp	r3, #4
 800831a:	f040 80d3 	bne.w	80084c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	220b      	movs	r2, #11
 8008322:	761a      	strb	r2, [r3, #24]
      break;
 8008324:	e0ce      	b.n	80084c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6899      	ldr	r1, [r3, #8]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	899a      	ldrh	r2, [r3, #12]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	795b      	ldrb	r3, [r3, #5]
 8008332:	2001      	movs	r0, #1
 8008334:	9000      	str	r0, [sp, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f8ea 	bl	8008510 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008342:	b29a      	uxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2206      	movs	r2, #6
 800834c:	761a      	strb	r2, [r3, #24]
      break;
 800834e:	e0c0      	b.n	80084d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	795b      	ldrb	r3, [r3, #5]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fc4c 	bl	8008bf4 <USBH_LL_GetURBState>
 800835c:	4603      	mov	r3, r0
 800835e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d103      	bne.n	800836e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2207      	movs	r2, #7
 800836a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800836c:	e0ac      	b.n	80084c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d105      	bne.n	8008380 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	220c      	movs	r2, #12
 8008378:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800837a:	2303      	movs	r3, #3
 800837c:	73fb      	strb	r3, [r7, #15]
      break;
 800837e:	e0a3      	b.n	80084c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d103      	bne.n	800838e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2205      	movs	r2, #5
 800838a:	761a      	strb	r2, [r3, #24]
      break;
 800838c:	e09c      	b.n	80084c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b04      	cmp	r3, #4
 8008392:	f040 8099 	bne.w	80084c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	220b      	movs	r2, #11
 800839a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800839c:	2302      	movs	r3, #2
 800839e:	73fb      	strb	r3, [r7, #15]
      break;
 80083a0:	e092      	b.n	80084c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	791b      	ldrb	r3, [r3, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	2100      	movs	r1, #0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8d5 	bl	800855a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2208      	movs	r2, #8
 80083c0:	761a      	strb	r2, [r3, #24]

      break;
 80083c2:	e086      	b.n	80084d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	791b      	ldrb	r3, [r3, #4]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fc12 	bl	8008bf4 <USBH_LL_GetURBState>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d105      	bne.n	80083e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	220d      	movs	r2, #13
 80083de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083e4:	e072      	b.n	80084cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d103      	bne.n	80083f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	220b      	movs	r2, #11
 80083f0:	761a      	strb	r2, [r3, #24]
      break;
 80083f2:	e06b      	b.n	80084cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d168      	bne.n	80084cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083fa:	2303      	movs	r3, #3
 80083fc:	73fb      	strb	r3, [r7, #15]
      break;
 80083fe:	e065      	b.n	80084cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	795b      	ldrb	r3, [r3, #5]
 8008404:	2201      	movs	r2, #1
 8008406:	9200      	str	r2, [sp, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	2100      	movs	r1, #0
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f87f 	bl	8008510 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	220a      	movs	r2, #10
 8008422:	761a      	strb	r2, [r3, #24]
      break;
 8008424:	e055      	b.n	80084d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	795b      	ldrb	r3, [r3, #5]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fbe1 	bl	8008bf4 <USBH_LL_GetURBState>
 8008432:	4603      	mov	r3, r0
 8008434:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d105      	bne.n	8008448 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	220d      	movs	r2, #13
 8008444:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008446:	e043      	b.n	80084d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d103      	bne.n	8008456 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2209      	movs	r2, #9
 8008452:	761a      	strb	r2, [r3, #24]
      break;
 8008454:	e03c      	b.n	80084d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b04      	cmp	r3, #4
 800845a:	d139      	bne.n	80084d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	220b      	movs	r2, #11
 8008460:	761a      	strb	r2, [r3, #24]
      break;
 8008462:	e035      	b.n	80084d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7e5b      	ldrb	r3, [r3, #25]
 8008468:	3301      	adds	r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	765a      	strb	r2, [r3, #25]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7e5b      	ldrb	r3, [r3, #25]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d806      	bhi.n	8008486 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008484:	e025      	b.n	80084d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800848c:	2106      	movs	r1, #6
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	795b      	ldrb	r3, [r3, #5]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f90c 	bl	80086bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	791b      	ldrb	r3, [r3, #4]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f906 	bl	80086bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084b6:	2302      	movs	r3, #2
 80084b8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ba:	e00a      	b.n	80084d2 <USBH_HandleControl+0x2de>

    default:
      break;
 80084bc:	bf00      	nop
 80084be:	e008      	b.n	80084d2 <USBH_HandleControl+0x2de>
      break;
 80084c0:	bf00      	nop
 80084c2:	e006      	b.n	80084d2 <USBH_HandleControl+0x2de>
      break;
 80084c4:	bf00      	nop
 80084c6:	e004      	b.n	80084d2 <USBH_HandleControl+0x2de>
      break;
 80084c8:	bf00      	nop
 80084ca:	e002      	b.n	80084d2 <USBH_HandleControl+0x2de>
      break;
 80084cc:	bf00      	nop
 80084ce:	e000      	b.n	80084d2 <USBH_HandleControl+0x2de>
      break;
 80084d0:	bf00      	nop
  }

  return status;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af04      	add	r7, sp, #16
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084ea:	79f9      	ldrb	r1, [r7, #7]
 80084ec:	2300      	movs	r3, #0
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	2308      	movs	r3, #8
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	2300      	movs	r3, #0
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	2300      	movs	r3, #0
 80084fe:	2200      	movs	r2, #0
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fb46 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4611      	mov	r1, r2
 800851c:	461a      	mov	r2, r3
 800851e:	460b      	mov	r3, r1
 8008520:	80fb      	strh	r3, [r7, #6]
 8008522:	4613      	mov	r3, r2
 8008524:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008534:	7979      	ldrb	r1, [r7, #5]
 8008536:	7e3b      	ldrb	r3, [r7, #24]
 8008538:	9303      	str	r3, [sp, #12]
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	2301      	movs	r3, #1
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fb21 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b088      	sub	sp, #32
 800855e:	af04      	add	r7, sp, #16
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4611      	mov	r1, r2
 8008566:	461a      	mov	r2, r3
 8008568:	460b      	mov	r3, r1
 800856a:	80fb      	strh	r3, [r7, #6]
 800856c:	4613      	mov	r3, r2
 800856e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008570:	7979      	ldrb	r1, [r7, #5]
 8008572:	2300      	movs	r3, #0
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2301      	movs	r3, #1
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	2201      	movs	r2, #1
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fb03 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800858c:	2300      	movs	r3, #0

}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b088      	sub	sp, #32
 800859a:	af04      	add	r7, sp, #16
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	4611      	mov	r1, r2
 80085a2:	461a      	mov	r2, r3
 80085a4:	460b      	mov	r3, r1
 80085a6:	80fb      	strh	r3, [r7, #6]
 80085a8:	4613      	mov	r3, r2
 80085aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085ba:	7979      	ldrb	r1, [r7, #5]
 80085bc:	7e3b      	ldrb	r3, [r7, #24]
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	9302      	str	r3, [sp, #8]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	2301      	movs	r3, #1
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	2302      	movs	r3, #2
 80085ce:	2200      	movs	r2, #0
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fade 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af04      	add	r7, sp, #16
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4611      	mov	r1, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	460b      	mov	r3, r1
 80085f0:	80fb      	strh	r3, [r7, #6]
 80085f2:	4613      	mov	r3, r2
 80085f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085f6:	7979      	ldrb	r1, [r7, #5]
 80085f8:	2300      	movs	r3, #0
 80085fa:	9303      	str	r3, [sp, #12]
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	9302      	str	r3, [sp, #8]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	2301      	movs	r3, #1
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2302      	movs	r3, #2
 800860a:	2201      	movs	r2, #1
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 fac0 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af04      	add	r7, sp, #16
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	461a      	mov	r2, r3
 800862a:	4603      	mov	r3, r0
 800862c:	70fb      	strb	r3, [r7, #3]
 800862e:	460b      	mov	r3, r1
 8008630:	70bb      	strb	r3, [r7, #2]
 8008632:	4613      	mov	r3, r2
 8008634:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008636:	7878      	ldrb	r0, [r7, #1]
 8008638:	78ba      	ldrb	r2, [r7, #2]
 800863a:	78f9      	ldrb	r1, [r7, #3]
 800863c:	8b3b      	ldrh	r3, [r7, #24]
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	7d3b      	ldrb	r3, [r7, #20]
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	7c3b      	ldrb	r3, [r7, #16]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4603      	mov	r3, r0
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa53 	bl	8008af6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa72 	bl	8008b54 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f836 	bl	80086f8 <USBH_GetFreePipe>
 800868c:	4603      	mov	r3, r0
 800868e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008690:	89fb      	ldrh	r3, [r7, #14]
 8008692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008696:	4293      	cmp	r3, r2
 8008698:	d00a      	beq.n	80086b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	89fb      	ldrh	r3, [r7, #14]
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	33e0      	adds	r3, #224	; 0xe0
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	b2db      	uxtb	r3, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	2b0a      	cmp	r3, #10
 80086cc:	d80d      	bhi.n	80086ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	33e0      	adds	r3, #224	; 0xe0
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	33e0      	adds	r3, #224	; 0xe0
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
 8008708:	e00f      	b.n	800872a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	33e0      	adds	r3, #224	; 0xe0
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	b29b      	uxth	r3, r3
 8008722:	e007      	b.n	8008734 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	3301      	adds	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	2b0a      	cmp	r3, #10
 800872e:	d9ec      	bls.n	800870a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008730:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008744:	2201      	movs	r2, #1
 8008746:	490e      	ldr	r1, [pc, #56]	; (8008780 <MX_USB_HOST_Init+0x40>)
 8008748:	480e      	ldr	r0, [pc, #56]	; (8008784 <MX_USB_HOST_Init+0x44>)
 800874a:	f7fe fca1 	bl	8007090 <USBH_Init>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008754:	f7f8 fa10 	bl	8000b78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008758:	490b      	ldr	r1, [pc, #44]	; (8008788 <MX_USB_HOST_Init+0x48>)
 800875a:	480a      	ldr	r0, [pc, #40]	; (8008784 <MX_USB_HOST_Init+0x44>)
 800875c:	f7fe fd26 	bl	80071ac <USBH_RegisterClass>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008766:	f7f8 fa07 	bl	8000b78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800876a:	4806      	ldr	r0, [pc, #24]	; (8008784 <MX_USB_HOST_Init+0x44>)
 800876c:	f7fe fdaa 	bl	80072c4 <USBH_Start>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008776:	f7f8 f9ff 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	080087a1 	.word	0x080087a1
 8008784:	20000200 	.word	0x20000200
 8008788:	2000000c 	.word	0x2000000c

0800878c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008790:	4802      	ldr	r0, [pc, #8]	; (800879c <MX_USB_HOST_Process+0x10>)
 8008792:	f7fe fda7 	bl	80072e4 <USBH_Process>
}
 8008796:	bf00      	nop
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000200 	.word	0x20000200

080087a0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d819      	bhi.n	80087e8 <USBH_UserProcess+0x48>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <USBH_UserProcess+0x1c>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	080087e1 	.word	0x080087e1
 80087cc:	080087d1 	.word	0x080087d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087d0:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <USBH_UserProcess+0x58>)
 80087d2:	2203      	movs	r2, #3
 80087d4:	701a      	strb	r2, [r3, #0]
  break;
 80087d6:	e008      	b.n	80087ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <USBH_UserProcess+0x58>)
 80087da:	2202      	movs	r2, #2
 80087dc:	701a      	strb	r2, [r3, #0]
  break;
 80087de:	e004      	b.n	80087ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <USBH_UserProcess+0x58>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	701a      	strb	r2, [r3, #0]
  break;
 80087e6:	e000      	b.n	80087ea <USBH_UserProcess+0x4a>

  default:
  break;
 80087e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	200000b4 	.word	0x200000b4

080087fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	; 0x28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008804:	f107 0314 	add.w	r3, r7, #20
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	605a      	str	r2, [r3, #4]
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800881c:	d147      	bne.n	80088ae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	4a24      	ldr	r2, [pc, #144]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	6313      	str	r3, [r2, #48]	; 0x30
 800882e:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	613b      	str	r3, [r7, #16]
 8008838:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800883a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800883e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008840:	2300      	movs	r3, #0
 8008842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008848:	f107 0314 	add.w	r3, r7, #20
 800884c:	4619      	mov	r1, r3
 800884e:	481b      	ldr	r0, [pc, #108]	; (80088bc <HAL_HCD_MspInit+0xc0>)
 8008850:	f7f8 fda2 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008854:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800885a:	2302      	movs	r3, #2
 800885c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008862:	2300      	movs	r3, #0
 8008864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008866:	230a      	movs	r3, #10
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800886a:	f107 0314 	add.w	r3, r7, #20
 800886e:	4619      	mov	r1, r3
 8008870:	4812      	ldr	r0, [pc, #72]	; (80088bc <HAL_HCD_MspInit+0xc0>)
 8008872:	f7f8 fd91 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008876:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 8008878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887a:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 800887c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008880:	6353      	str	r3, [r2, #52]	; 0x34
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	4a0b      	ldr	r2, [pc, #44]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 800888c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008890:	6453      	str	r3, [r2, #68]	; 0x44
 8008892:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <HAL_HCD_MspInit+0xbc>)
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	2043      	movs	r0, #67	; 0x43
 80088a4:	f7f8 fcaf 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088a8:	2043      	movs	r0, #67	; 0x43
 80088aa:	f7f8 fcc8 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088ae:	bf00      	nop
 80088b0:	3728      	adds	r7, #40	; 0x28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40023800 	.word	0x40023800
 80088bc:	40020000 	.word	0x40020000

080088c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff f8db 	bl	8007a8a <USBH_LL_IncTimer>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff f913 	bl	8007b16 <USBH_LL_Connect>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff f91c 	bl	8007b44 <USBH_LL_Disconnect>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
 8008920:	4613      	mov	r3, r2
 8008922:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff f8cd 	bl	8007ade <USBH_LL_PortEnabled>
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff f8cd 	bl	8007afa <USBH_LL_PortDisabled>
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008976:	2b01      	cmp	r3, #1
 8008978:	d12a      	bne.n	80089d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800897a:	4a18      	ldr	r2, [pc, #96]	; (80089dc <USBH_LL_Init+0x74>)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a15      	ldr	r2, [pc, #84]	; (80089dc <USBH_LL_Init+0x74>)
 8008986:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <USBH_LL_Init+0x74>)
 800898c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008990:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008992:	4b12      	ldr	r3, [pc, #72]	; (80089dc <USBH_LL_Init+0x74>)
 8008994:	2208      	movs	r2, #8
 8008996:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008998:	4b10      	ldr	r3, [pc, #64]	; (80089dc <USBH_LL_Init+0x74>)
 800899a:	2201      	movs	r2, #1
 800899c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800899e:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <USBH_LL_Init+0x74>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089a4:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <USBH_LL_Init+0x74>)
 80089a6:	2202      	movs	r2, #2
 80089a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <USBH_LL_Init+0x74>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089b0:	480a      	ldr	r0, [pc, #40]	; (80089dc <USBH_LL_Init+0x74>)
 80089b2:	f7f8 fec0 	bl	8001736 <HAL_HCD_Init>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089bc:	f7f8 f8dc 	bl	8000b78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089c0:	4806      	ldr	r0, [pc, #24]	; (80089dc <USBH_LL_Init+0x74>)
 80089c2:	f7f9 faa4 	bl	8001f0e <HAL_HCD_GetCurrentFrame>
 80089c6:	4603      	mov	r3, r0
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff f84e 	bl	8007a6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200005d8 	.word	0x200005d8

080089e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f9 fa13 	bl	8001e22 <HAL_HCD_Start>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f95c 	bl	8008cc0 <USBH_Get_USB_Status>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7f9 fa1b 	bl	8001e68 <HAL_HCD_Stop>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 f941 	bl	8008cc0 <USBH_Get_USB_Status>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a54:	2301      	movs	r3, #1
 8008a56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f9 fa63 	bl	8001f2a <HAL_HCD_GetCurrentSpeed>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d00c      	beq.n	8008a84 <USBH_LL_GetSpeed+0x38>
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d80d      	bhi.n	8008a8a <USBH_LL_GetSpeed+0x3e>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <USBH_LL_GetSpeed+0x2c>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d003      	beq.n	8008a7e <USBH_LL_GetSpeed+0x32>
 8008a76:	e008      	b.n	8008a8a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	e008      	b.n	8008a90 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
    break;
 8008a82:	e005      	b.n	8008a90 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a84:	2302      	movs	r3, #2
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	e002      	b.n	8008a90 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8e:	bf00      	nop
  }
  return  speed;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f9 f9f6 	bl	8001ea2 <HAL_HCD_ResetPort>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f8ff 	bl	8008cc0 <USBH_Get_USB_Status>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f9 f9fd 	bl	8001ee6 <HAL_HCD_HC_GetXferCount>
 8008aec:	4603      	mov	r3, r0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008af6:	b590      	push	{r4, r7, lr}
 8008af8:	b089      	sub	sp, #36	; 0x24
 8008afa:	af04      	add	r7, sp, #16
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	461a      	mov	r2, r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70bb      	strb	r3, [r7, #2]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b1e:	787c      	ldrb	r4, [r7, #1]
 8008b20:	78ba      	ldrb	r2, [r7, #2]
 8008b22:	78f9      	ldrb	r1, [r7, #3]
 8008b24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	4623      	mov	r3, r4
 8008b36:	f7f8 fe60 	bl	80017fa <HAL_HCD_HC_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f8bd 	bl	8008cc0 <USBH_Get_USB_Status>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}

08008b54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f8 fed0 	bl	8001918 <HAL_HCD_HC_Halt>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f89e 	bl	8008cc0 <USBH_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b92:	b590      	push	{r4, r7, lr}
 8008b94:	b089      	sub	sp, #36	; 0x24
 8008b96:	af04      	add	r7, sp, #16
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	70fb      	strb	r3, [r7, #3]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70bb      	strb	r3, [r7, #2]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bba:	787c      	ldrb	r4, [r7, #1]
 8008bbc:	78ba      	ldrb	r2, [r7, #2]
 8008bbe:	78f9      	ldrb	r1, [r7, #3]
 8008bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	f7f8 fec3 	bl	8001960 <HAL_HCD_HC_SubmitRequest>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f86d 	bl	8008cc0 <USBH_Get_USB_Status>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f9 f957 	bl	8001ebe <HAL_HCD_HC_GetURBState>
 8008c10:	4603      	mov	r3, r0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d103      	bne.n	8008c38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f870 	bl	8008d18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c38:	20c8      	movs	r0, #200	; 0xc8
 8008c3a:	f7f8 f9e5 	bl	8001008 <HAL_Delay>
  return USBH_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
 8008c54:	4613      	mov	r3, r2
 8008c56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	212c      	movs	r1, #44	; 0x2c
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	333b      	adds	r3, #59	; 0x3b
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d009      	beq.n	8008c88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	212c      	movs	r1, #44	; 0x2c
 8008c7a:	fb01 f303 	mul.w	r3, r1, r3
 8008c7e:	4413      	add	r3, r2
 8008c80:	3354      	adds	r3, #84	; 0x54
 8008c82:	78ba      	ldrb	r2, [r7, #2]
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e008      	b.n	8008c9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	212c      	movs	r1, #44	; 0x2c
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	3355      	adds	r3, #85	; 0x55
 8008c96:	78ba      	ldrb	r2, [r7, #2]
 8008c98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7f8 f9a9 	bl	8001008 <HAL_Delay>
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d817      	bhi.n	8008d04 <USBH_Get_USB_Status+0x44>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <USBH_Get_USB_Status+0x1c>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cf3 	.word	0x08008cf3
 8008ce4:	08008cf9 	.word	0x08008cf9
 8008ce8:	08008cff 	.word	0x08008cff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf0:	e00b      	b.n	8008d0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf6:	e008      	b.n	8008d0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e005      	b.n	8008d0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e002      	b.n	8008d0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d04:	2302      	movs	r3, #2
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	bf00      	nop
  }
  return usb_status;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
 8008d30:	e001      	b.n	8008d36 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	4803      	ldr	r0, [pc, #12]	; (8008d4c <MX_DriverVbusFS+0x34>)
 8008d3e:	f7f8 fcc7 	bl	80016d0 <HAL_GPIO_WritePin>
}
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	40020800 	.word	0x40020800

08008d50 <__errno>:
 8008d50:	4b01      	ldr	r3, [pc, #4]	; (8008d58 <__errno+0x8>)
 8008d52:	6818      	ldr	r0, [r3, #0]
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	2000002c 	.word	0x2000002c

08008d5c <__libc_init_array>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4d0d      	ldr	r5, [pc, #52]	; (8008d94 <__libc_init_array+0x38>)
 8008d60:	4c0d      	ldr	r4, [pc, #52]	; (8008d98 <__libc_init_array+0x3c>)
 8008d62:	1b64      	subs	r4, r4, r5
 8008d64:	10a4      	asrs	r4, r4, #2
 8008d66:	2600      	movs	r6, #0
 8008d68:	42a6      	cmp	r6, r4
 8008d6a:	d109      	bne.n	8008d80 <__libc_init_array+0x24>
 8008d6c:	4d0b      	ldr	r5, [pc, #44]	; (8008d9c <__libc_init_array+0x40>)
 8008d6e:	4c0c      	ldr	r4, [pc, #48]	; (8008da0 <__libc_init_array+0x44>)
 8008d70:	f000 fc5e 	bl	8009630 <_init>
 8008d74:	1b64      	subs	r4, r4, r5
 8008d76:	10a4      	asrs	r4, r4, #2
 8008d78:	2600      	movs	r6, #0
 8008d7a:	42a6      	cmp	r6, r4
 8008d7c:	d105      	bne.n	8008d8a <__libc_init_array+0x2e>
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d84:	4798      	blx	r3
 8008d86:	3601      	adds	r6, #1
 8008d88:	e7ee      	b.n	8008d68 <__libc_init_array+0xc>
 8008d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8e:	4798      	blx	r3
 8008d90:	3601      	adds	r6, #1
 8008d92:	e7f2      	b.n	8008d7a <__libc_init_array+0x1e>
 8008d94:	080096b8 	.word	0x080096b8
 8008d98:	080096b8 	.word	0x080096b8
 8008d9c:	080096b8 	.word	0x080096b8
 8008da0:	080096bc 	.word	0x080096bc

08008da4 <malloc>:
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <malloc+0xc>)
 8008da6:	4601      	mov	r1, r0
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	f000 b863 	b.w	8008e74 <_malloc_r>
 8008dae:	bf00      	nop
 8008db0:	2000002c 	.word	0x2000002c

08008db4 <free>:
 8008db4:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <free+0xc>)
 8008db6:	4601      	mov	r1, r0
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	f000 b80b 	b.w	8008dd4 <_free_r>
 8008dbe:	bf00      	nop
 8008dc0:	2000002c 	.word	0x2000002c

08008dc4 <memset>:
 8008dc4:	4402      	add	r2, r0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d100      	bne.n	8008dce <memset+0xa>
 8008dcc:	4770      	bx	lr
 8008dce:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd2:	e7f9      	b.n	8008dc8 <memset+0x4>

08008dd4 <_free_r>:
 8008dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	d048      	beq.n	8008e6c <_free_r+0x98>
 8008dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dde:	9001      	str	r0, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f1a1 0404 	sub.w	r4, r1, #4
 8008de6:	bfb8      	it	lt
 8008de8:	18e4      	addlt	r4, r4, r3
 8008dea:	f000 f8cd 	bl	8008f88 <__malloc_lock>
 8008dee:	4a20      	ldr	r2, [pc, #128]	; (8008e70 <_free_r+0x9c>)
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	4615      	mov	r5, r2
 8008df6:	b933      	cbnz	r3, 8008e06 <_free_r+0x32>
 8008df8:	6063      	str	r3, [r4, #4]
 8008dfa:	6014      	str	r4, [r2, #0]
 8008dfc:	b003      	add	sp, #12
 8008dfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e02:	f000 b8c7 	b.w	8008f94 <__malloc_unlock>
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	d90b      	bls.n	8008e22 <_free_r+0x4e>
 8008e0a:	6821      	ldr	r1, [r4, #0]
 8008e0c:	1862      	adds	r2, r4, r1
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bf04      	itt	eq
 8008e12:	681a      	ldreq	r2, [r3, #0]
 8008e14:	685b      	ldreq	r3, [r3, #4]
 8008e16:	6063      	str	r3, [r4, #4]
 8008e18:	bf04      	itt	eq
 8008e1a:	1852      	addeq	r2, r2, r1
 8008e1c:	6022      	streq	r2, [r4, #0]
 8008e1e:	602c      	str	r4, [r5, #0]
 8008e20:	e7ec      	b.n	8008dfc <_free_r+0x28>
 8008e22:	461a      	mov	r2, r3
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	b10b      	cbz	r3, 8008e2c <_free_r+0x58>
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	d9fa      	bls.n	8008e22 <_free_r+0x4e>
 8008e2c:	6811      	ldr	r1, [r2, #0]
 8008e2e:	1855      	adds	r5, r2, r1
 8008e30:	42a5      	cmp	r5, r4
 8008e32:	d10b      	bne.n	8008e4c <_free_r+0x78>
 8008e34:	6824      	ldr	r4, [r4, #0]
 8008e36:	4421      	add	r1, r4
 8008e38:	1854      	adds	r4, r2, r1
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	6011      	str	r1, [r2, #0]
 8008e3e:	d1dd      	bne.n	8008dfc <_free_r+0x28>
 8008e40:	681c      	ldr	r4, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	6053      	str	r3, [r2, #4]
 8008e46:	4421      	add	r1, r4
 8008e48:	6011      	str	r1, [r2, #0]
 8008e4a:	e7d7      	b.n	8008dfc <_free_r+0x28>
 8008e4c:	d902      	bls.n	8008e54 <_free_r+0x80>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	e7d3      	b.n	8008dfc <_free_r+0x28>
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	bf04      	itt	eq
 8008e5c:	6819      	ldreq	r1, [r3, #0]
 8008e5e:	685b      	ldreq	r3, [r3, #4]
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	bf04      	itt	eq
 8008e64:	1949      	addeq	r1, r1, r5
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	6054      	str	r4, [r2, #4]
 8008e6a:	e7c7      	b.n	8008dfc <_free_r+0x28>
 8008e6c:	b003      	add	sp, #12
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	200000b8 	.word	0x200000b8

08008e74 <_malloc_r>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	1ccd      	adds	r5, r1, #3
 8008e78:	f025 0503 	bic.w	r5, r5, #3
 8008e7c:	3508      	adds	r5, #8
 8008e7e:	2d0c      	cmp	r5, #12
 8008e80:	bf38      	it	cc
 8008e82:	250c      	movcc	r5, #12
 8008e84:	2d00      	cmp	r5, #0
 8008e86:	4606      	mov	r6, r0
 8008e88:	db01      	blt.n	8008e8e <_malloc_r+0x1a>
 8008e8a:	42a9      	cmp	r1, r5
 8008e8c:	d903      	bls.n	8008e96 <_malloc_r+0x22>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	6033      	str	r3, [r6, #0]
 8008e92:	2000      	movs	r0, #0
 8008e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e96:	f000 f877 	bl	8008f88 <__malloc_lock>
 8008e9a:	4921      	ldr	r1, [pc, #132]	; (8008f20 <_malloc_r+0xac>)
 8008e9c:	680a      	ldr	r2, [r1, #0]
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	b99c      	cbnz	r4, 8008eca <_malloc_r+0x56>
 8008ea2:	4f20      	ldr	r7, [pc, #128]	; (8008f24 <_malloc_r+0xb0>)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	b923      	cbnz	r3, 8008eb2 <_malloc_r+0x3e>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f83c 	bl	8008f28 <_sbrk_r>
 8008eb0:	6038      	str	r0, [r7, #0]
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 f837 	bl	8008f28 <_sbrk_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	d123      	bne.n	8008f06 <_malloc_r+0x92>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 f866 	bl	8008f94 <__malloc_unlock>
 8008ec8:	e7e3      	b.n	8008e92 <_malloc_r+0x1e>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	1b5b      	subs	r3, r3, r5
 8008ece:	d417      	bmi.n	8008f00 <_malloc_r+0x8c>
 8008ed0:	2b0b      	cmp	r3, #11
 8008ed2:	d903      	bls.n	8008edc <_malloc_r+0x68>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	441c      	add	r4, r3
 8008ed8:	6025      	str	r5, [r4, #0]
 8008eda:	e004      	b.n	8008ee6 <_malloc_r+0x72>
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	42a2      	cmp	r2, r4
 8008ee0:	bf0c      	ite	eq
 8008ee2:	600b      	streq	r3, [r1, #0]
 8008ee4:	6053      	strne	r3, [r2, #4]
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 f854 	bl	8008f94 <__malloc_unlock>
 8008eec:	f104 000b 	add.w	r0, r4, #11
 8008ef0:	1d23      	adds	r3, r4, #4
 8008ef2:	f020 0007 	bic.w	r0, r0, #7
 8008ef6:	1ac2      	subs	r2, r0, r3
 8008ef8:	d0cc      	beq.n	8008e94 <_malloc_r+0x20>
 8008efa:	1a1b      	subs	r3, r3, r0
 8008efc:	50a3      	str	r3, [r4, r2]
 8008efe:	e7c9      	b.n	8008e94 <_malloc_r+0x20>
 8008f00:	4622      	mov	r2, r4
 8008f02:	6864      	ldr	r4, [r4, #4]
 8008f04:	e7cc      	b.n	8008ea0 <_malloc_r+0x2c>
 8008f06:	1cc4      	adds	r4, r0, #3
 8008f08:	f024 0403 	bic.w	r4, r4, #3
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d0e3      	beq.n	8008ed8 <_malloc_r+0x64>
 8008f10:	1a21      	subs	r1, r4, r0
 8008f12:	4630      	mov	r0, r6
 8008f14:	f000 f808 	bl	8008f28 <_sbrk_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d1dd      	bne.n	8008ed8 <_malloc_r+0x64>
 8008f1c:	e7cf      	b.n	8008ebe <_malloc_r+0x4a>
 8008f1e:	bf00      	nop
 8008f20:	200000b8 	.word	0x200000b8
 8008f24:	200000bc 	.word	0x200000bc

08008f28 <_sbrk_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d06      	ldr	r5, [pc, #24]	; (8008f44 <_sbrk_r+0x1c>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f7 ff0a 	bl	8000d4c <_sbrk>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_sbrk_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_sbrk_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	200008dc 	.word	0x200008dc

08008f48 <siprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	b500      	push	{lr}
 8008f4c:	b09c      	sub	sp, #112	; 0x70
 8008f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f50:	9002      	str	r0, [sp, #8]
 8008f52:	9006      	str	r0, [sp, #24]
 8008f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f58:	4809      	ldr	r0, [pc, #36]	; (8008f80 <siprintf+0x38>)
 8008f5a:	9107      	str	r1, [sp, #28]
 8008f5c:	9104      	str	r1, [sp, #16]
 8008f5e:	4909      	ldr	r1, [pc, #36]	; (8008f84 <siprintf+0x3c>)
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	a902      	add	r1, sp, #8
 8008f6c:	f000 f874 	bl	8009058 <_svfiprintf_r>
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	b01c      	add	sp, #112	; 0x70
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b003      	add	sp, #12
 8008f7e:	4770      	bx	lr
 8008f80:	2000002c 	.word	0x2000002c
 8008f84:	ffff0208 	.word	0xffff0208

08008f88 <__malloc_lock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__malloc_lock+0x8>)
 8008f8a:	f000 baf9 	b.w	8009580 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	200008e4 	.word	0x200008e4

08008f94 <__malloc_unlock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__malloc_unlock+0x8>)
 8008f96:	f000 baf4 	b.w	8009582 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	200008e4 	.word	0x200008e4

08008fa0 <__ssputs_r>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	688e      	ldr	r6, [r1, #8]
 8008fa6:	429e      	cmp	r6, r3
 8008fa8:	4682      	mov	sl, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	4690      	mov	r8, r2
 8008fae:	461f      	mov	r7, r3
 8008fb0:	d838      	bhi.n	8009024 <__ssputs_r+0x84>
 8008fb2:	898a      	ldrh	r2, [r1, #12]
 8008fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fb8:	d032      	beq.n	8009020 <__ssputs_r+0x80>
 8008fba:	6825      	ldr	r5, [r4, #0]
 8008fbc:	6909      	ldr	r1, [r1, #16]
 8008fbe:	eba5 0901 	sub.w	r9, r5, r1
 8008fc2:	6965      	ldr	r5, [r4, #20]
 8008fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fcc:	3301      	adds	r3, #1
 8008fce:	444b      	add	r3, r9
 8008fd0:	106d      	asrs	r5, r5, #1
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	bf38      	it	cc
 8008fd6:	461d      	movcc	r5, r3
 8008fd8:	0553      	lsls	r3, r2, #21
 8008fda:	d531      	bpl.n	8009040 <__ssputs_r+0xa0>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7ff ff49 	bl	8008e74 <_malloc_r>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	b950      	cbnz	r0, 8008ffc <__ssputs_r+0x5c>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	f8ca 3000 	str.w	r3, [sl]
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffc:	6921      	ldr	r1, [r4, #16]
 8008ffe:	464a      	mov	r2, r9
 8009000:	f000 fac0 	bl	8009584 <memcpy>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800900a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	6126      	str	r6, [r4, #16]
 8009012:	6165      	str	r5, [r4, #20]
 8009014:	444e      	add	r6, r9
 8009016:	eba5 0509 	sub.w	r5, r5, r9
 800901a:	6026      	str	r6, [r4, #0]
 800901c:	60a5      	str	r5, [r4, #8]
 800901e:	463e      	mov	r6, r7
 8009020:	42be      	cmp	r6, r7
 8009022:	d900      	bls.n	8009026 <__ssputs_r+0x86>
 8009024:	463e      	mov	r6, r7
 8009026:	4632      	mov	r2, r6
 8009028:	6820      	ldr	r0, [r4, #0]
 800902a:	4641      	mov	r1, r8
 800902c:	f000 fab8 	bl	80095a0 <memmove>
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	1b9b      	subs	r3, r3, r6
 8009036:	4432      	add	r2, r6
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	6022      	str	r2, [r4, #0]
 800903c:	2000      	movs	r0, #0
 800903e:	e7db      	b.n	8008ff8 <__ssputs_r+0x58>
 8009040:	462a      	mov	r2, r5
 8009042:	f000 fac7 	bl	80095d4 <_realloc_r>
 8009046:	4606      	mov	r6, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	d1e1      	bne.n	8009010 <__ssputs_r+0x70>
 800904c:	6921      	ldr	r1, [r4, #16]
 800904e:	4650      	mov	r0, sl
 8009050:	f7ff fec0 	bl	8008dd4 <_free_r>
 8009054:	e7c7      	b.n	8008fe6 <__ssputs_r+0x46>
	...

08009058 <_svfiprintf_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	4698      	mov	r8, r3
 800905e:	898b      	ldrh	r3, [r1, #12]
 8009060:	061b      	lsls	r3, r3, #24
 8009062:	b09d      	sub	sp, #116	; 0x74
 8009064:	4607      	mov	r7, r0
 8009066:	460d      	mov	r5, r1
 8009068:	4614      	mov	r4, r2
 800906a:	d50e      	bpl.n	800908a <_svfiprintf_r+0x32>
 800906c:	690b      	ldr	r3, [r1, #16]
 800906e:	b963      	cbnz	r3, 800908a <_svfiprintf_r+0x32>
 8009070:	2140      	movs	r1, #64	; 0x40
 8009072:	f7ff feff 	bl	8008e74 <_malloc_r>
 8009076:	6028      	str	r0, [r5, #0]
 8009078:	6128      	str	r0, [r5, #16]
 800907a:	b920      	cbnz	r0, 8009086 <_svfiprintf_r+0x2e>
 800907c:	230c      	movs	r3, #12
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e0d1      	b.n	800922a <_svfiprintf_r+0x1d2>
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	616b      	str	r3, [r5, #20]
 800908a:	2300      	movs	r3, #0
 800908c:	9309      	str	r3, [sp, #36]	; 0x24
 800908e:	2320      	movs	r3, #32
 8009090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009094:	f8cd 800c 	str.w	r8, [sp, #12]
 8009098:	2330      	movs	r3, #48	; 0x30
 800909a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009244 <_svfiprintf_r+0x1ec>
 800909e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090a2:	f04f 0901 	mov.w	r9, #1
 80090a6:	4623      	mov	r3, r4
 80090a8:	469a      	mov	sl, r3
 80090aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ae:	b10a      	cbz	r2, 80090b4 <_svfiprintf_r+0x5c>
 80090b0:	2a25      	cmp	r2, #37	; 0x25
 80090b2:	d1f9      	bne.n	80090a8 <_svfiprintf_r+0x50>
 80090b4:	ebba 0b04 	subs.w	fp, sl, r4
 80090b8:	d00b      	beq.n	80090d2 <_svfiprintf_r+0x7a>
 80090ba:	465b      	mov	r3, fp
 80090bc:	4622      	mov	r2, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff ff6d 	bl	8008fa0 <__ssputs_r>
 80090c6:	3001      	adds	r0, #1
 80090c8:	f000 80aa 	beq.w	8009220 <_svfiprintf_r+0x1c8>
 80090cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ce:	445a      	add	r2, fp
 80090d0:	9209      	str	r2, [sp, #36]	; 0x24
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 80a2 	beq.w	8009220 <_svfiprintf_r+0x1c8>
 80090dc:	2300      	movs	r3, #0
 80090de:	f04f 32ff 	mov.w	r2, #4294967295
 80090e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e6:	f10a 0a01 	add.w	sl, sl, #1
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090f2:	931a      	str	r3, [sp, #104]	; 0x68
 80090f4:	4654      	mov	r4, sl
 80090f6:	2205      	movs	r2, #5
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	4851      	ldr	r0, [pc, #324]	; (8009244 <_svfiprintf_r+0x1ec>)
 80090fe:	f7f7 f867 	bl	80001d0 <memchr>
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	b9d8      	cbnz	r0, 800913e <_svfiprintf_r+0xe6>
 8009106:	06d0      	lsls	r0, r2, #27
 8009108:	bf44      	itt	mi
 800910a:	2320      	movmi	r3, #32
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009110:	0711      	lsls	r1, r2, #28
 8009112:	bf44      	itt	mi
 8009114:	232b      	movmi	r3, #43	; 0x2b
 8009116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911a:	f89a 3000 	ldrb.w	r3, [sl]
 800911e:	2b2a      	cmp	r3, #42	; 0x2a
 8009120:	d015      	beq.n	800914e <_svfiprintf_r+0xf6>
 8009122:	9a07      	ldr	r2, [sp, #28]
 8009124:	4654      	mov	r4, sl
 8009126:	2000      	movs	r0, #0
 8009128:	f04f 0c0a 	mov.w	ip, #10
 800912c:	4621      	mov	r1, r4
 800912e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009132:	3b30      	subs	r3, #48	; 0x30
 8009134:	2b09      	cmp	r3, #9
 8009136:	d94e      	bls.n	80091d6 <_svfiprintf_r+0x17e>
 8009138:	b1b0      	cbz	r0, 8009168 <_svfiprintf_r+0x110>
 800913a:	9207      	str	r2, [sp, #28]
 800913c:	e014      	b.n	8009168 <_svfiprintf_r+0x110>
 800913e:	eba0 0308 	sub.w	r3, r0, r8
 8009142:	fa09 f303 	lsl.w	r3, r9, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	46a2      	mov	sl, r4
 800914c:	e7d2      	b.n	80090f4 <_svfiprintf_r+0x9c>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	1d19      	adds	r1, r3, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	9103      	str	r1, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfbb      	ittet	lt
 800915a:	425b      	neglt	r3, r3
 800915c:	f042 0202 	orrlt.w	r2, r2, #2
 8009160:	9307      	strge	r3, [sp, #28]
 8009162:	9307      	strlt	r3, [sp, #28]
 8009164:	bfb8      	it	lt
 8009166:	9204      	strlt	r2, [sp, #16]
 8009168:	7823      	ldrb	r3, [r4, #0]
 800916a:	2b2e      	cmp	r3, #46	; 0x2e
 800916c:	d10c      	bne.n	8009188 <_svfiprintf_r+0x130>
 800916e:	7863      	ldrb	r3, [r4, #1]
 8009170:	2b2a      	cmp	r3, #42	; 0x2a
 8009172:	d135      	bne.n	80091e0 <_svfiprintf_r+0x188>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfb8      	it	lt
 8009180:	f04f 33ff 	movlt.w	r3, #4294967295
 8009184:	3402      	adds	r4, #2
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009254 <_svfiprintf_r+0x1fc>
 800918c:	7821      	ldrb	r1, [r4, #0]
 800918e:	2203      	movs	r2, #3
 8009190:	4650      	mov	r0, sl
 8009192:	f7f7 f81d 	bl	80001d0 <memchr>
 8009196:	b140      	cbz	r0, 80091aa <_svfiprintf_r+0x152>
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	eba0 000a 	sub.w	r0, r0, sl
 800919e:	fa03 f000 	lsl.w	r0, r3, r0
 80091a2:	9b04      	ldr	r3, [sp, #16]
 80091a4:	4303      	orrs	r3, r0
 80091a6:	3401      	adds	r4, #1
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ae:	4826      	ldr	r0, [pc, #152]	; (8009248 <_svfiprintf_r+0x1f0>)
 80091b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091b4:	2206      	movs	r2, #6
 80091b6:	f7f7 f80b 	bl	80001d0 <memchr>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d038      	beq.n	8009230 <_svfiprintf_r+0x1d8>
 80091be:	4b23      	ldr	r3, [pc, #140]	; (800924c <_svfiprintf_r+0x1f4>)
 80091c0:	bb1b      	cbnz	r3, 800920a <_svfiprintf_r+0x1b2>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	3307      	adds	r3, #7
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	3308      	adds	r3, #8
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d0:	4433      	add	r3, r6
 80091d2:	9309      	str	r3, [sp, #36]	; 0x24
 80091d4:	e767      	b.n	80090a6 <_svfiprintf_r+0x4e>
 80091d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091da:	460c      	mov	r4, r1
 80091dc:	2001      	movs	r0, #1
 80091de:	e7a5      	b.n	800912c <_svfiprintf_r+0xd4>
 80091e0:	2300      	movs	r3, #0
 80091e2:	3401      	adds	r4, #1
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	4619      	mov	r1, r3
 80091e8:	f04f 0c0a 	mov.w	ip, #10
 80091ec:	4620      	mov	r0, r4
 80091ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f2:	3a30      	subs	r2, #48	; 0x30
 80091f4:	2a09      	cmp	r2, #9
 80091f6:	d903      	bls.n	8009200 <_svfiprintf_r+0x1a8>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0c5      	beq.n	8009188 <_svfiprintf_r+0x130>
 80091fc:	9105      	str	r1, [sp, #20]
 80091fe:	e7c3      	b.n	8009188 <_svfiprintf_r+0x130>
 8009200:	fb0c 2101 	mla	r1, ip, r1, r2
 8009204:	4604      	mov	r4, r0
 8009206:	2301      	movs	r3, #1
 8009208:	e7f0      	b.n	80091ec <_svfiprintf_r+0x194>
 800920a:	ab03      	add	r3, sp, #12
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	462a      	mov	r2, r5
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <_svfiprintf_r+0x1f8>)
 8009212:	a904      	add	r1, sp, #16
 8009214:	4638      	mov	r0, r7
 8009216:	f3af 8000 	nop.w
 800921a:	1c42      	adds	r2, r0, #1
 800921c:	4606      	mov	r6, r0
 800921e:	d1d6      	bne.n	80091ce <_svfiprintf_r+0x176>
 8009220:	89ab      	ldrh	r3, [r5, #12]
 8009222:	065b      	lsls	r3, r3, #25
 8009224:	f53f af2c 	bmi.w	8009080 <_svfiprintf_r+0x28>
 8009228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800922a:	b01d      	add	sp, #116	; 0x74
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	ab03      	add	r3, sp, #12
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	462a      	mov	r2, r5
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <_svfiprintf_r+0x1f8>)
 8009238:	a904      	add	r1, sp, #16
 800923a:	4638      	mov	r0, r7
 800923c:	f000 f87a 	bl	8009334 <_printf_i>
 8009240:	e7eb      	b.n	800921a <_svfiprintf_r+0x1c2>
 8009242:	bf00      	nop
 8009244:	0800967c 	.word	0x0800967c
 8009248:	08009686 	.word	0x08009686
 800924c:	00000000 	.word	0x00000000
 8009250:	08008fa1 	.word	0x08008fa1
 8009254:	08009682 	.word	0x08009682

08009258 <_printf_common>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	4616      	mov	r6, r2
 800925e:	4699      	mov	r9, r3
 8009260:	688a      	ldr	r2, [r1, #8]
 8009262:	690b      	ldr	r3, [r1, #16]
 8009264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009268:	4293      	cmp	r3, r2
 800926a:	bfb8      	it	lt
 800926c:	4613      	movlt	r3, r2
 800926e:	6033      	str	r3, [r6, #0]
 8009270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009274:	4607      	mov	r7, r0
 8009276:	460c      	mov	r4, r1
 8009278:	b10a      	cbz	r2, 800927e <_printf_common+0x26>
 800927a:	3301      	adds	r3, #1
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	0699      	lsls	r1, r3, #26
 8009282:	bf42      	ittt	mi
 8009284:	6833      	ldrmi	r3, [r6, #0]
 8009286:	3302      	addmi	r3, #2
 8009288:	6033      	strmi	r3, [r6, #0]
 800928a:	6825      	ldr	r5, [r4, #0]
 800928c:	f015 0506 	ands.w	r5, r5, #6
 8009290:	d106      	bne.n	80092a0 <_printf_common+0x48>
 8009292:	f104 0a19 	add.w	sl, r4, #25
 8009296:	68e3      	ldr	r3, [r4, #12]
 8009298:	6832      	ldr	r2, [r6, #0]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	42ab      	cmp	r3, r5
 800929e:	dc26      	bgt.n	80092ee <_printf_common+0x96>
 80092a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092a4:	1e13      	subs	r3, r2, #0
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	bf18      	it	ne
 80092aa:	2301      	movne	r3, #1
 80092ac:	0692      	lsls	r2, r2, #26
 80092ae:	d42b      	bmi.n	8009308 <_printf_common+0xb0>
 80092b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092b4:	4649      	mov	r1, r9
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c0      	blx	r8
 80092ba:	3001      	adds	r0, #1
 80092bc:	d01e      	beq.n	80092fc <_printf_common+0xa4>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	68e5      	ldr	r5, [r4, #12]
 80092c2:	6832      	ldr	r2, [r6, #0]
 80092c4:	f003 0306 	and.w	r3, r3, #6
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	bf08      	it	eq
 80092cc:	1aad      	subeq	r5, r5, r2
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	6922      	ldr	r2, [r4, #16]
 80092d2:	bf0c      	ite	eq
 80092d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d8:	2500      	movne	r5, #0
 80092da:	4293      	cmp	r3, r2
 80092dc:	bfc4      	itt	gt
 80092de:	1a9b      	subgt	r3, r3, r2
 80092e0:	18ed      	addgt	r5, r5, r3
 80092e2:	2600      	movs	r6, #0
 80092e4:	341a      	adds	r4, #26
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	d11a      	bne.n	8009320 <_printf_common+0xc8>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e008      	b.n	8009300 <_printf_common+0xa8>
 80092ee:	2301      	movs	r3, #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	4649      	mov	r1, r9
 80092f4:	4638      	mov	r0, r7
 80092f6:	47c0      	blx	r8
 80092f8:	3001      	adds	r0, #1
 80092fa:	d103      	bne.n	8009304 <_printf_common+0xac>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009304:	3501      	adds	r5, #1
 8009306:	e7c6      	b.n	8009296 <_printf_common+0x3e>
 8009308:	18e1      	adds	r1, r4, r3
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	2030      	movs	r0, #48	; 0x30
 800930e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009312:	4422      	add	r2, r4
 8009314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800931c:	3302      	adds	r3, #2
 800931e:	e7c7      	b.n	80092b0 <_printf_common+0x58>
 8009320:	2301      	movs	r3, #1
 8009322:	4622      	mov	r2, r4
 8009324:	4649      	mov	r1, r9
 8009326:	4638      	mov	r0, r7
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d0e6      	beq.n	80092fc <_printf_common+0xa4>
 800932e:	3601      	adds	r6, #1
 8009330:	e7d9      	b.n	80092e6 <_printf_common+0x8e>
	...

08009334 <_printf_i>:
 8009334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	460c      	mov	r4, r1
 800933a:	4691      	mov	r9, r2
 800933c:	7e27      	ldrb	r7, [r4, #24]
 800933e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009340:	2f78      	cmp	r7, #120	; 0x78
 8009342:	4680      	mov	r8, r0
 8009344:	469a      	mov	sl, r3
 8009346:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800934a:	d807      	bhi.n	800935c <_printf_i+0x28>
 800934c:	2f62      	cmp	r7, #98	; 0x62
 800934e:	d80a      	bhi.n	8009366 <_printf_i+0x32>
 8009350:	2f00      	cmp	r7, #0
 8009352:	f000 80d8 	beq.w	8009506 <_printf_i+0x1d2>
 8009356:	2f58      	cmp	r7, #88	; 0x58
 8009358:	f000 80a3 	beq.w	80094a2 <_printf_i+0x16e>
 800935c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009364:	e03a      	b.n	80093dc <_printf_i+0xa8>
 8009366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800936a:	2b15      	cmp	r3, #21
 800936c:	d8f6      	bhi.n	800935c <_printf_i+0x28>
 800936e:	a001      	add	r0, pc, #4	; (adr r0, 8009374 <_printf_i+0x40>)
 8009370:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009374:	080093cd 	.word	0x080093cd
 8009378:	080093e1 	.word	0x080093e1
 800937c:	0800935d 	.word	0x0800935d
 8009380:	0800935d 	.word	0x0800935d
 8009384:	0800935d 	.word	0x0800935d
 8009388:	0800935d 	.word	0x0800935d
 800938c:	080093e1 	.word	0x080093e1
 8009390:	0800935d 	.word	0x0800935d
 8009394:	0800935d 	.word	0x0800935d
 8009398:	0800935d 	.word	0x0800935d
 800939c:	0800935d 	.word	0x0800935d
 80093a0:	080094ed 	.word	0x080094ed
 80093a4:	08009411 	.word	0x08009411
 80093a8:	080094cf 	.word	0x080094cf
 80093ac:	0800935d 	.word	0x0800935d
 80093b0:	0800935d 	.word	0x0800935d
 80093b4:	0800950f 	.word	0x0800950f
 80093b8:	0800935d 	.word	0x0800935d
 80093bc:	08009411 	.word	0x08009411
 80093c0:	0800935d 	.word	0x0800935d
 80093c4:	0800935d 	.word	0x0800935d
 80093c8:	080094d7 	.word	0x080094d7
 80093cc:	680b      	ldr	r3, [r1, #0]
 80093ce:	1d1a      	adds	r2, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	600a      	str	r2, [r1, #0]
 80093d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093dc:	2301      	movs	r3, #1
 80093de:	e0a3      	b.n	8009528 <_printf_i+0x1f4>
 80093e0:	6825      	ldr	r5, [r4, #0]
 80093e2:	6808      	ldr	r0, [r1, #0]
 80093e4:	062e      	lsls	r6, r5, #24
 80093e6:	f100 0304 	add.w	r3, r0, #4
 80093ea:	d50a      	bpl.n	8009402 <_printf_i+0xce>
 80093ec:	6805      	ldr	r5, [r0, #0]
 80093ee:	600b      	str	r3, [r1, #0]
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	da03      	bge.n	80093fc <_printf_i+0xc8>
 80093f4:	232d      	movs	r3, #45	; 0x2d
 80093f6:	426d      	negs	r5, r5
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fc:	485e      	ldr	r0, [pc, #376]	; (8009578 <_printf_i+0x244>)
 80093fe:	230a      	movs	r3, #10
 8009400:	e019      	b.n	8009436 <_printf_i+0x102>
 8009402:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009406:	6805      	ldr	r5, [r0, #0]
 8009408:	600b      	str	r3, [r1, #0]
 800940a:	bf18      	it	ne
 800940c:	b22d      	sxthne	r5, r5
 800940e:	e7ef      	b.n	80093f0 <_printf_i+0xbc>
 8009410:	680b      	ldr	r3, [r1, #0]
 8009412:	6825      	ldr	r5, [r4, #0]
 8009414:	1d18      	adds	r0, r3, #4
 8009416:	6008      	str	r0, [r1, #0]
 8009418:	0628      	lsls	r0, r5, #24
 800941a:	d501      	bpl.n	8009420 <_printf_i+0xec>
 800941c:	681d      	ldr	r5, [r3, #0]
 800941e:	e002      	b.n	8009426 <_printf_i+0xf2>
 8009420:	0669      	lsls	r1, r5, #25
 8009422:	d5fb      	bpl.n	800941c <_printf_i+0xe8>
 8009424:	881d      	ldrh	r5, [r3, #0]
 8009426:	4854      	ldr	r0, [pc, #336]	; (8009578 <_printf_i+0x244>)
 8009428:	2f6f      	cmp	r7, #111	; 0x6f
 800942a:	bf0c      	ite	eq
 800942c:	2308      	moveq	r3, #8
 800942e:	230a      	movne	r3, #10
 8009430:	2100      	movs	r1, #0
 8009432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009436:	6866      	ldr	r6, [r4, #4]
 8009438:	60a6      	str	r6, [r4, #8]
 800943a:	2e00      	cmp	r6, #0
 800943c:	bfa2      	ittt	ge
 800943e:	6821      	ldrge	r1, [r4, #0]
 8009440:	f021 0104 	bicge.w	r1, r1, #4
 8009444:	6021      	strge	r1, [r4, #0]
 8009446:	b90d      	cbnz	r5, 800944c <_printf_i+0x118>
 8009448:	2e00      	cmp	r6, #0
 800944a:	d04d      	beq.n	80094e8 <_printf_i+0x1b4>
 800944c:	4616      	mov	r6, r2
 800944e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009452:	fb03 5711 	mls	r7, r3, r1, r5
 8009456:	5dc7      	ldrb	r7, [r0, r7]
 8009458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800945c:	462f      	mov	r7, r5
 800945e:	42bb      	cmp	r3, r7
 8009460:	460d      	mov	r5, r1
 8009462:	d9f4      	bls.n	800944e <_printf_i+0x11a>
 8009464:	2b08      	cmp	r3, #8
 8009466:	d10b      	bne.n	8009480 <_printf_i+0x14c>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	07df      	lsls	r7, r3, #31
 800946c:	d508      	bpl.n	8009480 <_printf_i+0x14c>
 800946e:	6923      	ldr	r3, [r4, #16]
 8009470:	6861      	ldr	r1, [r4, #4]
 8009472:	4299      	cmp	r1, r3
 8009474:	bfde      	ittt	le
 8009476:	2330      	movle	r3, #48	; 0x30
 8009478:	f806 3c01 	strble.w	r3, [r6, #-1]
 800947c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009480:	1b92      	subs	r2, r2, r6
 8009482:	6122      	str	r2, [r4, #16]
 8009484:	f8cd a000 	str.w	sl, [sp]
 8009488:	464b      	mov	r3, r9
 800948a:	aa03      	add	r2, sp, #12
 800948c:	4621      	mov	r1, r4
 800948e:	4640      	mov	r0, r8
 8009490:	f7ff fee2 	bl	8009258 <_printf_common>
 8009494:	3001      	adds	r0, #1
 8009496:	d14c      	bne.n	8009532 <_printf_i+0x1fe>
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	b004      	add	sp, #16
 800949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a2:	4835      	ldr	r0, [pc, #212]	; (8009578 <_printf_i+0x244>)
 80094a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	680e      	ldr	r6, [r1, #0]
 80094ac:	061f      	lsls	r7, r3, #24
 80094ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80094b2:	600e      	str	r6, [r1, #0]
 80094b4:	d514      	bpl.n	80094e0 <_printf_i+0x1ac>
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	bf44      	itt	mi
 80094ba:	f043 0320 	orrmi.w	r3, r3, #32
 80094be:	6023      	strmi	r3, [r4, #0]
 80094c0:	b91d      	cbnz	r5, 80094ca <_printf_i+0x196>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f023 0320 	bic.w	r3, r3, #32
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	2310      	movs	r3, #16
 80094cc:	e7b0      	b.n	8009430 <_printf_i+0xfc>
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	f043 0320 	orr.w	r3, r3, #32
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	2378      	movs	r3, #120	; 0x78
 80094d8:	4828      	ldr	r0, [pc, #160]	; (800957c <_printf_i+0x248>)
 80094da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094de:	e7e3      	b.n	80094a8 <_printf_i+0x174>
 80094e0:	065e      	lsls	r6, r3, #25
 80094e2:	bf48      	it	mi
 80094e4:	b2ad      	uxthmi	r5, r5
 80094e6:	e7e6      	b.n	80094b6 <_printf_i+0x182>
 80094e8:	4616      	mov	r6, r2
 80094ea:	e7bb      	b.n	8009464 <_printf_i+0x130>
 80094ec:	680b      	ldr	r3, [r1, #0]
 80094ee:	6826      	ldr	r6, [r4, #0]
 80094f0:	6960      	ldr	r0, [r4, #20]
 80094f2:	1d1d      	adds	r5, r3, #4
 80094f4:	600d      	str	r5, [r1, #0]
 80094f6:	0635      	lsls	r5, r6, #24
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	d501      	bpl.n	8009500 <_printf_i+0x1cc>
 80094fc:	6018      	str	r0, [r3, #0]
 80094fe:	e002      	b.n	8009506 <_printf_i+0x1d2>
 8009500:	0671      	lsls	r1, r6, #25
 8009502:	d5fb      	bpl.n	80094fc <_printf_i+0x1c8>
 8009504:	8018      	strh	r0, [r3, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	4616      	mov	r6, r2
 800950c:	e7ba      	b.n	8009484 <_printf_i+0x150>
 800950e:	680b      	ldr	r3, [r1, #0]
 8009510:	1d1a      	adds	r2, r3, #4
 8009512:	600a      	str	r2, [r1, #0]
 8009514:	681e      	ldr	r6, [r3, #0]
 8009516:	6862      	ldr	r2, [r4, #4]
 8009518:	2100      	movs	r1, #0
 800951a:	4630      	mov	r0, r6
 800951c:	f7f6 fe58 	bl	80001d0 <memchr>
 8009520:	b108      	cbz	r0, 8009526 <_printf_i+0x1f2>
 8009522:	1b80      	subs	r0, r0, r6
 8009524:	6060      	str	r0, [r4, #4]
 8009526:	6863      	ldr	r3, [r4, #4]
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	2300      	movs	r3, #0
 800952c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009530:	e7a8      	b.n	8009484 <_printf_i+0x150>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	4632      	mov	r2, r6
 8009536:	4649      	mov	r1, r9
 8009538:	4640      	mov	r0, r8
 800953a:	47d0      	blx	sl
 800953c:	3001      	adds	r0, #1
 800953e:	d0ab      	beq.n	8009498 <_printf_i+0x164>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	079b      	lsls	r3, r3, #30
 8009544:	d413      	bmi.n	800956e <_printf_i+0x23a>
 8009546:	68e0      	ldr	r0, [r4, #12]
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	4298      	cmp	r0, r3
 800954c:	bfb8      	it	lt
 800954e:	4618      	movlt	r0, r3
 8009550:	e7a4      	b.n	800949c <_printf_i+0x168>
 8009552:	2301      	movs	r3, #1
 8009554:	4632      	mov	r2, r6
 8009556:	4649      	mov	r1, r9
 8009558:	4640      	mov	r0, r8
 800955a:	47d0      	blx	sl
 800955c:	3001      	adds	r0, #1
 800955e:	d09b      	beq.n	8009498 <_printf_i+0x164>
 8009560:	3501      	adds	r5, #1
 8009562:	68e3      	ldr	r3, [r4, #12]
 8009564:	9903      	ldr	r1, [sp, #12]
 8009566:	1a5b      	subs	r3, r3, r1
 8009568:	42ab      	cmp	r3, r5
 800956a:	dcf2      	bgt.n	8009552 <_printf_i+0x21e>
 800956c:	e7eb      	b.n	8009546 <_printf_i+0x212>
 800956e:	2500      	movs	r5, #0
 8009570:	f104 0619 	add.w	r6, r4, #25
 8009574:	e7f5      	b.n	8009562 <_printf_i+0x22e>
 8009576:	bf00      	nop
 8009578:	0800968d 	.word	0x0800968d
 800957c:	0800969e 	.word	0x0800969e

08009580 <__retarget_lock_acquire_recursive>:
 8009580:	4770      	bx	lr

08009582 <__retarget_lock_release_recursive>:
 8009582:	4770      	bx	lr

08009584 <memcpy>:
 8009584:	440a      	add	r2, r1
 8009586:	4291      	cmp	r1, r2
 8009588:	f100 33ff 	add.w	r3, r0, #4294967295
 800958c:	d100      	bne.n	8009590 <memcpy+0xc>
 800958e:	4770      	bx	lr
 8009590:	b510      	push	{r4, lr}
 8009592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800959a:	4291      	cmp	r1, r2
 800959c:	d1f9      	bne.n	8009592 <memcpy+0xe>
 800959e:	bd10      	pop	{r4, pc}

080095a0 <memmove>:
 80095a0:	4288      	cmp	r0, r1
 80095a2:	b510      	push	{r4, lr}
 80095a4:	eb01 0402 	add.w	r4, r1, r2
 80095a8:	d902      	bls.n	80095b0 <memmove+0x10>
 80095aa:	4284      	cmp	r4, r0
 80095ac:	4623      	mov	r3, r4
 80095ae:	d807      	bhi.n	80095c0 <memmove+0x20>
 80095b0:	1e43      	subs	r3, r0, #1
 80095b2:	42a1      	cmp	r1, r4
 80095b4:	d008      	beq.n	80095c8 <memmove+0x28>
 80095b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095be:	e7f8      	b.n	80095b2 <memmove+0x12>
 80095c0:	4402      	add	r2, r0
 80095c2:	4601      	mov	r1, r0
 80095c4:	428a      	cmp	r2, r1
 80095c6:	d100      	bne.n	80095ca <memmove+0x2a>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095d2:	e7f7      	b.n	80095c4 <memmove+0x24>

080095d4 <_realloc_r>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	4607      	mov	r7, r0
 80095d8:	4614      	mov	r4, r2
 80095da:	460e      	mov	r6, r1
 80095dc:	b921      	cbnz	r1, 80095e8 <_realloc_r+0x14>
 80095de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095e2:	4611      	mov	r1, r2
 80095e4:	f7ff bc46 	b.w	8008e74 <_malloc_r>
 80095e8:	b922      	cbnz	r2, 80095f4 <_realloc_r+0x20>
 80095ea:	f7ff fbf3 	bl	8008dd4 <_free_r>
 80095ee:	4625      	mov	r5, r4
 80095f0:	4628      	mov	r0, r5
 80095f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f4:	f000 f814 	bl	8009620 <_malloc_usable_size_r>
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d20f      	bcs.n	800961c <_realloc_r+0x48>
 80095fc:	4621      	mov	r1, r4
 80095fe:	4638      	mov	r0, r7
 8009600:	f7ff fc38 	bl	8008e74 <_malloc_r>
 8009604:	4605      	mov	r5, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	d0f2      	beq.n	80095f0 <_realloc_r+0x1c>
 800960a:	4631      	mov	r1, r6
 800960c:	4622      	mov	r2, r4
 800960e:	f7ff ffb9 	bl	8009584 <memcpy>
 8009612:	4631      	mov	r1, r6
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff fbdd 	bl	8008dd4 <_free_r>
 800961a:	e7e9      	b.n	80095f0 <_realloc_r+0x1c>
 800961c:	4635      	mov	r5, r6
 800961e:	e7e7      	b.n	80095f0 <_realloc_r+0x1c>

08009620 <_malloc_usable_size_r>:
 8009620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009624:	1f18      	subs	r0, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	bfbc      	itt	lt
 800962a:	580b      	ldrlt	r3, [r1, r0]
 800962c:	18c0      	addlt	r0, r0, r3
 800962e:	4770      	bx	lr

08009630 <_init>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	bf00      	nop
 8009634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009636:	bc08      	pop	{r3}
 8009638:	469e      	mov	lr, r3
 800963a:	4770      	bx	lr

0800963c <_fini>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr
