
Maryna03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800d608  0800d608  0001d608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daac  0800daac  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dab4  0800dab4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dab8  0800dab8  0001dab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800dabc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002020c  2**0
                  CONTENTS
 10 .bss          00000910  2000020c  2000020c  0002020c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b1c  20000b1c  0002020c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002424d  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e7c  00000000  00000000  00044489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00049308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a0  00000000  00000000  0004a878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f7c  00000000  00000000  0004bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f04d  00000000  00000000  00071b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf718  00000000  00000000  00090be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001602f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068fc  00000000  00000000  0016034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5f0 	.word	0x0800d5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800d5f0 	.word	0x0800d5f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LIS302DL_WriteIO>:
static float zScale = 1.0f;

//Private functions
//Write IO
void LIS302DL_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	73fb      	strb	r3, [r7, #15]
	_LIS302DL_CS_ENBALE;
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LIS302DL_WriteIO+0x4c>)
 8000eba:	f001 fce7 	bl	800288c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000ebe:	f107 010f 	add.w	r1, r7, #15
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <LIS302DL_WriteIO+0x50>)
 8000ec8:	f004 fe8b 	bl	8005be2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <LIS302DL_WriteIO+0x50>)
 8000ed6:	f004 fe84 	bl	8005be2 <HAL_SPI_Transmit>
	_LIS302DL_CS_DISABLE;
 8000eda:	2201      	movs	r2, #1
 8000edc:	2108      	movs	r1, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <LIS302DL_WriteIO+0x4c>)
 8000ee0:	f001 fcd4 	bl	800288c <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	20000228 	.word	0x20000228

08000ef4 <LIS302DL_ReadIO>:

//Read IO
void LIS302DL_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	723b      	strb	r3, [r7, #8]
	_LIS302DL_CS_ENBALE;
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2108      	movs	r1, #8
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <LIS302DL_ReadIO+0x84>)
 8000f14:	f001 fcba 	bl	800288c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f18:	f107 0108 	add.w	r1, r7, #8
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4816      	ldr	r0, [pc, #88]	; (8000f7c <LIS302DL_ReadIO+0x88>)
 8000f22:	f004 fe5e 	bl	8005be2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f107 0108 	add.w	r1, r7, #8
 8000f2e:	230a      	movs	r3, #10
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <LIS302DL_ReadIO+0x88>)
 8000f32:	f004 ff92 	bl	8005e5a <HAL_SPI_Receive>
	_LIS302DL_CS_DISABLE;
 8000f36:	2201      	movs	r2, #1
 8000f38:	2108      	movs	r1, #8
 8000f3a:	480f      	ldr	r0, [pc, #60]	; (8000f78 <LIS302DL_ReadIO+0x84>)
 8000f3c:	f001 fca6 	bl	800288c <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e00c      	b.n	8000f60 <LIS302DL_ReadIO+0x6c>
	{
		dataR[i] = spiBuf[i];
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f107 0110 	add.w	r1, r7, #16
 8000f52:	440a      	add	r2, r1
 8000f54:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f58:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbec      	blt.n	8000f46 <LIS302DL_ReadIO+0x52>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	20000228 	.word	0x20000228

08000f80 <LIS302DL_Init>:

//Accelerometer initialise function
void LIS302DL_Init(SPI_HandleTypeDef *accSPI, LIS302DL_InitTypeDef *accInitDef)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]

	uint8_t spiData;

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000f8a:	2258      	movs	r2, #88	; 0x58
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4847      	ldr	r0, [pc, #284]	; (80010ac <LIS302DL_Init+0x12c>)
 8000f90:	f009 fc9c 	bl	800a8cc <memcpy>
	//CTRL_REG1 forming
	spiData = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->dataRate) spiData |= 0x80;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <LIS302DL_Init+0x2a>
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->powerDown) spiData |= 0x40;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <LIS302DL_Init+0x3c>
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->fullScale) spiData |= 0x20;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	789b      	ldrb	r3, [r3, #2]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <LIS302DL_Init+0x4e>
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	f043 0320 	orr.w	r3, r3, #32
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->enableAxes & 0x07);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]
	//Write CTRL_REG1 and serial echo
	LIS302DL_WriteIO(LIS302DL_CTRL_REG1_ADDR, &spiData, 1);
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f7ff ff56 	bl	8000ea0 <LIS302DL_WriteIO>
	sprintf(uartBuffer ,"REG1: 0x%0X\n\r", spiData);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	492d      	ldr	r1, [pc, #180]	; (80010b0 <LIS302DL_Init+0x130>)
 8000ffa:	482e      	ldr	r0, [pc, #184]	; (80010b4 <LIS302DL_Init+0x134>)
 8000ffc:	f00a f9a0 	bl	800b340 <siprintf>
	uartLog(uartBuffer);
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <LIS302DL_Init+0x134>)
 8001002:	f000 ffb1 	bl	8001f68 <uartLog>

	//CTRL_REG2 forming
	spiData = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->serialInterfaceMode) spiData |= 0x80;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <LIS302DL_Init+0x9c>
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->rebootMemory) spiData |= 0x40;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <LIS302DL_Init+0xae>
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->filterConfig) spiData |= 0x1F;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	799b      	ldrb	r3, [r3, #6]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <LIS302DL_Init+0xc0>
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 031f 	orr.w	r3, r3, #31
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
	LIS302DL_WriteIO(LIS302DL_CTRL_REG2_ADDR, &spiData, 1);
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	2021      	movs	r0, #33	; 0x21
 800104a:	f7ff ff29 	bl	8000ea0 <LIS302DL_WriteIO>
	//Write CTRL_REG2 and serial echo
	sprintf(uartBuffer ,"REG2: 0x%0X\n\r", spiData);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	461a      	mov	r2, r3
 8001052:	4919      	ldr	r1, [pc, #100]	; (80010b8 <LIS302DL_Init+0x138>)
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <LIS302DL_Init+0x134>)
 8001056:	f00a f973 	bl	800b340 <siprintf>
	uartLog(uartBuffer);
 800105a:	4816      	ldr	r0, [pc, #88]	; (80010b4 <LIS302DL_Init+0x134>)
 800105c:	f000 ff84 	bl	8001f68 <uartLog>

	if (accInitDef->interruptConfig)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	79db      	ldrb	r3, [r3, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d012      	beq.n	800108e <LIS302DL_Init+0x10e>
		{
			//CTRL_REG3 forming
			spiData = accInitDef->interruptConfig;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	79db      	ldrb	r3, [r3, #7]
 800106c:	73fb      	strb	r3, [r7, #15]
			//Write CTRL_REG3 and serial echo
			LIS302DL_WriteIO(LIS302DL_CTRL_REG3_ADDR, &spiData, 1);
 800106e:	f107 030f 	add.w	r3, r7, #15
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	2022      	movs	r0, #34	; 0x22
 8001078:	f7ff ff12 	bl	8000ea0 <LIS302DL_WriteIO>
			sprintf(uartBuffer ,"REG3: 0x%0X\n\r", spiData);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	461a      	mov	r2, r3
 8001080:	490e      	ldr	r1, [pc, #56]	; (80010bc <LIS302DL_Init+0x13c>)
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LIS302DL_Init+0x134>)
 8001084:	f00a f95c 	bl	800b340 <siprintf>
			uartLog(uartBuffer);
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <LIS302DL_Init+0x134>)
 800108a:	f000 ff6d 	bl	8001f68 <uartLog>
		}
	//Assign sensor sensitivity
	if (accInitDef->fullScale)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <LIS302DL_Init+0x11e>
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_018G;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <LIS302DL_Init+0x140>)
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LIS302DL_Init+0x144>)
 800109a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
	}
}
 800109c:	e002      	b.n	80010a4 <LIS302DL_Init+0x124>
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LIS302DL_Init+0x140>)
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <LIS302DL_Init+0x148>)
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000228 	.word	0x20000228
 80010b0:	0800d608 	.word	0x0800d608
 80010b4:	2000029c 	.word	0x2000029c
 80010b8:	0800d618 	.word	0x0800d618
 80010bc:	0800d628 	.word	0x0800d628
 80010c0:	20000000 	.word	0x20000000
 80010c4:	3c9374bc 	.word	0x3c9374bc
 80010c8:	3d9374bc 	.word	0x3d9374bc

080010cc <LIS302DL_GetDataRaw>:

//Get Accelerometer raw data
LIS302DL_DataRaw LIS302DL_GetDataRaw(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	LIS302DL_DataRaw tempDataRaw;
	LIS302DL_ReadIO(LIS302DL_OUT_X_ADDR, &tempDataRaw.x, 1);
 80010d2:	463b      	mov	r3, r7
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	2029      	movs	r0, #41	; 0x29
 80010da:	f7ff ff0b 	bl	8000ef4 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Y_ADDR, &tempDataRaw.y, 1);
 80010de:	463b      	mov	r3, r7
 80010e0:	3301      	adds	r3, #1
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	202b      	movs	r0, #43	; 0x2b
 80010e8:	f7ff ff04 	bl	8000ef4 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Z_ADDR, &tempDataRaw.z, 1);
 80010ec:	463b      	mov	r3, r7
 80010ee:	3302      	adds	r3, #2
 80010f0:	2201      	movs	r2, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	202d      	movs	r0, #45	; 0x2d
 80010f6:	f7ff fefd 	bl	8000ef4 <LIS302DL_ReadIO>
	return tempDataRaw;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	463a      	mov	r2, r7
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4611      	mov	r1, r2
 8001102:	8019      	strh	r1, [r3, #0]
 8001104:	3302      	adds	r3, #2
 8001106:	0c12      	lsrs	r2, r2, #16
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	793a      	ldrb	r2, [r7, #4]
 800110e:	f362 0307 	bfi	r3, r2, #0, #8
 8001112:	797a      	ldrb	r2, [r7, #5]
 8001114:	f362 230f 	bfi	r3, r2, #8, #8
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <LIS302DL_GetDataScaled>:
//Get Accelerometer scaled data [g]
LIS302DL_DataScaled LIS302DL_GetDataScaled(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0

	LIS302DL_DataRaw tempRawData = LIS302DL_GetDataRaw();
 800112e:	f7ff ffcd 	bl	80010cc <LIS302DL_GetDataRaw>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	f887 2020 	strb.w	r2, [r7, #32]
 800113a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800113e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8001142:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001146:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	LIS302DL_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * LIS302DL_Sensitivity * xScale) + 0.0f - xOffset;
 800114a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <LIS302DL_GetDataScaled+0xf8>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <LIS302DL_GetDataScaled+0xfc>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001228 <LIS302DL_GetDataScaled+0x100>
 800116e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <LIS302DL_GetDataScaled+0x104>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117c:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.y = (tempRawData.y * LIS302DL_Sensitivity * yScale) + 0.0f - yOffset;
 8001180:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <LIS302DL_GetDataScaled+0xf8>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <LIS302DL_GetDataScaled+0x108>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001228 <LIS302DL_GetDataScaled+0x100>
 80011a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <LIS302DL_GetDataScaled+0x10c>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	edc7 7a06 	vstr	s15, [r7, #24]
	tempScaledData.z = (tempRawData.z * LIS302DL_Sensitivity * zScale) + 0.0f - zOffset;
 80011b6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <LIS302DL_GetDataScaled+0xf8>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <LIS302DL_GetDataScaled+0x110>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001228 <LIS302DL_GetDataScaled+0x100>
 80011da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <LIS302DL_GetDataScaled+0x114>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc7 7a07 	vstr	s15, [r7, #28]

	return tempScaledData;
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	f107 0214 	add.w	r2, r7, #20
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	ee06 1a90 	vmov	s13, r1
 8001204:	ee07 2a10 	vmov	s14, r2
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a66 	vmov.f32	s0, s13
 8001210:	eef0 0a47 	vmov.f32	s1, s14
 8001214:	eeb0 1a67 	vmov.f32	s2, s15
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004
 8001228:	00000000 	.word	0x00000000
 800122c:	20000280 	.word	0x20000280
 8001230:	20000008 	.word	0x20000008
 8001234:	20000284 	.word	0x20000284
 8001238:	2000000c 	.word	0x2000000c
 800123c:	20000288 	.word	0x20000288

08001240 <LIS302DL_PollDRDY>:
//Poll for Data Ready
bool LIS302DL_PollDRDY(uint32_t msTimeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 8001248:	f000 ffb0 	bl	80021ac <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS302DL_ReadIO(LIS302DL_STATUS_ADDR, &Acc_status, 1);
 800124e:	f107 030b 	add.w	r3, r7, #11
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	2027      	movs	r0, #39	; 0x27
 8001258:	f7ff fe4c 	bl	8000ef4 <LIS302DL_ReadIO>
		if (Acc_status & 0x07) break;
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10d      	bne.n	8001282 <LIS302DL_PollDRDY+0x42>
	}
	while ((Acc_status & 0x07) == 0 && (HAL_GetTick() - startTick) < msTimeout);
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <LIS302DL_PollDRDY+0x44>
 8001270:	f000 ff9c 	bl	80021ac <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8e6      	bhi.n	800124e <LIS302DL_PollDRDY+0xe>
 8001280:	e000      	b.n	8001284 <LIS302DL_PollDRDY+0x44>
		if (Acc_status & 0x07) break;
 8001282:	bf00      	nop
	if (Acc_status & 0x07)
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <LIS302DL_PollDRDY+0x52>
	{
		return true;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LIS302DL_PollDRDY+0x54>
	}
	return false;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <LIS302DL_X_calibrate>:

//** Calibration functions **//
//X-Axis calibrate
void LIS302DL_X_calibrate(float x_min, float x_max)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012a6:	edc7 0a00 	vstr	s1, [r7]
	xOffset = (x_max + x_min) / 2.0f;
 80012aa:	ed97 7a00 	vldr	s14, [r7]
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <LIS302DL_X_calibrate+0x50>)
 80012c0:	edc3 7a00 	vstr	s15, [r3]
	xScale = 2.0f / (x_max - x_min);
 80012c4:	ed97 7a00 	vldr	s14, [r7]
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <LIS302DL_X_calibrate+0x54>)
 80012da:	edc3 7a00 	vstr	s15, [r3]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000280 	.word	0x20000280
 80012f0:	20000004 	.word	0x20000004

080012f4 <LIS302DL_Y_calibrate>:
//Y-Axis calibrate
void LIS302DL_Y_calibrate(float y_min, float y_max)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012fe:	edc7 0a00 	vstr	s1, [r7]
	yOffset = (y_max + y_min) / 2.0f;
 8001302:	ed97 7a00 	vldr	s14, [r7]
 8001306:	edd7 7a01 	vldr	s15, [r7, #4]
 800130a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LIS302DL_Y_calibrate+0x50>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
	yScale = 2.0f / (y_max - y_min);
 800131c:	ed97 7a00 	vldr	s14, [r7]
 8001320:	edd7 7a01 	vldr	s15, [r7, #4]
 8001324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001328:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LIS302DL_Y_calibrate+0x54>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000284 	.word	0x20000284
 8001348:	20000008 	.word	0x20000008

0800134c <LIS302DL_Z_calibrate>:
//Z-Axis calibrate
void LIS302DL_Z_calibrate(float z_min, float z_max)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
 8001356:	edc7 0a00 	vstr	s1, [r7]
	zOffset = (z_max + z_min) / 2.0f;
 800135a:	ed97 7a00 	vldr	s14, [r7]
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800136a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <LIS302DL_Z_calibrate+0x50>)
 8001370:	edc3 7a00 	vstr	s15, [r3]
	zScale = 2.0f / (z_max - z_min);
 8001374:	ed97 7a00 	vldr	s14, [r7]
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LIS302DL_Z_calibrate+0x54>)
 800138a:	edc3 7a00 	vstr	s15, [r3]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000288 	.word	0x20000288
 80013a0:	2000000c 	.word	0x2000000c

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4b61      	ldr	r3, [pc, #388]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a60      	ldr	r2, [pc, #384]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a59      	ldr	r2, [pc, #356]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b57      	ldr	r3, [pc, #348]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a52      	ldr	r2, [pc, #328]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b50      	ldr	r3, [pc, #320]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a4b      	ldr	r2, [pc, #300]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b45      	ldr	r3, [pc, #276]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a44      	ldr	r2, [pc, #272]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <MX_GPIO_Init+0x1a0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <MX_GPIO_Init+0x1a0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2108      	movs	r1, #8
 8001466:	4838      	ldr	r0, [pc, #224]	; (8001548 <MX_GPIO_Init+0x1a4>)
 8001468:	f001 fa10 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2101      	movs	r1, #1
 8001470:	4836      	ldr	r0, [pc, #216]	; (800154c <MX_GPIO_Init+0x1a8>)
 8001472:	f001 fa0b 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001476:	2200      	movs	r2, #0
 8001478:	f24f 0110 	movw	r1, #61456	; 0xf010
 800147c:	4834      	ldr	r0, [pc, #208]	; (8001550 <MX_GPIO_Init+0x1ac>)
 800147e:	f001 fa05 	bl	800288c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001482:	2308      	movs	r3, #8
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	482b      	ldr	r0, [pc, #172]	; (8001548 <MX_GPIO_Init+0x1a4>)
 800149a:	f001 f85b 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800149e:	2301      	movs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4825      	ldr	r0, [pc, #148]	; (800154c <MX_GPIO_Init+0x1a8>)
 80014b6:	f001 f84d 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <MX_GPIO_Init+0x1b0>)
 80014d0:	f001 f840 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014d4:	2304      	movs	r3, #4
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	481c      	ldr	r0, [pc, #112]	; (8001558 <MX_GPIO_Init+0x1b4>)
 80014e8:	f001 f834 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ec:	f24f 0310 	movw	r3, #61456	; 0xf010
 80014f0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <MX_GPIO_Init+0x1ac>)
 8001506:	f001 f825 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800150a:	2320      	movs	r3, #32
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x1ac>)
 800151e:	f001 f819 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001526:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0x1a4>)
 8001538:	f001 f80c 	bl	8002554 <HAL_GPIO_Init>

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40021000 	.word	0x40021000
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400

0800155c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C1_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <MX_I2C1_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_I2C1_Init+0x50>)
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x58>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_I2C1_Init+0x50>)
 800157a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_I2C1_Init+0x50>)
 800159a:	f002 ff01 	bl	80043a0 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 fb1e 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200002d0 	.word	0x200002d0
 80015b0:	40005400 	.word	0x40005400
 80015b4:	000186a0 	.word	0x000186a0

080015b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_I2C_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12c      	bne.n	8001634 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001608:	2304      	movs	r3, #4
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_I2C_MspInit+0x8c>)
 8001614:	f000 ff9e 	bl	8002554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_I2C_MspInit+0x88>)
 8001622:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_I2S3_Init+0x54>)
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <MX_I2S3_Init+0x58>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_I2S3_Init+0x54>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_I2S3_Init+0x54>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_I2S3_Init+0x54>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_I2S3_Init+0x54>)
 8001668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_I2S3_Init+0x54>)
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <MX_I2S3_Init+0x5c>)
 8001672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_I2S3_Init+0x54>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_I2S3_Init+0x54>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_I2S3_Init+0x54>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_I2S3_Init+0x54>)
 8001688:	f002 ffce 	bl	8004628 <HAL_I2S_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001692:	f000 faa7 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000324 	.word	0x20000324
 80016a0:	40003c00 	.word	0x40003c00
 80016a4:	00017700 	.word	0x00017700

080016a8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a31      	ldr	r2, [pc, #196]	; (8001798 <HAL_I2S_MspInit+0xf0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d15a      	bne.n	800178e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016d8:	2301      	movs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 f8b1 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016f4:	f000 fa76 	bl	8001be4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_I2S_MspInit+0xf4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a26      	ldr	r2, [pc, #152]	; (800179c <HAL_I2S_MspInit+0xf4>)
 8001702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_I2S_MspInit+0xf4>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_I2S_MspInit+0xf4>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_I2S_MspInit+0xf4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_I2S_MspInit+0xf4>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_I2S_MspInit+0xf4>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_I2S_MspInit+0xf4>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_I2S_MspInit+0xf4>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800174c:	2310      	movs	r3, #16
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800175c:	2306      	movs	r3, #6
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <HAL_I2S_MspInit+0xf8>)
 8001768:	f000 fef4 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800176c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800177e:	2306      	movs	r3, #6
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_I2S_MspInit+0xfc>)
 800178a:	f000 fee3 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3738      	adds	r7, #56	; 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40003c00 	.word	0x40003c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020800 	.word	0x40020800

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ac:	f000 fc98 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b0:	f000 f878 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b4:	f7ff fdf6 	bl	80013a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017b8:	f7ff fed0 	bl	800155c <MX_I2C1_Init>
  MX_I2S3_Init();
 80017bc:	f7ff ff44 	bl	8001648 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80017c0:	f008 fd42 	bl	800a248 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80017c4:	f000 fbe8 	bl	8001f98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017c8:	f000 fa12 	bl	8001bf0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  myAccel.dataRate=LIS302DL_DATARATE_400;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <main+0xd8>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
  myAccel.powerDown=LIS302DL_ACTIVE;
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <main+0xd8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	705a      	strb	r2, [r3, #1]
  myAccel.fullScale=LIS302DL_FULLSCALE_2;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <main+0xd8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	709a      	strb	r2, [r3, #2]
  myAccel.enableAxes=LIS302DL_XYZ_ENABLE;
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <main+0xd8>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	70da      	strb	r2, [r3, #3]
  myAccel.serialInterfaceMode=LIS302DL_SERIAL_INTERFACE_4WIRE;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <main+0xd8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	711a      	strb	r2, [r3, #4]
  myAccel.rebootMemory=LIS302DL_BOOT_NORMAL_MODE;
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <main+0xd8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	715a      	strb	r2, [r3, #5]
  myAccel.filterConfig=LIS302DL_FILTERING_NONE;
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <main+0xd8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	719a      	strb	r2, [r3, #6]
  myAccel.interruptConfig=LIS302DL_INTERRUPT_NONE;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <main+0xd8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	71da      	strb	r2, [r3, #7]
  LIS302DL_Init(&hspi1, &myAccel);
 80017fc:	4920      	ldr	r1, [pc, #128]	; (8001880 <main+0xd8>)
 80017fe:	4821      	ldr	r0, [pc, #132]	; (8001884 <main+0xdc>)
 8001800:	f7ff fbbe 	bl	8000f80 <LIS302DL_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	shiftHyst1 = 0.5f;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <main+0xe0>)
 8001806:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800180a:	601a      	str	r2, [r3, #0]
	shiftHyst2= 2 * shiftHyst1;
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <main+0xe0>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <main+0xe4>)
 8001818:	edc3 7a00 	vstr	s15, [r3]

	//pre-calibration
	LIS302DL_X_calibrate(0.98, -1.00);
 800181c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001820:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001890 <main+0xe8>
 8001824:	f7ff fd3a 	bl	800129c <LIS302DL_X_calibrate>
	LIS302DL_Y_calibrate(1.04, -1.04);
 8001828:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001894 <main+0xec>
 800182c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001898 <main+0xf0>
 8001830:	f7ff fd60 	bl	80012f4 <LIS302DL_Y_calibrate>
	LIS302DL_Z_calibrate(1.25, -0.87);
 8001834:	eddf 0a19 	vldr	s1, [pc, #100]	; 800189c <main+0xf4>
 8001838:	eeb7 0a04 	vmov.f32	s0, #116	; 0x3fa00000  1.250
 800183c:	f7ff fd86 	bl	800134c <LIS302DL_Z_calibrate>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001840:	f008 fd28 	bl	800a294 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    	if (LIS302DL_PollDRDY(1))
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff fcfb 	bl	8001240 <LIS302DL_PollDRDY>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <main+0xd0>
    	{
			myData=LIS302DL_GetDataScaled();
 8001850:	f7ff fc6a 	bl	8001128 <LIS302DL_GetDataScaled>
 8001854:	eef0 6a40 	vmov.f32	s13, s0
 8001858:	eeb0 7a60 	vmov.f32	s14, s1
 800185c:	eef0 7a41 	vmov.f32	s15, s2
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <main+0xf8>)
 8001862:	edc3 6a00 	vstr	s13, [r3]
 8001866:	ed83 7a01 	vstr	s14, [r3, #4]
 800186a:	edc3 7a02 	vstr	s15, [r3, #8]
			showUartTilt();
 800186e:	f000 f883 	bl	8001978 <showUartTilt>
			showLedTilt();
 8001872:	f000 f8b1 	bl	80019d8 <showLedTilt>
 8001876:	e7e3      	b.n	8001840 <main+0x98>
    	}
    	else
    	{
    		showErrorRaport();
 8001878:	f000 f96c 	bl	8001b54 <showErrorRaport>
    MX_USB_HOST_Process();
 800187c:	e7e0      	b.n	8001840 <main+0x98>
 800187e:	bf00      	nop
 8001880:	20000388 	.word	0x20000388
 8001884:	20000390 	.word	0x20000390
 8001888:	20000380 	.word	0x20000380
 800188c:	20000370 	.word	0x20000370
 8001890:	3f7ae148 	.word	0x3f7ae148
 8001894:	bf851eb8 	.word	0xbf851eb8
 8001898:	3f851eb8 	.word	0x3f851eb8
 800189c:	bf5eb852 	.word	0xbf5eb852
 80018a0:	20000374 	.word	0x20000374

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2230      	movs	r2, #48	; 0x30
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f009 f818 	bl	800a8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <SystemClock_Config+0xcc>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <SystemClock_Config+0xcc>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <SystemClock_Config+0xd0>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <SystemClock_Config+0xd0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001900:	2301      	movs	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190a:	2302      	movs	r3, #2
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001914:	2308      	movs	r3, #8
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001918:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001922:	2307      	movs	r3, #7
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fb1c 	bl	8004f68 <HAL_RCC_OscConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001936:	f000 f955 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193e:	2302      	movs	r3, #2
 8001940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001946:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800194a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2105      	movs	r1, #5
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fd7d 	bl	8005458 <HAL_RCC_ClockConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001964:	f000 f93e 	bl	8001be4 <Error_Handler>
  }
}
 8001968:	bf00      	nop
 800196a:	3750      	adds	r7, #80	; 0x50
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <showUartTilt>:

/* USER CODE BEGIN 4 */
void showUartTilt(void)
{
 8001978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af04      	add	r7, sp, #16
	sprintf(uartBuffer,"x[g]=%+4.1f \ty[g]=%+4.1f \tz[g]=%+4.1f\n\r", myData.x, myData.y, myData.z);
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <showUartTilt+0x54>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddf 	bl	8000548 <__aeabi_f2d>
 800198a:	4680      	mov	r8, r0
 800198c:	4689      	mov	r9, r1
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <showUartTilt+0x54>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd8 	bl	8000548 <__aeabi_f2d>
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <showUartTilt+0x54>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd1 	bl	8000548 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019ae:	e9cd 4500 	strd	r4, r5, [sp]
 80019b2:	4642      	mov	r2, r8
 80019b4:	464b      	mov	r3, r9
 80019b6:	4906      	ldr	r1, [pc, #24]	; (80019d0 <showUartTilt+0x58>)
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <showUartTilt+0x5c>)
 80019ba:	f009 fcc1 	bl	800b340 <siprintf>
	uartLog(uartBuffer);
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <showUartTilt+0x5c>)
 80019c0:	f000 fad2 	bl	8001f68 <uartLog>
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019cc:	20000374 	.word	0x20000374
 80019d0:	0800d638 	.word	0x0800d638
 80019d4:	2000029c 	.word	0x2000029c

080019d8 <showLedTilt>:

void showLedTilt(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	if (myData.y > 0)
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <showLedTilt+0x16c>)
 80019de:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	dd21      	ble.n	8001a30 <showLedTilt+0x58>
	{
		if (myData.y > shiftHyst2)
 80019ec:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <showLedTilt+0x16c>)
 80019ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f2:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <showLedTilt+0x170>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	dd05      	ble.n	8001a0e <showLedTilt+0x36>
		{
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a08:	4850      	ldr	r0, [pc, #320]	; (8001b4c <showLedTilt+0x174>)
 8001a0a:	f000 ff3f 	bl	800288c <HAL_GPIO_WritePin>
		}
		if (myData.y < shiftHyst1)
 8001a0e:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <showLedTilt+0x16c>)
 8001a10:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a14:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <showLedTilt+0x178>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d505      	bpl.n	8001a30 <showLedTilt+0x58>
		{
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2a:	4848      	ldr	r0, [pc, #288]	; (8001b4c <showLedTilt+0x174>)
 8001a2c:	f000 ff2e 	bl	800288c <HAL_GPIO_WritePin>
		}
	}

	if (myData.y < 0)
 8001a30:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <showLedTilt+0x16c>)
 8001a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d525      	bpl.n	8001a8c <showLedTilt+0xb4>
	{
		if (myData.y < -shiftHyst2)
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <showLedTilt+0x16c>)
 8001a42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <showLedTilt+0x170>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eef1 7a67 	vneg.f32	s15, s15
 8001a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	d505      	bpl.n	8001a66 <showLedTilt+0x8e>
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a60:	483a      	ldr	r0, [pc, #232]	; (8001b4c <showLedTilt+0x174>)
 8001a62:	f000 ff13 	bl	800288c <HAL_GPIO_WritePin>
		}
		if (myData.y > -shiftHyst1)
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <showLedTilt+0x16c>)
 8001a68:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <showLedTilt+0x178>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eef1 7a67 	vneg.f32	s15, s15
 8001a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	dd05      	ble.n	8001a8c <showLedTilt+0xb4>
		{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a86:	4831      	ldr	r0, [pc, #196]	; (8001b4c <showLedTilt+0x174>)
 8001a88:	f000 ff00 	bl	800288c <HAL_GPIO_WritePin>
		}
	}

	if (myData.x > 0)
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <showLedTilt+0x16c>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	dd21      	ble.n	8001ae0 <showLedTilt+0x108>
	{
		if (myData.x > shiftHyst2)
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <showLedTilt+0x16c>)
 8001a9e:	ed93 7a00 	vldr	s14, [r3]
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <showLedTilt+0x170>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	dd05      	ble.n	8001abe <showLedTilt+0xe6>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab8:	4824      	ldr	r0, [pc, #144]	; (8001b4c <showLedTilt+0x174>)
 8001aba:	f000 fee7 	bl	800288c <HAL_GPIO_WritePin>
		}
		if (myData.x < shiftHyst1)
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <showLedTilt+0x16c>)
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <showLedTilt+0x178>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d505      	bpl.n	8001ae0 <showLedTilt+0x108>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ada:	481c      	ldr	r0, [pc, #112]	; (8001b4c <showLedTilt+0x174>)
 8001adc:	f000 fed6 	bl	800288c <HAL_GPIO_WritePin>
		}
	}

	if (myData.x < 0)
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <showLedTilt+0x16c>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	d400      	bmi.n	8001af2 <showLedTilt+0x11a>
		if (myData.x > -shiftHyst1)
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
		}
	}
}
 8001af0:	e026      	b.n	8001b40 <showLedTilt+0x168>
		if (myData.x < -shiftHyst2)
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <showLedTilt+0x16c>)
 8001af4:	ed93 7a00 	vldr	s14, [r3]
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <showLedTilt+0x170>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eef1 7a67 	vneg.f32	s15, s15
 8001b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d505      	bpl.n	8001b18 <showLedTilt+0x140>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <showLedTilt+0x174>)
 8001b14:	f000 feba 	bl	800288c <HAL_GPIO_WritePin>
		if (myData.x > -shiftHyst1)
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <showLedTilt+0x16c>)
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <showLedTilt+0x178>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	eef1 7a67 	vneg.f32	s15, s15
 8001b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	dc00      	bgt.n	8001b34 <showLedTilt+0x15c>
}
 8001b32:	e005      	b.n	8001b40 <showLedTilt+0x168>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <showLedTilt+0x174>)
 8001b3c:	f000 fea6 	bl	800288c <HAL_GPIO_WritePin>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000374 	.word	0x20000374
 8001b48:	20000370 	.word	0x20000370
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	20000380 	.word	0x20000380

08001b54 <showErrorRaport>:
void showErrorRaport(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	//no data message
	sprintf(uartBuffer,"Timeout. No data from g-sensor.\n\r");
 8001b5a:	491d      	ldr	r1, [pc, #116]	; (8001bd0 <showErrorRaport+0x7c>)
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <showErrorRaport+0x80>)
 8001b5e:	f009 fbef 	bl	800b340 <siprintf>
	uartLog(uartBuffer);
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <showErrorRaport+0x80>)
 8001b64:	f000 fa00 	bl	8001f68 <uartLog>
	//push status registers do UART
	LIS302DL_ReadIO(LIS302DL_STATUS_ADDR, &spiBuf, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <showErrorRaport+0x84>)
 8001b6c:	2027      	movs	r0, #39	; 0x27
 8001b6e:	f7ff f9c1 	bl	8000ef4 <LIS302DL_ReadIO>
	sprintf(uartBuffer,"STAUS_REG: 0x%0X\n\r", spiBuf);
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <showErrorRaport+0x84>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4918      	ldr	r1, [pc, #96]	; (8001bdc <showErrorRaport+0x88>)
 8001b7a:	4816      	ldr	r0, [pc, #88]	; (8001bd4 <showErrorRaport+0x80>)
 8001b7c:	f009 fbe0 	bl	800b340 <siprintf>
	uartLog(uartBuffer);
 8001b80:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <showErrorRaport+0x80>)
 8001b82:	f000 f9f1 	bl	8001f68 <uartLog>
	for (int i = 0; i < 3; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e015      	b.n	8001bb8 <showErrorRaport+0x64>
	{
		LIS302DL_ReadIO(LIS302DL_CTRL_REG1_ADDR+i, &spiBuf, 1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3320      	adds	r3, #32
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2201      	movs	r2, #1
 8001b96:	4910      	ldr	r1, [pc, #64]	; (8001bd8 <showErrorRaport+0x84>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f9ab 	bl	8000ef4 <LIS302DL_ReadIO>
		sprintf(uartBuffer,"CTRL_REG%d: 0x%0X\n\r", i, spiBuf);
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <showErrorRaport+0x84>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <showErrorRaport+0x8c>)
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <showErrorRaport+0x80>)
 8001ba8:	f009 fbca 	bl	800b340 <siprintf>
		uartLog(uartBuffer);
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <showErrorRaport+0x80>)
 8001bae:	f000 f9db 	bl	8001f68 <uartLog>
	for (int i = 0; i < 3; i++)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	dde6      	ble.n	8001b8c <showErrorRaport+0x38>
	}
	HAL_Delay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc2:	f000 faff 	bl	80021c4 <HAL_Delay>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800d660 	.word	0x0800d660
 8001bd4:	2000029c 	.word	0x2000029c
 8001bd8:	2000036c 	.word	0x2000036c
 8001bdc:	0800d684 	.word	0x0800d684
 8001be0:	0800d698 	.word	0x0800d698

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	e7fe      	b.n	8001bec <Error_Handler+0x8>
	...

08001bf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <MX_SPI1_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c24:	2238      	movs	r2, #56	; 0x38
 8001c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c42:	f003 ff45 	bl	8005ad0 <HAL_SPI_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c4c:	f7ff ffca 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000390 	.word	0x20000390
 8001c58:	40013000 	.word	0x40013000

08001c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_SPI_MspInit+0x84>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d12b      	bne.n	8001cd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23e0      	movs	r3, #224	; 0xe0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001cd2:	f000 fc3f 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40013000 	.word	0x40013000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d2a:	2007      	movs	r0, #7
 8001d2c:	f000 fb3e 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f9fc 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <USART2_IRQHandler+0x10>)
 8001d96:	f004 fd23 	bl	80067e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200003e8 	.word	0x200003e8

08001da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <OTG_FS_IRQHandler+0x10>)
 8001daa:	f000 fff3 	bl	8002d94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000808 	.word	0x20000808

08001db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	return 1;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_kill>:

int _kill(int pid, int sig)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd2:	f008 fd41 	bl	800a858 <__errno>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2216      	movs	r2, #22
 8001dda:	601a      	str	r2, [r3, #0]
	return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_exit>:

void _exit (int status)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe7 	bl	8001dc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dfa:	e7fe      	b.n	8001dfa <_exit+0x12>

08001dfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
	}

return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
	}
	return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
	return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f008 fca6 	bl	800a858 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20020000 	.word	0x20020000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	2000028c 	.word	0x2000028c
 8001f40:	20000b20 	.word	0x20000b20

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <uartLog>:
#include "tools.h"
#include "string.h"
#include "usart.h"

void uartLog(char *message)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

	int lenght = strlen(message);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe f92d 	bl	80001d0 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, lenght, 1000);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <uartLog+0x2c>)
 8001f86:	f004 fb98 	bl	80066ba <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 1000);

}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200003e8 	.word	0x200003e8

08001f98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <MX_USART2_UART_Init+0x50>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	f004 fb26 	bl	8006620 <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fda:	f7ff fe03 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200003e8 	.word	0x200003e8
 8001fe8:	40004400 	.word	0x40004400

08001fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_UART_MspInit+0x94>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d133      	bne.n	8002076 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_UART_MspInit+0x98>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_UART_MspInit+0x98>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_UART_MspInit+0x98>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_UART_MspInit+0x98>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <HAL_UART_MspInit+0x98>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_UART_MspInit+0x98>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002046:	230c      	movs	r3, #12
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002056:	2307      	movs	r3, #7
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <HAL_UART_MspInit+0x9c>)
 8002062:	f000 fa77 	bl	8002554 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2026      	movs	r0, #38	; 0x26
 800206c:	f000 f9a9 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002070:	2026      	movs	r0, #38	; 0x26
 8002072:	f000 f9c2 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40004400 	.word	0x40004400
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800208c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a8:	4c0b      	ldr	r4, [pc, #44]	; (80020d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020b6:	f7ff ff45 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ba:	f008 fbd3 	bl	800a864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020be:	f7ff fb73 	bl	80017a8 <main>
  bx  lr    
 80020c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80020d0:	0800dabc 	.word	0x0800dabc
  ldr r2, =_sbss
 80020d4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80020d8:	20000b1c 	.word	0x20000b1c

080020dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_Init+0x40>)
 80020ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_Init+0x40>)
 80020f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_Init+0x40>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f94f 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210e:	2000      	movs	r0, #0
 8002110:	f000 f808 	bl	8002124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002114:	f7ff fdea 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00

08002124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x54>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x58>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f967 	bl	8002416 <HAL_SYSTICK_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00e      	b.n	8002170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d80a      	bhi.n	800216e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f000 f92f 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <HAL_InitTick+0x5c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000010 	.word	0x20000010
 800217c:	20000018 	.word	0x20000018
 8002180:	20000014 	.word	0x20000014

08002184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000018 	.word	0x20000018
 80021a8:	2000042c 	.word	0x2000042c

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000042c 	.word	0x2000042c

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_Delay+0x44>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000018 	.word	0x20000018

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff3e 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff8e 	bl	8002300 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5d 	bl	80022ac <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff31 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff feb6 	bl	80021ac <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d008      	beq.n	8002460 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e052      	b.n	8002506 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0216 	bic.w	r2, r2, #22
 800246e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <HAL_DMA_Abort+0x62>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b0:	e013      	b.n	80024da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b2:	f7ff fe7b 	bl	80021ac <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d90c      	bls.n	80024da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2203      	movs	r2, #3
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e015      	b.n	8002506 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e4      	bne.n	80024b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	223f      	movs	r2, #63	; 0x3f
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d004      	beq.n	800252c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e00c      	b.n	8002546 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2205      	movs	r2, #5
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e16b      	b.n	8002848 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 815a 	bne.w	8002842 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80b4 	beq.w	8002842 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_GPIO_Init+0x310>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x314>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_GPIO_Init+0x318>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_GPIO_Init+0x31c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4f      	ldr	r2, [pc, #316]	; (8002874 <HAL_GPIO_Init+0x320>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_GPIO_Init+0x324>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_GPIO_Init+0x328>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20a>
 800275a:	2307      	movs	r3, #7
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x228>
 800275e:	2308      	movs	r3, #8
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x228>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <HAL_GPIO_Init+0x310>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_GPIO_Init+0x334>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x334>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x334>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_GPIO_Init+0x334>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae90 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c0:	b08f      	sub	sp, #60	; 0x3c
 80028c2:	af0a      	add	r7, sp, #40	; 0x28
 80028c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e054      	b.n	800297a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f007 fd0a 	bl	800a304 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fe60 	bl	80075d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	687e      	ldr	r6, [r7, #4]
 800291c:	466d      	mov	r5, sp
 800291e:	f106 0410 	add.w	r4, r6, #16
 8002922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002932:	1d33      	adds	r3, r6, #4
 8002934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002936:	6838      	ldr	r0, [r7, #0]
 8002938:	f004 fdda 	bl	80074f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fe57 	bl	80075f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	687e      	ldr	r6, [r7, #4]
 8002950:	466d      	mov	r5, sp
 8002952:	f106 0410 	add.w	r4, r6, #16
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002962:	e885 0003 	stmia.w	r5, {r0, r1}
 8002966:	1d33      	adds	r3, r6, #4
 8002968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296a:	6838      	ldr	r0, [r7, #0]
 800296c:	f004 ffbe 	bl	80078ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002982 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002982:	b590      	push	{r4, r7, lr}
 8002984:	b089      	sub	sp, #36	; 0x24
 8002986:	af04      	add	r7, sp, #16
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	4608      	mov	r0, r1
 800298c:	4611      	mov	r1, r2
 800298e:	461a      	mov	r2, r3
 8002990:	4603      	mov	r3, r0
 8002992:	70fb      	strb	r3, [r7, #3]
 8002994:	460b      	mov	r3, r1
 8002996:	70bb      	strb	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_HCD_HC_Init+0x28>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e076      	b.n	8002a98 <HAL_HCD_HC_Init+0x116>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	333d      	adds	r3, #61	; 0x3d
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	787a      	ldrb	r2, [r7, #1]
 80029d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3340      	adds	r3, #64	; 0x40
 80029e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029e6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3339      	adds	r3, #57	; 0x39
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	333f      	adds	r3, #63	; 0x3f
 8002a08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	78ba      	ldrb	r2, [r7, #2]
 8002a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a16:	b2d0      	uxtb	r0, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333a      	adds	r3, #58	; 0x3a
 8002a24:	4602      	mov	r2, r0
 8002a26:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da09      	bge.n	8002a44 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	333b      	adds	r3, #59	; 0x3b
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e008      	b.n	8002a56 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	333b      	adds	r3, #59	; 0x3b
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	333c      	adds	r3, #60	; 0x3c
 8002a64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	787c      	ldrb	r4, [r7, #1]
 8002a70:	78ba      	ldrb	r2, [r7, #2]
 8002a72:	78f9      	ldrb	r1, [r7, #3]
 8002a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4623      	mov	r3, r4
 8002a86:	f005 f8ab 	bl	8007be0 <USB_HC_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_HCD_HC_Halt+0x1e>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e00f      	b.n	8002ade <HAL_HCD_HC_Halt+0x3e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f005 fae7 	bl	80080a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	70fb      	strb	r3, [r7, #3]
 8002afa:	460b      	mov	r3, r1
 8002afc:	70bb      	strb	r3, [r7, #2]
 8002afe:	4613      	mov	r3, r2
 8002b00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333b      	adds	r3, #59	; 0x3b
 8002b10:	78ba      	ldrb	r2, [r7, #2]
 8002b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	333f      	adds	r3, #63	; 0x3f
 8002b22:	787a      	ldrb	r2, [r7, #1]
 8002b24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b26:	7c3b      	ldrb	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d112      	bne.n	8002b52 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3342      	adds	r3, #66	; 0x42
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	333d      	adds	r3, #61	; 0x3d
 8002b4c:	7f3a      	ldrb	r2, [r7, #28]
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e008      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3342      	adds	r3, #66	; 0x42
 8002b60:	2202      	movs	r2, #2
 8002b62:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f200 80c6 	bhi.w	8002cf8 <HAL_HCD_HC_SubmitRequest+0x210>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002ce5 	.word	0x08002ce5
 8002b7c:	08002be9 	.word	0x08002be9
 8002b80:	08002c67 	.word	0x08002c67
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b84:	7c3b      	ldrb	r3, [r7, #16]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 80b8 	bne.w	8002cfc <HAL_HCD_HC_SubmitRequest+0x214>
 8002b8c:	78bb      	ldrb	r3, [r7, #2]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80b4 	bne.w	8002cfc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b94:	8b3b      	ldrh	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3355      	adds	r3, #85	; 0x55
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3355      	adds	r3, #85	; 0x55
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3342      	adds	r3, #66	; 0x42
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bd2:	e093      	b.n	8002cfc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3342      	adds	r3, #66	; 0x42
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
      break;
 8002be6:	e089      	b.n	8002cfc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002be8:	78bb      	ldrb	r3, [r7, #2]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11d      	bne.n	8002c2a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3355      	adds	r3, #85	; 0x55
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3342      	adds	r3, #66	; 0x42
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c14:	e073      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3342      	adds	r3, #66	; 0x42
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
      break;
 8002c28:	e069      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3354      	adds	r3, #84	; 0x54
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	3342      	adds	r3, #66	; 0x42
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
      break;
 8002c50:	e055      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3342      	adds	r3, #66	; 0x42
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
      break;
 8002c64:	e04b      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c66:	78bb      	ldrb	r3, [r7, #2]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11d      	bne.n	8002ca8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3355      	adds	r3, #85	; 0x55
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3342      	adds	r3, #66	; 0x42
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c92:	e034      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3342      	adds	r3, #66	; 0x42
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
      break;
 8002ca6:	e02a      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3354      	adds	r3, #84	; 0x54
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3342      	adds	r3, #66	; 0x42
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
      break;
 8002cce:	e016      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3342      	adds	r3, #66	; 0x42
 8002cde:	2202      	movs	r2, #2
 8002ce0:	701a      	strb	r2, [r3, #0]
      break;
 8002ce2:	e00c      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3342      	adds	r3, #66	; 0x42
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002cf8:	bf00      	nop
 8002cfa:	e000      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002cfc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3344      	adds	r3, #68	; 0x44
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	8b3a      	ldrh	r2, [r7, #24]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	202c      	movs	r0, #44	; 0x2c
 8002d18:	fb00 f303 	mul.w	r3, r0, r3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	334c      	adds	r3, #76	; 0x4c
 8002d20:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3360      	adds	r3, #96	; 0x60
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3350      	adds	r3, #80	; 0x50
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3339      	adds	r3, #57	; 0x39
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3361      	adds	r3, #97	; 0x61
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	222c      	movs	r2, #44	; 0x2c
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	3338      	adds	r3, #56	; 0x38
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	18d1      	adds	r1, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	f005 f83a 	bl	8007dfc <USB_HC_StartXfer>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop

08002d94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f004 fd5d 	bl	800786a <USB_GetMode>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	f040 80f6 	bne.w	8002fa4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fd41 	bl	8007844 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80ec 	beq.w	8002fa2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fd38 	bl	8007844 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dde:	d104      	bne.n	8002dea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002de8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fd28 	bl	8007844 <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dfe:	d104      	bne.n	8002e0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 fd18 	bl	8007844 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1e:	d104      	bne.n	8002e2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f004 fd08 	bl	8007844 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d103      	bne.n	8002e46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2202      	movs	r2, #2
 8002e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f004 fcfa 	bl	8007844 <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e5a:	d11c      	bne.n	8002e96 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e76:	2110      	movs	r1, #16
 8002e78:	6938      	ldr	r0, [r7, #16]
 8002e7a:	f004 fc09 	bl	8007690 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e7e:	6938      	ldr	r0, [r7, #16]
 8002e80:	f004 fc2a 	bl	80076d8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fde2 	bl	8007a54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f007 fab5 	bl	800a400 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 fcd2 	bl	8007844 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eaa:	d102      	bne.n	8002eb2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f001 fa03 	bl	80042b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 fcc4 	bl	8007844 <USB_ReadInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d106      	bne.n	8002ed4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f007 fa7e 	bl	800a3c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fcb3 	bl	8007844 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d101      	bne.n	8002eec <HAL_HCD_IRQHandler+0x158>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_HCD_IRQHandler+0x15a>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0210 	bic.w	r2, r2, #16
 8002f00:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f001 f906 	bl	8004114 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0210 	orr.w	r2, r2, #16
 8002f16:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f004 fc91 	bl	8007844 <USB_ReadInterrupts>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2c:	d13a      	bne.n	8002fa4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 f8a4 	bl	8008080 <USB_HC_ReadInterrupt>
 8002f38:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e025      	b.n	8002f8c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d018      	beq.n	8002f86 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6a:	d106      	bne.n	8002f7a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8ab 	bl	80030ce <HCD_HC_IN_IRQHandler>
 8002f78:	e005      	b.n	8002f86 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fcc6 	bl	8003912 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3d4      	bcc.n	8002f40 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9e:	615a      	str	r2, [r3, #20]
 8002fa0:	e000      	b.n	8002fa4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002fa2:	bf00      	nop
    }
  }
}
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_HCD_Start+0x16>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e013      	b.n	8002fe8 <HAL_HCD_Start+0x3e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fda4 	bl	8007b1c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 faea 	bl	80075b2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_HCD_Stop+0x16>
 8003002:	2302      	movs	r3, #2
 8003004:	e00d      	b.n	8003022 <HAL_HCD_Stop+0x32>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f005 f99e 	bl	8008354 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f004 fd46 	bl	8007ac8 <USB_ResetPort>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	781b      	ldrb	r3, [r3, #0]
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3350      	adds	r3, #80	; 0x50
 8003088:	681b      	ldr	r3, [r3, #0]
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 fd8a 	bl	8007bbc <USB_GetCurrentFrame>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 fd65 	bl	8007b8e <USB_GetHostSpeed>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d119      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	2304      	movs	r3, #4
 800310e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	440a      	add	r2, r1
 8003126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	60d3      	str	r3, [r2, #12]
 8003130:	e101      	b.n	8003336 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d12b      	bne.n	80031a2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	461a      	mov	r2, r3
 8003158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3361      	adds	r3, #97	; 0x61
 800316c:	2207      	movs	r2, #7
 800316e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	0151      	lsls	r1, r2, #5
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	440a      	add	r2, r1
 8003186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f004 ff81 	bl	80080a2 <USB_HC_Halt>
 80031a0:	e0c9      	b.n	8003336 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d109      	bne.n	80031cc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c4:	461a      	mov	r2, r3
 80031c6:	2320      	movs	r3, #32
 80031c8:	6093      	str	r3, [r2, #8]
 80031ca:	e0b4      	b.n	8003336 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d133      	bne.n	800324a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	0151      	lsls	r1, r2, #5
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	440a      	add	r2, r1
 80031f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3361      	adds	r3, #97	; 0x61
 8003210:	2205      	movs	r2, #5
 8003212:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2310      	movs	r3, #16
 8003224:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	2308      	movs	r3, #8
 8003236:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f004 ff2d 	bl	80080a2 <USB_HC_Halt>
 8003248:	e075      	b.n	8003336 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d134      	bne.n	80032cc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	0151      	lsls	r1, r2, #5
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	440a      	add	r2, r1
 8003278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3361      	adds	r3, #97	; 0x61
 8003290:	2208      	movs	r2, #8
 8003292:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2310      	movs	r3, #16
 80032a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 feec 	bl	80080a2 <USB_HC_Halt>
 80032ca:	e034      	b.n	8003336 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d129      	bne.n	8003336 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	0151      	lsls	r1, r2, #5
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	440a      	add	r2, r1
 80032f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3361      	adds	r3, #97	; 0x61
 8003310:	2206      	movs	r2, #6
 8003312:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f004 febf 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	461a      	mov	r2, r3
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d122      	bne.n	8003394 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	440a      	add	r2, r1
 8003364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f004 fe92 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	461a      	mov	r2, r3
 800338c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003390:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003392:	e2ba      	b.n	800390a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 811b 	bne.w	80035e2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d019      	beq.n	80033e8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3348      	adds	r3, #72	; 0x48
 80033c2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	202c      	movs	r0, #44	; 0x2c
 80033de:	fb00 f303 	mul.w	r3, r0, r3
 80033e2:	440b      	add	r3, r1
 80033e4:	3350      	adds	r3, #80	; 0x50
 80033e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3361      	adds	r3, #97	; 0x61
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	335c      	adds	r3, #92	; 0x5c
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	2301      	movs	r3, #1
 800341c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	333f      	adds	r3, #63	; 0x3f
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	333f      	adds	r3, #63	; 0x3f
 8003440:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003442:	2b02      	cmp	r3, #2
 8003444:	d121      	bne.n	800348a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	440a      	add	r2, r1
 800345c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f004 fe16 	bl	80080a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	461a      	mov	r2, r3
 8003484:	2310      	movs	r3, #16
 8003486:	6093      	str	r3, [r2, #8]
 8003488:	e066      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	333f      	adds	r3, #63	; 0x3f
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d127      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	0151      	lsls	r1, r2, #5
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	440a      	add	r2, r1
 80034b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	b2d9      	uxtb	r1, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	202c      	movs	r0, #44	; 0x2c
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3360      	adds	r3, #96	; 0x60
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f006 ff98 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034ec:	e034      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	333f      	adds	r3, #63	; 0x3f
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d12a      	bne.n	8003558 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3354      	adds	r3, #84	; 0x54
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2d8      	uxtb	r0, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	3354      	adds	r3, #84	; 0x54
 8003538:	4602      	mov	r2, r0
 800353a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	b2d9      	uxtb	r1, r3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	202c      	movs	r0, #44	; 0x2c
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	4413      	add	r3, r2
 800354c:	3360      	adds	r3, #96	; 0x60
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f006 ff62 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d12b      	bne.n	80035b8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3348      	adds	r3, #72	; 0x48
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	202c      	movs	r0, #44	; 0x2c
 8003576:	fb00 f202 	mul.w	r2, r0, r2
 800357a:	440a      	add	r2, r1
 800357c:	3240      	adds	r2, #64	; 0x40
 800357e:	8812      	ldrh	r2, [r2, #0]
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 81be 	beq.w	800390a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3354      	adds	r3, #84	; 0x54
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2d8      	uxtb	r0, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3354      	adds	r3, #84	; 0x54
 80035b2:	4602      	mov	r2, r0
 80035b4:	701a      	strb	r2, [r3, #0]
}
 80035b6:	e1a8      	b.n	800390a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3354      	adds	r3, #84	; 0x54
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f083 0301 	eor.w	r3, r3, #1
 80035cc:	b2d8      	uxtb	r0, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3354      	adds	r3, #84	; 0x54
 80035dc:	4602      	mov	r2, r0
 80035de:	701a      	strb	r2, [r3, #0]
}
 80035e0:	e193      	b.n	800390a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	f040 8106 	bne.w	8003806 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	440a      	add	r2, r1
 8003610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003614:	f023 0302 	bic.w	r3, r3, #2
 8003618:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3361      	adds	r3, #97	; 0x61
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d109      	bne.n	8003642 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3360      	adds	r3, #96	; 0x60
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e0c9      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3361      	adds	r3, #97	; 0x61
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d109      	bne.n	800366a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	3360      	adds	r3, #96	; 0x60
 8003664:	2205      	movs	r2, #5
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e0b5      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3361      	adds	r3, #97	; 0x61
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d009      	beq.n	8003692 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3361      	adds	r3, #97	; 0x61
 800368c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800368e:	2b08      	cmp	r3, #8
 8003690:	d150      	bne.n	8003734 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	335c      	adds	r3, #92	; 0x5c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	202c      	movs	r0, #44	; 0x2c
 80036aa:	fb00 f303 	mul.w	r3, r0, r3
 80036ae:	440b      	add	r3, r1
 80036b0:	335c      	adds	r3, #92	; 0x5c
 80036b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	335c      	adds	r3, #92	; 0x5c
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d912      	bls.n	80036ee <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	335c      	adds	r3, #92	; 0x5c
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3360      	adds	r3, #96	; 0x60
 80036e8:	2204      	movs	r2, #4
 80036ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036ec:	e073      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	2202      	movs	r2, #2
 80036fe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003716:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800371e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003732:	e050      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d122      	bne.n	800378e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	3360      	adds	r3, #96	; 0x60
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003770:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003778:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e023      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	3361      	adds	r3, #97	; 0x61
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b07      	cmp	r3, #7
 80037a0:	d119      	bne.n	80037d6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	335c      	adds	r3, #92	; 0x5c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	202c      	movs	r0, #44	; 0x2c
 80037ba:	fb00 f303 	mul.w	r3, r0, r3
 80037be:	440b      	add	r3, r1
 80037c0:	335c      	adds	r3, #92	; 0x5c
 80037c2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3360      	adds	r3, #96	; 0x60
 80037d2:	2204      	movs	r2, #4
 80037d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	461a      	mov	r2, r3
 80037e4:	2302      	movs	r3, #2
 80037e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	b2d9      	uxtb	r1, r3
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	202c      	movs	r0, #44	; 0x2c
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3360      	adds	r3, #96	; 0x60
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f006 fe0c 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003804:	e081      	b.n	800390a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d176      	bne.n	800390a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	333f      	adds	r3, #63	; 0x3f
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d121      	bne.n	8003874 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	335c      	adds	r3, #92	; 0x5c
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	440a      	add	r2, r1
 8003858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f004 fc18 	bl	80080a2 <USB_HC_Halt>
 8003872:	e041      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	333f      	adds	r3, #63	; 0x3f
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	333f      	adds	r3, #63	; 0x3f
 8003896:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003898:	2b02      	cmp	r3, #2
 800389a:	d12d      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	335c      	adds	r3, #92	; 0x5c
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d120      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3361      	adds	r3, #97	; 0x61
 80038c4:	2203      	movs	r2, #3
 80038c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fbd5 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2310      	movs	r3, #16
 8003908:	6093      	str	r3, [r2, #8]
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d119      	bne.n	8003976 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2304      	movs	r3, #4
 8003952:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	440a      	add	r2, r1
 800396a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003974:	e3ca      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b20      	cmp	r3, #32
 800398a:	d13e      	bne.n	8003a0a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	2320      	movs	r3, #32
 800399c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	333d      	adds	r3, #61	; 0x3d
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	f040 83ac 	bne.w	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	333d      	adds	r3, #61	; 0x3d
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3360      	adds	r3, #96	; 0x60
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fb4d 	bl	80080a2 <USB_HC_Halt>
}
 8003a08:	e380      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a20:	d122      	bne.n	8003a68 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 fb28 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a64:	6093      	str	r3, [r2, #8]
}
 8003a66:	e351      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d150      	bne.n	8003b20 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	335c      	adds	r3, #92	; 0x5c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d111      	bne.n	8003aca <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	333d      	adds	r3, #61	; 0x3d
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 fad4 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2301      	movs	r3, #1
 8003b0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3361      	adds	r3, #97	; 0x61
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
}
 8003b1e:	e2f5      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d13c      	bne.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3361      	adds	r3, #97	; 0x61
 8003b44:	2204      	movs	r2, #4
 8003b46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	333d      	adds	r3, #61	; 0x3d
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	335c      	adds	r3, #92	; 0x5c
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 fa83 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	6093      	str	r3, [r2, #8]
}
 8003bae:	e2ad      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d12a      	bne.n	8003c1c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 fa4d 	bl	80080a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3361      	adds	r3, #97	; 0x61
 8003c16:	2205      	movs	r2, #5
 8003c18:	701a      	strb	r2, [r3, #0]
}
 8003c1a:	e277      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d150      	bne.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	335c      	adds	r3, #92	; 0x5c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	3361      	adds	r3, #97	; 0x61
 8003c52:	2203      	movs	r2, #3
 8003c54:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	333d      	adds	r3, #61	; 0x3d
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d112      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	333c      	adds	r3, #60	; 0x3c
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d108      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	333d      	adds	r3, #61	; 0x3d
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f004 f9f1 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2310      	movs	r3, #16
 8003cd0:	6093      	str	r3, [r2, #8]
}
 8003cd2:	e21b      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d174      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d121      	bne.n	8003d36 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3361      	adds	r3, #97	; 0x61
 8003d00:	2206      	movs	r2, #6
 8003d02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d1e:	f043 0302 	orr.w	r3, r3, #2
 8003d22:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f004 f9b7 	bl	80080a2 <USB_HC_Halt>
 8003d34:	e044      	b.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	335c      	adds	r3, #92	; 0x5c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	202c      	movs	r0, #44	; 0x2c
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	440b      	add	r3, r1
 8003d54:	335c      	adds	r3, #92	; 0x5c
 8003d56:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	212c      	movs	r1, #44	; 0x2c
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	335c      	adds	r3, #92	; 0x5c
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d920      	bls.n	8003dae <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	335c      	adds	r3, #92	; 0x5c
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3360      	adds	r3, #96	; 0x60
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	b2d9      	uxtb	r1, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	202c      	movs	r0, #44	; 0x2c
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3360      	adds	r3, #96	; 0x60
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f006 fb38 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dac:	e008      	b.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	3360      	adds	r3, #96	; 0x60
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	6093      	str	r3, [r2, #8]
}
 8003dd2:	e19b      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d134      	bne.n	8003e56 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f004 f943 	bl	80080a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3361      	adds	r3, #97	; 0x61
 8003e50:	2208      	movs	r2, #8
 8003e52:	701a      	strb	r2, [r3, #0]
}
 8003e54:	e15a      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	f040 814f 	bne.w	800410c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e88:	f023 0302 	bic.w	r3, r3, #2
 8003e8c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3361      	adds	r3, #97	; 0x61
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d17d      	bne.n	8003f9e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3360      	adds	r3, #96	; 0x60
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	333f      	adds	r3, #63	; 0x3f
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d00a      	beq.n	8003ede <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	333f      	adds	r3, #63	; 0x3f
 8003ed6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	f040 8100 	bne.w	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d113      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3355      	adds	r3, #85	; 0x55
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2d8      	uxtb	r0, r3
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3355      	adds	r3, #85	; 0x55
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	f040 80e3 	bne.w	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	212c      	movs	r1, #44	; 0x2c
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	4413      	add	r3, r2
 8003f24:	334c      	adds	r3, #76	; 0x4c
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80d8 	beq.w	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	334c      	adds	r3, #76	; 0x4c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	202c      	movs	r0, #44	; 0x2c
 8003f44:	fb00 f202 	mul.w	r2, r0, r2
 8003f48:	440a      	add	r2, r1
 8003f4a:	3240      	adds	r2, #64	; 0x40
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	3b01      	subs	r3, #1
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	202c      	movs	r0, #44	; 0x2c
 8003f58:	fb00 f202 	mul.w	r2, r0, r2
 8003f5c:	440a      	add	r2, r1
 8003f5e:	3240      	adds	r2, #64	; 0x40
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80b5 	beq.w	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3355      	adds	r3, #85	; 0x55
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f083 0301 	eor.w	r3, r3, #1
 8003f88:	b2d8      	uxtb	r0, r3
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	3355      	adds	r3, #85	; 0x55
 8003f98:	4602      	mov	r2, r0
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	e09f      	b.n	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3361      	adds	r3, #97	; 0x61
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d109      	bne.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3360      	adds	r3, #96	; 0x60
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e08b      	b.n	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3361      	adds	r3, #97	; 0x61
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d109      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3360      	adds	r3, #96	; 0x60
 8003fe8:	2202      	movs	r2, #2
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e077      	b.n	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3361      	adds	r3, #97	; 0x61
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d109      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3360      	adds	r3, #96	; 0x60
 8004010:	2205      	movs	r2, #5
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e063      	b.n	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3361      	adds	r3, #97	; 0x61
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b06      	cmp	r3, #6
 8004028:	d009      	beq.n	800403e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	3361      	adds	r3, #97	; 0x61
 8004038:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800403a:	2b08      	cmp	r3, #8
 800403c:	d14f      	bne.n	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	335c      	adds	r3, #92	; 0x5c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	202c      	movs	r0, #44	; 0x2c
 8004056:	fb00 f303 	mul.w	r3, r0, r3
 800405a:	440b      	add	r3, r1
 800405c:	335c      	adds	r3, #92	; 0x5c
 800405e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	335c      	adds	r3, #92	; 0x5c
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d912      	bls.n	800409a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	335c      	adds	r3, #92	; 0x5c
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	3360      	adds	r3, #96	; 0x60
 8004094:	2204      	movs	r2, #4
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e021      	b.n	80040de <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	3360      	adds	r3, #96	; 0x60
 80040a8:	2202      	movs	r2, #2
 80040aa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040c2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040ca:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	461a      	mov	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	461a      	mov	r2, r3
 80040ec:	2302      	movs	r3, #2
 80040ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	b2d9      	uxtb	r1, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	202c      	movs	r0, #44	; 0x2c
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3360      	adds	r3, #96	; 0x60
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f006 f988 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800410c:	bf00      	nop
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	0c5b      	lsrs	r3, r3, #17
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004148:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d004      	beq.n	800415a <HCD_RXQLVL_IRQHandler+0x46>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b05      	cmp	r3, #5
 8004154:	f000 80a9 	beq.w	80042aa <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004158:	e0aa      	b.n	80042b0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a6 	beq.w	80042ae <HCD_RXQLVL_IRQHandler+0x19a>
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3344      	adds	r3, #68	; 0x44
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 809b 	beq.w	80042ae <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	3350      	adds	r3, #80	; 0x50
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	441a      	add	r2, r3
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	202c      	movs	r0, #44	; 0x2c
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	440b      	add	r3, r1
 8004198:	334c      	adds	r3, #76	; 0x4c
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d87a      	bhi.n	8004296 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3344      	adds	r3, #68	; 0x44
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	b292      	uxth	r2, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	f003 faeb 	bl	8007794 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	212c      	movs	r1, #44	; 0x2c
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	3344      	adds	r3, #68	; 0x44
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	441a      	add	r2, r3
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	202c      	movs	r0, #44	; 0x2c
 80041d8:	fb00 f303 	mul.w	r3, r0, r3
 80041dc:	440b      	add	r3, r1
 80041de:	3344      	adds	r3, #68	; 0x44
 80041e0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3350      	adds	r3, #80	; 0x50
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	441a      	add	r2, r3
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	202c      	movs	r0, #44	; 0x2c
 80041fc:	fb00 f303 	mul.w	r3, r0, r3
 8004200:	440b      	add	r3, r1
 8004202:	3350      	adds	r3, #80	; 0x50
 8004204:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	0cdb      	lsrs	r3, r3, #19
 8004216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3340      	adds	r3, #64	; 0x40
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4293      	cmp	r3, r2
 8004232:	d13c      	bne.n	80042ae <HCD_RXQLVL_IRQHandler+0x19a>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d039      	beq.n	80042ae <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004250:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004258:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3354      	adds	r3, #84	; 0x54
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2d8      	uxtb	r0, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3354      	adds	r3, #84	; 0x54
 8004290:	4602      	mov	r2, r0
 8004292:	701a      	strb	r2, [r3, #0]
      break;
 8004294:	e00b      	b.n	80042ae <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3360      	adds	r3, #96	; 0x60
 80042a4:	2204      	movs	r2, #4
 80042a6:	701a      	strb	r2, [r3, #0]
      break;
 80042a8:	e001      	b.n	80042ae <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80042ae:	bf00      	nop
  }
}
 80042b0:	bf00      	nop
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d10b      	bne.n	8004308 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f006 f872 	bl	800a3e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f043 0302 	orr.w	r3, r3, #2
 8004306:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d132      	bne.n	8004378 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d126      	bne.n	8004372 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d113      	bne.n	8004354 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004336:	d106      	bne.n	8004346 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f003 fb88 	bl	8007a54 <USB_InitFSLSPClkSel>
 8004344:	e011      	b.n	800436a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f003 fb81 	bl	8007a54 <USB_InitFSLSPClkSel>
 8004352:	e00a      	b.n	800436a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004362:	461a      	mov	r2, r3
 8004364:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004368:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f006 f864 	bl	800a438 <HAL_HCD_PortEnabled_Callback>
 8004370:	e002      	b.n	8004378 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f006 f86e 	bl	800a454 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d103      	bne.n	800438a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f043 0320 	orr.w	r3, r3, #32
 8004388:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6013      	str	r3, [r2, #0]
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e12b      	b.n	800460a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fd f8f6 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	; 0x24
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004404:	f001 f9fc 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 8004408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4a81      	ldr	r2, [pc, #516]	; (8004614 <HAL_I2C_Init+0x274>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d807      	bhi.n	8004424 <HAL_I2C_Init+0x84>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a80      	ldr	r2, [pc, #512]	; (8004618 <HAL_I2C_Init+0x278>)
 8004418:	4293      	cmp	r3, r2
 800441a:	bf94      	ite	ls
 800441c:	2301      	movls	r3, #1
 800441e:	2300      	movhi	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e006      	b.n	8004432 <HAL_I2C_Init+0x92>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a7d      	ldr	r2, [pc, #500]	; (800461c <HAL_I2C_Init+0x27c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	bf94      	ite	ls
 800442c:	2301      	movls	r3, #1
 800442e:	2300      	movhi	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e0e7      	b.n	800460a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a78      	ldr	r2, [pc, #480]	; (8004620 <HAL_I2C_Init+0x280>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0c9b      	lsrs	r3, r3, #18
 8004444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a6a      	ldr	r2, [pc, #424]	; (8004614 <HAL_I2C_Init+0x274>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d802      	bhi.n	8004474 <HAL_I2C_Init+0xd4>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3301      	adds	r3, #1
 8004472:	e009      	b.n	8004488 <HAL_I2C_Init+0xe8>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	4a69      	ldr	r2, [pc, #420]	; (8004624 <HAL_I2C_Init+0x284>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	3301      	adds	r3, #1
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	430b      	orrs	r3, r1
 800448e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800449a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	495c      	ldr	r1, [pc, #368]	; (8004614 <HAL_I2C_Init+0x274>)
 80044a4:	428b      	cmp	r3, r1
 80044a6:	d819      	bhi.n	80044dc <HAL_I2C_Init+0x13c>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1e59      	subs	r1, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044bc:	400b      	ands	r3, r1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_I2C_Init+0x138>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e59      	subs	r1, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d6:	e051      	b.n	800457c <HAL_I2C_Init+0x1dc>
 80044d8:	2304      	movs	r3, #4
 80044da:	e04f      	b.n	800457c <HAL_I2C_Init+0x1dc>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d111      	bne.n	8004508 <HAL_I2C_Init+0x168>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	440b      	add	r3, r1
 80044f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e012      	b.n	800452e <HAL_I2C_Init+0x18e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	0099      	lsls	r1, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Init+0x196>
 8004532:	2301      	movs	r3, #1
 8004534:	e022      	b.n	800457c <HAL_I2C_Init+0x1dc>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <HAL_I2C_Init+0x1bc>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1e58      	subs	r0, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	440b      	add	r3, r1
 800454c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004550:	3301      	adds	r3, #1
 8004552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455a:	e00f      	b.n	800457c <HAL_I2C_Init+0x1dc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e58      	subs	r0, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	0099      	lsls	r1, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004572:	3301      	adds	r3, #1
 8004574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	6809      	ldr	r1, [r1, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6911      	ldr	r1, [r2, #16]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68d2      	ldr	r2, [r2, #12]
 80045b6:	4311      	orrs	r1, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	000186a0 	.word	0x000186a0
 8004618:	001e847f 	.word	0x001e847f
 800461c:	003d08ff 	.word	0x003d08ff
 8004620:	431bde83 	.word	0x431bde83
 8004624:	10624dd3 	.word	0x10624dd3

08004628 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e128      	b.n	800488c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a90      	ldr	r2, [pc, #576]	; (8004894 <HAL_I2S_Init+0x26c>)
 8004652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fd f827 	bl	80016a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004670:	f023 030f 	bic.w	r3, r3, #15
 8004674:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2202      	movs	r2, #2
 800467c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d060      	beq.n	8004748 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800468e:	2310      	movs	r3, #16
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e001      	b.n	8004698 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004694:	2320      	movs	r3, #32
 8004696:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b20      	cmp	r3, #32
 800469e:	d802      	bhi.n	80046a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f001 f9b4 	bl	8005a14 <HAL_RCCEx_GetPeriphCLKFreq>
 80046ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b6:	d125      	bne.n	8004704 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d010      	beq.n	80046e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	3305      	adds	r3, #5
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e01f      	b.n	8004722 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	3305      	adds	r3, #5
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	e00e      	b.n	8004722 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	fbb2 f2f3 	udiv	r2, r2, r3
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	461a      	mov	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	3305      	adds	r3, #5
 8004720:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4a5c      	ldr	r2, [pc, #368]	; (8004898 <HAL_I2S_Init+0x270>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	08db      	lsrs	r3, r3, #3
 800472c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e003      	b.n	8004750 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004748:	2302      	movs	r3, #2
 800474a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d902      	bls.n	800475c <HAL_I2S_Init+0x134>
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2bff      	cmp	r3, #255	; 0xff
 800475a:	d907      	bls.n	800476c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f043 0210 	orr.w	r2, r3, #16
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e08f      	b.n	800488c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	ea42 0103 	orr.w	r1, r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	430a      	orrs	r2, r1
 800477e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800478a:	f023 030f 	bic.w	r3, r3, #15
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6851      	ldr	r1, [r2, #4]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6892      	ldr	r2, [r2, #8]
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68d2      	ldr	r2, [r2, #12]
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6992      	ldr	r2, [r2, #24]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d161      	bne.n	800487c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a38      	ldr	r2, [pc, #224]	; (800489c <HAL_I2S_Init+0x274>)
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a37      	ldr	r2, [pc, #220]	; (80048a0 <HAL_I2S_Init+0x278>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <HAL_I2S_Init+0x1a4>
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_I2S_Init+0x27c>)
 80047ca:	e001      	b.n	80047d0 <HAL_I2S_Init+0x1a8>
 80047cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	4932      	ldr	r1, [pc, #200]	; (80048a0 <HAL_I2S_Init+0x278>)
 80047d8:	428a      	cmp	r2, r1
 80047da:	d101      	bne.n	80047e0 <HAL_I2S_Init+0x1b8>
 80047dc:	4a31      	ldr	r2, [pc, #196]	; (80048a4 <HAL_I2S_Init+0x27c>)
 80047de:	e001      	b.n	80047e4 <HAL_I2S_Init+0x1bc>
 80047e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80047e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047e8:	f023 030f 	bic.w	r3, r3, #15
 80047ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2b      	ldr	r2, [pc, #172]	; (80048a0 <HAL_I2S_Init+0x278>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_I2S_Init+0x1d4>
 80047f8:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <HAL_I2S_Init+0x27c>)
 80047fa:	e001      	b.n	8004800 <HAL_I2S_Init+0x1d8>
 80047fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004800:	2202      	movs	r2, #2
 8004802:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <HAL_I2S_Init+0x278>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_I2S_Init+0x1ea>
 800480e:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_I2S_Init+0x27c>)
 8004810:	e001      	b.n	8004816 <HAL_I2S_Init+0x1ee>
 8004812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d003      	beq.n	800482c <HAL_I2S_Init+0x204>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800482c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e001      	b.n	8004838 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004842:	4313      	orrs	r3, r2
 8004844:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800484c:	4313      	orrs	r3, r2
 800484e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004856:	4313      	orrs	r3, r2
 8004858:	b29a      	uxth	r2, r3
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	4313      	orrs	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004864:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a0d      	ldr	r2, [pc, #52]	; (80048a0 <HAL_I2S_Init+0x278>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_I2S_Init+0x24c>
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <HAL_I2S_Init+0x27c>)
 8004872:	e001      	b.n	8004878 <HAL_I2S_Init+0x250>
 8004874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004878:	897a      	ldrh	r2, [r7, #10]
 800487a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	0800499f 	.word	0x0800499f
 8004898:	cccccccd 	.word	0xcccccccd
 800489c:	08004ab5 	.word	0x08004ab5
 80048a0:	40003800 	.word	0x40003800
 80048a4:	40003400 	.word	0x40003400

080048a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	881a      	ldrh	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10e      	bne.n	8004938 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004928:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ffb8 	bl	80048a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	b292      	uxth	r2, r2
 8004954:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10e      	bne.n	8004996 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004986:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff93 	bl	80048bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d13a      	bne.n	8004a30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d109      	bne.n	80049d8 <I2S_IRQHandler+0x3a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d102      	bne.n	80049d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ffb4 	bl	8004940 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d126      	bne.n	8004a30 <I2S_IRQHandler+0x92>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d11f      	bne.n	8004a30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f043 0202 	orr.w	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff50 	bl	80048d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d136      	bne.n	8004aaa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d109      	bne.n	8004a5a <I2S_IRQHandler+0xbc>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d102      	bne.n	8004a5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff45 	bl	80048e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d122      	bne.n	8004aaa <I2S_IRQHandler+0x10c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d11b      	bne.n	8004aaa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f043 0204 	orr.w	r2, r3, #4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff13 	bl	80048d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4aa2      	ldr	r2, [pc, #648]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004ace:	4ba2      	ldr	r3, [pc, #648]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ad0:	e001      	b.n	8004ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a9b      	ldr	r2, [pc, #620]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004aec:	4b9a      	ldr	r3, [pc, #616]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aee:	e001      	b.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b00:	d004      	beq.n	8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8099 	bne.w	8004c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d107      	bne.n	8004b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f925 	bl	8004d70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9c8 	bl	8004ed0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d13a      	bne.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d035      	beq.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7e      	ldr	r2, [pc, #504]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b5e:	4b7e      	ldr	r3, [pc, #504]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b60:	e001      	b.n	8004b66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4979      	ldr	r1, [pc, #484]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b6e:	428b      	cmp	r3, r1
 8004b70:	d101      	bne.n	8004b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b72:	4b79      	ldr	r3, [pc, #484]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b74:	e001      	b.n	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f043 0202 	orr.w	r2, r3, #2
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fe88 	bl	80048d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	f040 80be 	bne.w	8004d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80b8 	beq.w	8004d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a59      	ldr	r2, [pc, #356]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bf2:	4b59      	ldr	r3, [pc, #356]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bf4:	e001      	b.n	8004bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4954      	ldr	r1, [pc, #336]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c02:	428b      	cmp	r3, r1
 8004c04:	d101      	bne.n	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004c06:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c08:	e001      	b.n	8004c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c14:	2300      	movs	r3, #0
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	f043 0204 	orr.w	r2, r3, #4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fe4a 	bl	80048d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c3c:	e084      	b.n	8004d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d107      	bne.n	8004c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8be 	bl	8004dd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8fd 	bl	8004e6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d12f      	bne.n	8004cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d02a      	beq.n	8004cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2e      	ldr	r2, [pc, #184]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca2:	e001      	b.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4929      	ldr	r1, [pc, #164]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004cb4:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cb6:	e001      	b.n	8004cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f043 0202 	orr.w	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fdfa 	bl	80048d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d131      	bne.n	8004d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02c      	beq.n	8004d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004cfa:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cfc:	e001      	b.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4912      	ldr	r1, [pc, #72]	; (8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d0a:	428b      	cmp	r3, r1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d10:	e001      	b.n	8004d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d2a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fdc5 	bl	80048d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d46:	e000      	b.n	8004d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d48:	bf00      	nop
}
 8004d4a:	bf00      	nop
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40003800 	.word	0x40003800
 8004d58:	40003400 	.word	0x40003400

08004d5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c99      	adds	r1, r3, #2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6251      	str	r1, [r2, #36]	; 0x24
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d113      	bne.n	8004dca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004db0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ffc9 	bl	8004d5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c99      	adds	r1, r3, #2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6251      	str	r1, [r2, #36]	; 0x24
 8004de6:	8819      	ldrh	r1, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <I2SEx_TxISR_I2SExt+0x90>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <I2SEx_TxISR_I2SExt+0x22>
 8004df2:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <I2SEx_TxISR_I2SExt+0x94>)
 8004df4:	e001      	b.n	8004dfa <I2SEx_TxISR_I2SExt+0x26>
 8004df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d121      	bne.n	8004e5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <I2SEx_TxISR_I2SExt+0x90>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d101      	bne.n	8004e24 <I2SEx_TxISR_I2SExt+0x50>
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <I2SEx_TxISR_I2SExt+0x94>)
 8004e22:	e001      	b.n	8004e28 <I2SEx_TxISR_I2SExt+0x54>
 8004e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	490d      	ldr	r1, [pc, #52]	; (8004e64 <I2SEx_TxISR_I2SExt+0x90>)
 8004e30:	428b      	cmp	r3, r1
 8004e32:	d101      	bne.n	8004e38 <I2SEx_TxISR_I2SExt+0x64>
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <I2SEx_TxISR_I2SExt+0x94>)
 8004e36:	e001      	b.n	8004e3c <I2SEx_TxISR_I2SExt+0x68>
 8004e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ff81 	bl	8004d5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40003800 	.word	0x40003800
 8004e68:	40003400 	.word	0x40003400

08004e6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68d8      	ldr	r0, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	1c99      	adds	r1, r3, #2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e84:	b282      	uxth	r2, r0
 8004e86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d113      	bne.n	8004ec8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ff4a 	bl	8004d5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <I2SEx_RxISR_I2SExt+0x90>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <I2SEx_RxISR_I2SExt+0x16>
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <I2SEx_RxISR_I2SExt+0x94>)
 8004ee4:	e001      	b.n	8004eea <I2SEx_RxISR_I2SExt+0x1a>
 8004ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eea:	68d8      	ldr	r0, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	1c99      	adds	r1, r3, #2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ef6:	b282      	uxth	r2, r0
 8004ef8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d121      	bne.n	8004f56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <I2SEx_RxISR_I2SExt+0x90>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <I2SEx_RxISR_I2SExt+0x50>
 8004f1c:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <I2SEx_RxISR_I2SExt+0x94>)
 8004f1e:	e001      	b.n	8004f24 <I2SEx_RxISR_I2SExt+0x54>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	490d      	ldr	r1, [pc, #52]	; (8004f60 <I2SEx_RxISR_I2SExt+0x90>)
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	d101      	bne.n	8004f34 <I2SEx_RxISR_I2SExt+0x64>
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <I2SEx_RxISR_I2SExt+0x94>)
 8004f32:	e001      	b.n	8004f38 <I2SEx_RxISR_I2SExt+0x68>
 8004f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff03 	bl	8004d5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40003800 	.word	0x40003800
 8004f64:	40003400 	.word	0x40003400

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e264      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d075      	beq.n	8005072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f86:	4ba3      	ldr	r3, [pc, #652]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d00c      	beq.n	8004fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f92:	4ba0      	ldr	r3, [pc, #640]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d112      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9e:	4b9d      	ldr	r3, [pc, #628]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	4b99      	ldr	r3, [pc, #612]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05b      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d157      	bne.n	8005070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e23f      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d106      	bne.n	8004fdc <HAL_RCC_OscConfig+0x74>
 8004fce:	4b91      	ldr	r3, [pc, #580]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a90      	ldr	r2, [pc, #576]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e01d      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x98>
 8004fe6:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a8a      	ldr	r2, [pc, #552]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a87      	ldr	r2, [pc, #540]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
 8005000:	4b84      	ldr	r3, [pc, #528]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a83      	ldr	r2, [pc, #524]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b81      	ldr	r3, [pc, #516]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a80      	ldr	r2, [pc, #512]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fd f8c4 	bl	80021ac <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7fd f8c0 	bl	80021ac <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e204      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b76      	ldr	r3, [pc, #472]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0xc0>
 8005046:	e014      	b.n	8005072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fd f8b0 	bl	80021ac <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005050:	f7fd f8ac 	bl	80021ac <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1f0      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0xe8>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d063      	beq.n	8005146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800507e:	4b65      	ldr	r3, [pc, #404]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508a:	4b62      	ldr	r3, [pc, #392]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005092:	2b08      	cmp	r3, #8
 8005094:	d11c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005096:	4b5f      	ldr	r3, [pc, #380]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d116      	bne.n	80050d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	4b5c      	ldr	r3, [pc, #368]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x152>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1c4      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ba:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4952      	ldr	r1, [pc, #328]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	e03a      	b.n	8005146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d8:	4b4f      	ldr	r3, [pc, #316]	; (8005218 <HAL_RCC_OscConfig+0x2b0>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fd f865 	bl	80021ac <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e6:	f7fd f861 	bl	80021ac <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e1a5      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	4b46      	ldr	r3, [pc, #280]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4940      	ldr	r1, [pc, #256]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511a:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <HAL_RCC_OscConfig+0x2b0>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd f844 	bl	80021ac <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005128:	f7fd f840 	bl	80021ac <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e184      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d030      	beq.n	80051b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515a:	4b30      	ldr	r3, [pc, #192]	; (800521c <HAL_RCC_OscConfig+0x2b4>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd f824 	bl	80021ac <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005168:	f7fd f820 	bl	80021ac <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e164      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x200>
 8005186:	e015      	b.n	80051b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCC_OscConfig+0x2b4>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fd f80d 	bl	80021ac <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005196:	f7fd f809 	bl	80021ac <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e14d      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f0      	bne.n	8005196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80a0 	beq.w	8005302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c6:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_OscConfig+0x2b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d121      	bne.n	8005242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_RCC_OscConfig+0x2b8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a07      	ldr	r2, [pc, #28]	; (8005220 <HAL_RCC_OscConfig+0x2b8>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520a:	f7fc ffcf 	bl	80021ac <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005210:	e011      	b.n	8005236 <HAL_RCC_OscConfig+0x2ce>
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800
 8005218:	42470000 	.word	0x42470000
 800521c:	42470e80 	.word	0x42470e80
 8005220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005224:	f7fc ffc2 	bl	80021ac <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e106      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b85      	ldr	r3, [pc, #532]	; (800544c <HAL_RCC_OscConfig+0x4e4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d106      	bne.n	8005258 <HAL_RCC_OscConfig+0x2f0>
 800524a:	4b81      	ldr	r3, [pc, #516]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a80      	ldr	r2, [pc, #512]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
 8005256:	e01c      	b.n	8005292 <HAL_RCC_OscConfig+0x32a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b05      	cmp	r3, #5
 800525e:	d10c      	bne.n	800527a <HAL_RCC_OscConfig+0x312>
 8005260:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	4a7a      	ldr	r2, [pc, #488]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6713      	str	r3, [r2, #112]	; 0x70
 800526c:	4b78      	ldr	r3, [pc, #480]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a77      	ldr	r2, [pc, #476]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
 8005278:	e00b      	b.n	8005292 <HAL_RCC_OscConfig+0x32a>
 800527a:	4b75      	ldr	r3, [pc, #468]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a74      	ldr	r2, [pc, #464]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6713      	str	r3, [r2, #112]	; 0x70
 8005286:	4b72      	ldr	r3, [pc, #456]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a71      	ldr	r2, [pc, #452]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d015      	beq.n	80052c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529a:	f7fc ff87 	bl	80021ac <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fc ff83 	bl	80021ac <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0c5      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	4b65      	ldr	r3, [pc, #404]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ee      	beq.n	80052a2 <HAL_RCC_OscConfig+0x33a>
 80052c4:	e014      	b.n	80052f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7fc ff71 	bl	80021ac <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052cc:	e00a      	b.n	80052e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fc ff6d 	bl	80021ac <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e0af      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e4:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ee      	bne.n	80052ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d105      	bne.n	8005302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f6:	4b56      	ldr	r3, [pc, #344]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4a55      	ldr	r2, [pc, #340]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 80052fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 809b 	beq.w	8005442 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800530c:	4b50      	ldr	r3, [pc, #320]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b08      	cmp	r3, #8
 8005316:	d05c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d141      	bne.n	80053a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005320:	4b4c      	ldr	r3, [pc, #304]	; (8005454 <HAL_RCC_OscConfig+0x4ec>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fc ff41 	bl	80021ac <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532e:	f7fc ff3d 	bl	80021ac <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e081      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005340:	4b43      	ldr	r3, [pc, #268]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	019b      	lsls	r3, r3, #6
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	3b01      	subs	r3, #1
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	4937      	ldr	r1, [pc, #220]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005376:	4b37      	ldr	r3, [pc, #220]	; (8005454 <HAL_RCC_OscConfig+0x4ec>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fc ff16 	bl	80021ac <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fc ff12 	bl	80021ac <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e056      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005396:	4b2e      	ldr	r3, [pc, #184]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x41c>
 80053a2:	e04e      	b.n	8005442 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_RCC_OscConfig+0x4ec>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053aa:	f7fc feff 	bl	80021ac <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fc fefb 	bl	80021ac <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e03f      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c4:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f0      	bne.n	80053b2 <HAL_RCC_OscConfig+0x44a>
 80053d0:	e037      	b.n	8005442 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e032      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053de:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <HAL_RCC_OscConfig+0x4e8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d028      	beq.n	800543e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d121      	bne.n	800543e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d11a      	bne.n	800543e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800540e:	4013      	ands	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005414:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	3b01      	subs	r3, #1
 8005428:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d107      	bne.n	800543e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40007000 	.word	0x40007000
 8005450:	40023800 	.word	0x40023800
 8005454:	42470060 	.word	0x42470060

08005458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0cc      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b68      	ldr	r3, [pc, #416]	; (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d90c      	bls.n	8005494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b65      	ldr	r3, [pc, #404]	; (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b63      	ldr	r3, [pc, #396]	; (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0b8      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ac:	4b59      	ldr	r3, [pc, #356]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a58      	ldr	r2, [pc, #352]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c4:	4b53      	ldr	r3, [pc, #332]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a52      	ldr	r2, [pc, #328]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d0:	4b50      	ldr	r3, [pc, #320]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	494d      	ldr	r1, [pc, #308]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d044      	beq.n	8005578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b47      	ldr	r3, [pc, #284]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d119      	bne.n	8005536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e07f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d003      	beq.n	8005516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005512:	2b03      	cmp	r3, #3
 8005514:	d107      	bne.n	8005526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	4b3f      	ldr	r3, [pc, #252]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e06f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005526:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e067      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005536:	4b37      	ldr	r3, [pc, #220]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f023 0203 	bic.w	r2, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4934      	ldr	r1, [pc, #208]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005548:	f7fc fe30 	bl	80021ac <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	e00a      	b.n	8005566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005550:	f7fc fe2c 	bl	80021ac <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e04f      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005566:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 020c 	and.w	r2, r3, #12
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	429a      	cmp	r2, r3
 8005576:	d1eb      	bne.n	8005550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d20c      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800558e:	4b20      	ldr	r3, [pc, #128]	; (8005610 <HAL_RCC_ClockConfig+0x1b8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e032      	b.n	8005606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4916      	ldr	r1, [pc, #88]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	490e      	ldr	r1, [pc, #56]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055de:	f000 f821 	bl	8005624 <HAL_RCC_GetSysClockFreq>
 80055e2:	4602      	mov	r2, r0
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	490a      	ldr	r1, [pc, #40]	; (8005618 <HAL_RCC_ClockConfig+0x1c0>)
 80055f0:	5ccb      	ldrb	r3, [r1, r3]
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_RCC_ClockConfig+0x1c8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fc fd90 	bl	8002124 <HAL_InitTick>

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40023c00 	.word	0x40023c00
 8005614:	40023800 	.word	0x40023800
 8005618:	0800d6b0 	.word	0x0800d6b0
 800561c:	20000010 	.word	0x20000010
 8005620:	20000014 	.word	0x20000014

08005624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005624:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	2300      	movs	r3, #0
 8005636:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800563c:	4b67      	ldr	r3, [pc, #412]	; (80057dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b08      	cmp	r3, #8
 8005646:	d00d      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x40>
 8005648:	2b08      	cmp	r3, #8
 800564a:	f200 80bd 	bhi.w	80057c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_RCC_GetSysClockFreq+0x34>
 8005652:	2b04      	cmp	r3, #4
 8005654:	d003      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x3a>
 8005656:	e0b7      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800565a:	60bb      	str	r3, [r7, #8]
       break;
 800565c:	e0b7      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800565e:	4b61      	ldr	r3, [pc, #388]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005660:	60bb      	str	r3, [r7, #8]
      break;
 8005662:	e0b4      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005664:	4b5d      	ldr	r3, [pc, #372]	; (80057dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800566c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800566e:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04d      	beq.n	8005716 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567a:	4b58      	ldr	r3, [pc, #352]	; (80057dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	461a      	mov	r2, r3
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	ea02 0800 	and.w	r8, r2, r0
 8005692:	ea03 0901 	and.w	r9, r3, r1
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	014b      	lsls	r3, r1, #5
 80056a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056a8:	0142      	lsls	r2, r0, #5
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	ebb0 0008 	subs.w	r0, r0, r8
 80056b2:	eb61 0109 	sbc.w	r1, r1, r9
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	018b      	lsls	r3, r1, #6
 80056c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056c4:	0182      	lsls	r2, r0, #6
 80056c6:	1a12      	subs	r2, r2, r0
 80056c8:	eb63 0301 	sbc.w	r3, r3, r1
 80056cc:	f04f 0000 	mov.w	r0, #0
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	00d9      	lsls	r1, r3, #3
 80056d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056da:	00d0      	lsls	r0, r2, #3
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	eb12 0208 	adds.w	r2, r2, r8
 80056e4:	eb43 0309 	adc.w	r3, r3, r9
 80056e8:	f04f 0000 	mov.w	r0, #0
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	0259      	lsls	r1, r3, #9
 80056f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80056f6:	0250      	lsls	r0, r2, #9
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	f7fb fa4e 	bl	8000ba8 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4613      	mov	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e04a      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	099b      	lsrs	r3, r3, #6
 800571c:	461a      	mov	r2, r3
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005726:	f04f 0100 	mov.w	r1, #0
 800572a:	ea02 0400 	and.w	r4, r2, r0
 800572e:	ea03 0501 	and.w	r5, r3, r1
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	014b      	lsls	r3, r1, #5
 8005740:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005744:	0142      	lsls	r2, r0, #5
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	1b00      	subs	r0, r0, r4
 800574c:	eb61 0105 	sbc.w	r1, r1, r5
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	018b      	lsls	r3, r1, #6
 800575a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800575e:	0182      	lsls	r2, r0, #6
 8005760:	1a12      	subs	r2, r2, r0
 8005762:	eb63 0301 	sbc.w	r3, r3, r1
 8005766:	f04f 0000 	mov.w	r0, #0
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	00d9      	lsls	r1, r3, #3
 8005770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005774:	00d0      	lsls	r0, r2, #3
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	1912      	adds	r2, r2, r4
 800577c:	eb45 0303 	adc.w	r3, r5, r3
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0299      	lsls	r1, r3, #10
 800578a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800578e:	0290      	lsls	r0, r2, #10
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	f7fb fa02 	bl	8000ba8 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	60bb      	str	r3, [r7, #8]
      break;
 80057c6:	e002      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057ca:	60bb      	str	r3, [r7, #8]
      break;
 80057cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ce:	68bb      	ldr	r3, [r7, #8]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	00f42400 	.word	0x00f42400
 80057e4:	007a1200 	.word	0x007a1200

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000010 	.word	0x20000010

08005800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005804:	f7ff fff0 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	0800d6c0 	.word	0x0800d6c0

08005828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800582c:	f7ff ffdc 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0b5b      	lsrs	r3, r3, #13
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4903      	ldr	r1, [pc, #12]	; (800584c <HAL_RCC_GetPCLK2Freq+0x24>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800
 800584c:	0800d6c0 	.word	0x0800d6c0

08005850 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005874:	2b00      	cmp	r3, #0
 8005876:	d035      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005878:	4b62      	ldr	r3, [pc, #392]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800587e:	f7fc fc95 	bl	80021ac <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005886:	f7fc fc91 	bl	80021ac <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e0b0      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005898:	4b5b      	ldr	r3, [pc, #364]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f0      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	019a      	lsls	r2, r3, #6
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	071b      	lsls	r3, r3, #28
 80058b0:	4955      	ldr	r1, [pc, #340]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058b8:	4b52      	ldr	r3, [pc, #328]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058be:	f7fc fc75 	bl	80021ac <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058c6:	f7fc fc71 	bl	80021ac <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e090      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058d8:	4b4b      	ldr	r3, [pc, #300]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8083 	beq.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	4b44      	ldr	r3, [pc, #272]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	4a43      	ldr	r2, [pc, #268]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005900:	6413      	str	r3, [r2, #64]	; 0x40
 8005902:	4b41      	ldr	r3, [pc, #260]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800590e:	4b3f      	ldr	r3, [pc, #252]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a3e      	ldr	r2, [pc, #248]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800591a:	f7fc fc47 	bl	80021ac <HAL_GetTick>
 800591e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7fc fc43 	bl	80021ac <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e062      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005934:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005940:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005948:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02f      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	d028      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800595e:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005968:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800596e:	4b28      	ldr	r3, [pc, #160]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005974:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800597a:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d114      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005986:	f7fc fc11 	bl	80021ac <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598c:	e00a      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800598e:	f7fc fc0d 	bl	80021ac <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	f241 3288 	movw	r2, #5000	; 0x1388
 800599c:	4293      	cmp	r3, r2
 800599e:	d901      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e02a      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a4:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0ee      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059bc:	d10d      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d2:	490d      	ldr	r1, [pc, #52]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	608b      	str	r3, [r1, #8]
 80059d8:	e005      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059e4:	6093      	str	r3, [r2, #8]
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f2:	4905      	ldr	r1, [pc, #20]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	42470068 	.word	0x42470068
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	42470e40 	.word	0x42470e40

08005a14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d13e      	bne.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d12f      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a48:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a4a:	617b      	str	r3, [r7, #20]
          break;
 8005a4c:	e02f      	b.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5a:	d108      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a5c:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a64:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e007      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a76:	4a15      	ldr	r2, [pc, #84]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a98:	0f1b      	lsrs	r3, r3, #28
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
          break;
 8005aa6:	e002      	b.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
          break;
 8005aac:	bf00      	nop
        }
      }
      break;
 8005aae:	bf00      	nop
    }
  }
  return frequency;
 8005ab0:	697b      	ldr	r3, [r7, #20]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	00bb8000 	.word	0x00bb8000
 8005ac8:	007a1200 	.word	0x007a1200
 8005acc:	00f42400 	.word	0x00f42400

08005ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e07b      	b.n	8005bda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d108      	bne.n	8005afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af2:	d009      	beq.n	8005b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	61da      	str	r2, [r3, #28]
 8005afa:	e005      	b.n	8005b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fc f89a 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	f003 0104 	and.w	r1, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	f003 0210 	and.w	r2, r3, #16
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b088      	sub	sp, #32
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_SPI_Transmit+0x22>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e126      	b.n	8005e52 <HAL_SPI_Transmit+0x270>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c0c:	f7fc face 	bl	80021ac <HAL_GetTick>
 8005c10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d002      	beq.n	8005c28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
 8005c24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c26:	e10b      	b.n	8005e40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_SPI_Transmit+0x52>
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c38:	e102      	b.n	8005e40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c80:	d10f      	bne.n	8005ca2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d007      	beq.n	8005cc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc8:	d14b      	bne.n	8005d62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0xf6>
 8005cd2:	8afb      	ldrh	r3, [r7, #22]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d13e      	bne.n	8005d56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	881a      	ldrh	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cfc:	e02b      	b.n	8005d56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d112      	bne.n	8005d32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	881a      	ldrh	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	1c9a      	adds	r2, r3, #2
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d30:	e011      	b.n	8005d56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d32:	f7fc fa3b 	bl	80021ac <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d803      	bhi.n	8005d4a <HAL_SPI_Transmit+0x168>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_Transmit+0x16e>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d54:	e074      	b.n	8005e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ce      	bne.n	8005cfe <HAL_SPI_Transmit+0x11c>
 8005d60:	e04c      	b.n	8005dfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Transmit+0x18e>
 8005d6a:	8afb      	ldrh	r3, [r7, #22]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d140      	bne.n	8005df2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d96:	e02c      	b.n	8005df2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d113      	bne.n	8005dce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dcc:	e011      	b.n	8005df2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dce:	f7fc f9ed 	bl	80021ac <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d803      	bhi.n	8005de6 <HAL_SPI_Transmit+0x204>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d102      	bne.n	8005dec <HAL_SPI_Transmit+0x20a>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005df0:	e026      	b.n	8005e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1cd      	bne.n	8005d98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fbcb 	bl	800659c <SPI_EndRxTxTransaction>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e000      	b.n	8005e40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b088      	sub	sp, #32
 8005e5e:	af02      	add	r7, sp, #8
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e76:	d112      	bne.n	8005e9e <HAL_SPI_Receive+0x44>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10e      	bne.n	8005e9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2204      	movs	r2, #4
 8005e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f8f1 	bl	800607c <HAL_SPI_TransmitReceive>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	e0ea      	b.n	8006074 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_SPI_Receive+0x52>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e0e3      	b.n	8006074 <HAL_SPI_Receive+0x21a>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fc f97a 	bl	80021ac <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eca:	e0ca      	b.n	8006062 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_Receive+0x7e>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005edc:	e0c1      	b.n	8006062 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f24:	d10f      	bne.n	8005f46 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d007      	beq.n	8005f64 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d162      	bne.n	8006032 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f6c:	e02e      	b.n	8005fcc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d115      	bne.n	8005fa8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f103 020c 	add.w	r2, r3, #12
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fa6:	e011      	b.n	8005fcc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa8:	f7fc f900 	bl	80021ac <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d803      	bhi.n	8005fc0 <HAL_SPI_Receive+0x166>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d102      	bne.n	8005fc6 <HAL_SPI_Receive+0x16c>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fca:	e04a      	b.n	8006062 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1cb      	bne.n	8005f6e <HAL_SPI_Receive+0x114>
 8005fd6:	e031      	b.n	800603c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d113      	bne.n	800600e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	b292      	uxth	r2, r2
 8005ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	1c9a      	adds	r2, r3, #2
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800600c:	e011      	b.n	8006032 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fc f8cd 	bl	80021ac <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_Receive+0x1cc>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_Receive+0x1d2>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006030:	e017      	b.n	8006062 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1cd      	bne.n	8005fd8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa45 	bl	80064d0 <SPI_EndRxTransaction>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
 800605e:	e000      	b.n	8006062 <HAL_SPI_Receive+0x208>
  }

error :
 8006060:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800608a:	2301      	movs	r3, #1
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_SPI_TransmitReceive+0x26>
 800609e:	2302      	movs	r3, #2
 80060a0:	e18a      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x33c>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060aa:	f7fc f87f 	bl	80021ac <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060c0:	887b      	ldrh	r3, [r7, #2]
 80060c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d00f      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x70>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d2:	d107      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x68>
 80060dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d003      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060ea:	e15b      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_SPI_TransmitReceive+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_SPI_TransmitReceive+0x82>
 80060f8:	887b      	ldrh	r3, [r7, #2]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006104:	e14e      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b04      	cmp	r3, #4
 8006110:	d003      	beq.n	800611a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2205      	movs	r2, #5
 8006116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	887a      	ldrh	r2, [r7, #2]
 800612a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d007      	beq.n	800616e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d178      	bne.n	800626a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x10a>
 8006180:	8b7b      	ldrh	r3, [r7, #26]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d166      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	881a      	ldrh	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061aa:	e053      	b.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d11b      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x176>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x176>
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d113      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	1c9a      	adds	r2, r3, #2
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d119      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x1b8>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	b292      	uxth	r2, r2
 8006216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	1c9a      	adds	r2, r3, #2
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006230:	2301      	movs	r3, #1
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006234:	f7fb ffba 	bl	80021ac <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006240:	429a      	cmp	r2, r3
 8006242:	d807      	bhi.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d003      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006252:	e0a7      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1a6      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x130>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1a1      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x130>
 8006268:	e07c      	b.n	8006364 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x1fc>
 8006272:	8b7b      	ldrh	r3, [r7, #26]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d16b      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629e:	e057      	b.n	8006350 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d11c      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x26c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d017      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x26c>
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d114      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d119      	bne.n	800632a <HAL_SPI_TransmitReceive+0x2ae>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d014      	beq.n	800632a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006326:	2301      	movs	r3, #1
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800632a:	f7fb ff3f 	bl	80021ac <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006336:	429a      	cmp	r2, r3
 8006338:	d803      	bhi.n	8006342 <HAL_SPI_TransmitReceive+0x2c6>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d102      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x2cc>
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800634e:	e029      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1a2      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x224>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d19d      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f917 	bl	800659c <SPI_EndRxTxTransaction>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d006      	beq.n	8006382 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006380:	e010      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e000      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3730      	adds	r7, #48	; 0x30
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063d0:	f7fb feec 	bl	80021ac <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063e0:	f7fb fee4 	bl	80021ac <HAL_GetTick>
 80063e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	0d1b      	lsrs	r3, r3, #20
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f6:	e054      	b.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d050      	beq.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006400:	f7fb fed4 	bl	80021ac <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	429a      	cmp	r2, r3
 800640e:	d902      	bls.n	8006416 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d13d      	bne.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d111      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d004      	beq.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006442:	d107      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d10f      	bne.n	800647e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e017      	b.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3b01      	subs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d19b      	bne.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000010 	.word	0x20000010

080064d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064e4:	d111      	bne.n	800650a <SPI_EndRxTransaction+0x3a>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ee:	d004      	beq.n	80064fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f8:	d107      	bne.n	800650a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006508:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006512:	d12a      	bne.n	800656a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651c:	d012      	beq.n	8006544 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	2180      	movs	r1, #128	; 0x80
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff ff49 	bl	80063c0 <SPI_WaitFlagStateUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02d      	beq.n	8006590 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	f043 0220 	orr.w	r2, r3, #32
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e026      	b.n	8006592 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2200      	movs	r2, #0
 800654c:	2101      	movs	r1, #1
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff ff36 	bl	80063c0 <SPI_WaitFlagStateUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01a      	beq.n	8006590 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f043 0220 	orr.w	r2, r3, #32
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e013      	b.n	8006592 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	2101      	movs	r1, #1
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f7ff ff23 	bl	80063c0 <SPI_WaitFlagStateUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006584:	f043 0220 	orr.w	r2, r3, #32
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e000      	b.n	8006592 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <SPI_EndRxTxTransaction+0x7c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	; (800661c <SPI_EndRxTxTransaction+0x80>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	0d5b      	lsrs	r3, r3, #21
 80065b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065b8:	fb02 f303 	mul.w	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c6:	d112      	bne.n	80065ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	; 0x80
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fef4 	bl	80063c0 <SPI_WaitFlagStateUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	f043 0220 	orr.w	r2, r3, #32
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e00f      	b.n	800660e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d0f2      	beq.n	80065ee <SPI_EndRxTxTransaction+0x52>
 8006608:	e000      	b.n	800660c <SPI_EndRxTxTransaction+0x70>
        break;
 800660a:	bf00      	nop
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000010 	.word	0x20000010
 800661c:	165e9f81 	.word	0x165e9f81

08006620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e03f      	b.n	80066b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb fcd0 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2224      	movs	r2, #36	; 0x24
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fd7b 	bl	8007160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695a      	ldr	r2, [r3, #20]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b08a      	sub	sp, #40	; 0x28
 80066be:	af02      	add	r7, sp, #8
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d17c      	bne.n	80067d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_UART_Transmit+0x2c>
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e075      	b.n	80067d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Transmit+0x3e>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e06e      	b.n	80067d6 <HAL_UART_Transmit+0x11c>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2221      	movs	r2, #33	; 0x21
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800670e:	f7fb fd4d 	bl	80021ac <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d108      	bne.n	800673c <HAL_UART_Transmit+0x82>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e003      	b.n	8006744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800674c:	e02a      	b.n	80067a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2200      	movs	r2, #0
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 faf9 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e036      	b.n	80067d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	3302      	adds	r3, #2
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	e007      	b.n	8006796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3301      	adds	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1cf      	bne.n	800674e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2140      	movs	r1, #64	; 0x40
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fac9 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e006      	b.n	80067d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0ba      	sub	sp, #232	; 0xe8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800681e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_UART_IRQHandler+0x66>
 8006832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fbd3 	bl	8006fea <UART_Receive_IT>
      return;
 8006844:	e256      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80de 	beq.w	8006a0c <HAL_UART_IRQHandler+0x22c>
 8006850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800685c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006860:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80d1 	beq.w	8006a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <HAL_UART_IRQHandler+0xae>
 8006876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f043 0201 	orr.w	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <HAL_UART_IRQHandler+0xd2>
 800689a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f043 0202 	orr.w	r2, r3, #2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <HAL_UART_IRQHandler+0xf6>
 80068be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f043 0204 	orr.w	r2, r3, #4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d011      	beq.n	8006906 <HAL_UART_IRQHandler+0x126>
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f043 0208 	orr.w	r2, r3, #8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 81ed 	beq.w	8006cea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_UART_IRQHandler+0x14e>
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fb5e 	bl	8006fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_UART_IRQHandler+0x17a>
 8006952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d04f      	beq.n	80069fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa66 	bl	8006e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d141      	bne.n	80069f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3314      	adds	r3, #20
 8006996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800699a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800699e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1d9      	bne.n	800696e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d013      	beq.n	80069ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	4a7d      	ldr	r2, [pc, #500]	; (8006bbc <HAL_UART_IRQHandler+0x3dc>)
 80069c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fb fd9d 	bl	800250e <HAL_DMA_Abort_IT>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e00e      	b.n	8006a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f99a 	bl	8006d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e00a      	b.n	8006a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f996 	bl	8006d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	e006      	b.n	8006a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f992 	bl	8006d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a06:	e170      	b.n	8006cea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	bf00      	nop
    return;
 8006a0a:	e16e      	b.n	8006cea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 814a 	bne.w	8006caa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8143 	beq.w	8006caa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 813c 	beq.w	8006caa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	f040 80b4 	bne.w	8006bc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8140 	beq.w	8006cee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a76:	429a      	cmp	r2, r3
 8006a78:	f080 8139 	bcs.w	8006cee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8e:	f000 8088 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006abe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1d9      	bne.n	8006a92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e1      	bne.n	8006ade <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3314      	adds	r3, #20
 8006b20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3314      	adds	r3, #20
 8006b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e3      	bne.n	8006b1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b72:	f023 0310 	bic.w	r3, r3, #16
 8006b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e3      	bne.n	8006b60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fb fc46 	bl	800242e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8c0 	bl	8006d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bb8:	e099      	b.n	8006cee <HAL_UART_IRQHandler+0x50e>
 8006bba:	bf00      	nop
 8006bbc:	08006ef3 	.word	0x08006ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 808b 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8086 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c0a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e3      	bne.n	8006be6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3314      	adds	r3, #20
 8006c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c42:	633a      	str	r2, [r7, #48]	; 0x30
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e3      	bne.n	8006c1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	330c      	adds	r3, #12
 8006c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0310 	bic.w	r3, r3, #16
 8006c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c88:	61fa      	str	r2, [r7, #28]
 8006c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	69b9      	ldr	r1, [r7, #24]
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	617b      	str	r3, [r7, #20]
   return(result);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e3      	bne.n	8006c64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f848 	bl	8006d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca8:	e023      	b.n	8006cf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_UART_IRQHandler+0x4ea>
 8006cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f929 	bl	8006f1a <UART_Transmit_IT>
    return;
 8006cc8:	e014      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00e      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x514>
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d008      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f969 	bl	8006fba <UART_EndTransmit_IT>
    return;
 8006ce8:	e004      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
    return;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
      return;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <HAL_UART_IRQHandler+0x514>
      return;
 8006cf2:	bf00      	nop
  }
}
 8006cf4:	37e8      	adds	r7, #232	; 0xe8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop

08006cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b090      	sub	sp, #64	; 0x40
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d60:	e050      	b.n	8006e04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d04c      	beq.n	8006e04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d70:	f7fb fa1c 	bl	80021ac <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d241      	bcs.n	8006e04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006da0:	637a      	str	r2, [r7, #52]	; 0x34
 8006da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3314      	adds	r3, #20
 8006dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd4:	623a      	str	r2, [r7, #32]
 8006dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	69f9      	ldr	r1, [r7, #28]
 8006dda:	6a3a      	ldr	r2, [r7, #32]
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e5      	bne.n	8006db4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e00f      	b.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	bf0c      	ite	eq
 8006e14:	2301      	moveq	r3, #1
 8006e16:	2300      	movne	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d09f      	beq.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3740      	adds	r7, #64	; 0x40
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b095      	sub	sp, #84	; 0x54
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e54:	643a      	str	r2, [r7, #64]	; 0x40
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3314      	adds	r3, #20
 8006e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3314      	adds	r3, #20
 8006e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e5      	bne.n	8006e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d119      	bne.n	8006ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 0310 	bic.w	r3, r3, #16
 8006eba:	647b      	str	r3, [r7, #68]	; 0x44
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ec4:	61ba      	str	r2, [r7, #24]
 8006ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6979      	ldr	r1, [r7, #20]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e5      	bne.n	8006ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ee6:	bf00      	nop
 8006ee8:	3754      	adds	r7, #84	; 0x54
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ff09 	bl	8006d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b21      	cmp	r3, #33	; 0x21
 8006f2c:	d13e      	bne.n	8006fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f36:	d114      	bne.n	8006f62 <UART_Transmit_IT+0x48>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d110      	bne.n	8006f62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	1c9a      	adds	r2, r3, #2
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	621a      	str	r2, [r3, #32]
 8006f60:	e008      	b.n	8006f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	1c59      	adds	r1, r3, #1
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6211      	str	r1, [r2, #32]
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	4619      	mov	r1, r3
 8006f82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10f      	bne.n	8006fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fe8e 	bl	8006cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08c      	sub	sp, #48	; 0x30
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b22      	cmp	r3, #34	; 0x22
 8006ffc:	f040 80ab 	bne.w	8007156 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	d117      	bne.n	800703a <UART_Receive_IT+0x50>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d113      	bne.n	800703a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	b29b      	uxth	r3, r3
 8007024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007028:	b29a      	uxth	r2, r3
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
 8007038:	e026      	b.n	8007088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704c:	d007      	beq.n	800705e <UART_Receive_IT+0x74>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <UART_Receive_IT+0x82>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e008      	b.n	800707e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007078:	b2da      	uxtb	r2, r3
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29b      	uxth	r3, r3
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	4619      	mov	r1, r3
 8007096:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007098:	2b00      	cmp	r3, #0
 800709a:	d15a      	bne.n	8007152 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0220 	bic.w	r2, r2, #32
 80070aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d135      	bne.n	8007148 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007102:	623a      	str	r2, [r7, #32]
 8007104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	69f9      	ldr	r1, [r7, #28]
 8007108:	6a3a      	ldr	r2, [r7, #32]
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0310 	and.w	r3, r3, #16
 8007120:	2b10      	cmp	r3, #16
 8007122:	d10a      	bne.n	800713a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff fdf9 	bl	8006d38 <HAL_UARTEx_RxEventCallback>
 8007146:	e002      	b.n	800714e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fde1 	bl	8006d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	e002      	b.n	8007158 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	e000      	b.n	8007158 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007156:	2302      	movs	r3, #2
  }
}
 8007158:	4618      	mov	r0, r3
 800715a:	3730      	adds	r7, #48	; 0x30
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	b09f      	sub	sp, #124	; 0x7c
 8007166:	af00      	add	r7, sp, #0
 8007168:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007176:	68d9      	ldr	r1, [r3, #12]
 8007178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	ea40 0301 	orr.w	r3, r0, r1
 8007180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	431a      	orrs	r2, r3
 800718c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	431a      	orrs	r2, r3
 8007192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	4313      	orrs	r3, r2
 8007198:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800719a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071a4:	f021 010c 	bic.w	r1, r1, #12
 80071a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071ae:	430b      	orrs	r3, r1
 80071b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071be:	6999      	ldr	r1, [r3, #24]
 80071c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	ea40 0301 	orr.w	r3, r0, r1
 80071c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4bc5      	ldr	r3, [pc, #788]	; (80074e4 <UART_SetConfig+0x384>)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d004      	beq.n	80071de <UART_SetConfig+0x7e>
 80071d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4bc3      	ldr	r3, [pc, #780]	; (80074e8 <UART_SetConfig+0x388>)
 80071da:	429a      	cmp	r2, r3
 80071dc:	d103      	bne.n	80071e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071de:	f7fe fb23 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 80071e2:	6778      	str	r0, [r7, #116]	; 0x74
 80071e4:	e002      	b.n	80071ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071e6:	f7fe fb0b 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 80071ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f4:	f040 80b6 	bne.w	8007364 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071fa:	461c      	mov	r4, r3
 80071fc:	f04f 0500 	mov.w	r5, #0
 8007200:	4622      	mov	r2, r4
 8007202:	462b      	mov	r3, r5
 8007204:	1891      	adds	r1, r2, r2
 8007206:	6439      	str	r1, [r7, #64]	; 0x40
 8007208:	415b      	adcs	r3, r3
 800720a:	647b      	str	r3, [r7, #68]	; 0x44
 800720c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007210:	1912      	adds	r2, r2, r4
 8007212:	eb45 0303 	adc.w	r3, r5, r3
 8007216:	f04f 0000 	mov.w	r0, #0
 800721a:	f04f 0100 	mov.w	r1, #0
 800721e:	00d9      	lsls	r1, r3, #3
 8007220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007224:	00d0      	lsls	r0, r2, #3
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	1911      	adds	r1, r2, r4
 800722c:	6639      	str	r1, [r7, #96]	; 0x60
 800722e:	416b      	adcs	r3, r5
 8007230:	667b      	str	r3, [r7, #100]	; 0x64
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	461a      	mov	r2, r3
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	1891      	adds	r1, r2, r2
 800723e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007240:	415b      	adcs	r3, r3
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007248:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800724c:	f7f9 fcac 	bl	8000ba8 <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4ba5      	ldr	r3, [pc, #660]	; (80074ec <UART_SetConfig+0x38c>)
 8007256:	fba3 2302 	umull	r2, r3, r3, r2
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	011e      	lsls	r6, r3, #4
 800725e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007260:	461c      	mov	r4, r3
 8007262:	f04f 0500 	mov.w	r5, #0
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	1891      	adds	r1, r2, r2
 800726c:	6339      	str	r1, [r7, #48]	; 0x30
 800726e:	415b      	adcs	r3, r3
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
 8007272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007276:	1912      	adds	r2, r2, r4
 8007278:	eb45 0303 	adc.w	r3, r5, r3
 800727c:	f04f 0000 	mov.w	r0, #0
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	00d9      	lsls	r1, r3, #3
 8007286:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800728a:	00d0      	lsls	r0, r2, #3
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	1911      	adds	r1, r2, r4
 8007292:	65b9      	str	r1, [r7, #88]	; 0x58
 8007294:	416b      	adcs	r3, r5
 8007296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	461a      	mov	r2, r3
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	1891      	adds	r1, r2, r2
 80072a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80072a6:	415b      	adcs	r3, r3
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80072b2:	f7f9 fc79 	bl	8000ba8 <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4b8c      	ldr	r3, [pc, #560]	; (80074ec <UART_SetConfig+0x38c>)
 80072bc:	fba3 1302 	umull	r1, r3, r3, r2
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	2164      	movs	r1, #100	; 0x64
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	3332      	adds	r3, #50	; 0x32
 80072ce:	4a87      	ldr	r2, [pc, #540]	; (80074ec <UART_SetConfig+0x38c>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072dc:	441e      	add	r6, r3
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	4618      	mov	r0, r3
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	1894      	adds	r4, r2, r2
 80072ec:	623c      	str	r4, [r7, #32]
 80072ee:	415b      	adcs	r3, r3
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
 80072f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072f6:	1812      	adds	r2, r2, r0
 80072f8:	eb41 0303 	adc.w	r3, r1, r3
 80072fc:	f04f 0400 	mov.w	r4, #0
 8007300:	f04f 0500 	mov.w	r5, #0
 8007304:	00dd      	lsls	r5, r3, #3
 8007306:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800730a:	00d4      	lsls	r4, r2, #3
 800730c:	4622      	mov	r2, r4
 800730e:	462b      	mov	r3, r5
 8007310:	1814      	adds	r4, r2, r0
 8007312:	653c      	str	r4, [r7, #80]	; 0x50
 8007314:	414b      	adcs	r3, r1
 8007316:	657b      	str	r3, [r7, #84]	; 0x54
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	461a      	mov	r2, r3
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	1891      	adds	r1, r2, r2
 8007324:	61b9      	str	r1, [r7, #24]
 8007326:	415b      	adcs	r3, r3
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800732e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007332:	f7f9 fc39 	bl	8000ba8 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4b6c      	ldr	r3, [pc, #432]	; (80074ec <UART_SetConfig+0x38c>)
 800733c:	fba3 1302 	umull	r1, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2164      	movs	r1, #100	; 0x64
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	3332      	adds	r3, #50	; 0x32
 800734e:	4a67      	ldr	r2, [pc, #412]	; (80074ec <UART_SetConfig+0x38c>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f003 0207 	and.w	r2, r3, #7
 800735a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4432      	add	r2, r6
 8007360:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007362:	e0b9      	b.n	80074d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007366:	461c      	mov	r4, r3
 8007368:	f04f 0500 	mov.w	r5, #0
 800736c:	4622      	mov	r2, r4
 800736e:	462b      	mov	r3, r5
 8007370:	1891      	adds	r1, r2, r2
 8007372:	6139      	str	r1, [r7, #16]
 8007374:	415b      	adcs	r3, r3
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800737c:	1912      	adds	r2, r2, r4
 800737e:	eb45 0303 	adc.w	r3, r5, r3
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f04f 0100 	mov.w	r1, #0
 800738a:	00d9      	lsls	r1, r3, #3
 800738c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007390:	00d0      	lsls	r0, r2, #3
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	eb12 0804 	adds.w	r8, r2, r4
 800739a:	eb43 0905 	adc.w	r9, r3, r5
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f04f 0100 	mov.w	r1, #0
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	008b      	lsls	r3, r1, #2
 80073b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073b6:	0082      	lsls	r2, r0, #2
 80073b8:	4640      	mov	r0, r8
 80073ba:	4649      	mov	r1, r9
 80073bc:	f7f9 fbf4 	bl	8000ba8 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4b49      	ldr	r3, [pc, #292]	; (80074ec <UART_SetConfig+0x38c>)
 80073c6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	011e      	lsls	r6, r3, #4
 80073ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d0:	4618      	mov	r0, r3
 80073d2:	f04f 0100 	mov.w	r1, #0
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	1894      	adds	r4, r2, r2
 80073dc:	60bc      	str	r4, [r7, #8]
 80073de:	415b      	adcs	r3, r3
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073e6:	1812      	adds	r2, r2, r0
 80073e8:	eb41 0303 	adc.w	r3, r1, r3
 80073ec:	f04f 0400 	mov.w	r4, #0
 80073f0:	f04f 0500 	mov.w	r5, #0
 80073f4:	00dd      	lsls	r5, r3, #3
 80073f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073fa:	00d4      	lsls	r4, r2, #3
 80073fc:	4622      	mov	r2, r4
 80073fe:	462b      	mov	r3, r5
 8007400:	1814      	adds	r4, r2, r0
 8007402:	64bc      	str	r4, [r7, #72]	; 0x48
 8007404:	414b      	adcs	r3, r1
 8007406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	f04f 0100 	mov.w	r1, #0
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	008b      	lsls	r3, r1, #2
 800741c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007420:	0082      	lsls	r2, r0, #2
 8007422:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007426:	f7f9 fbbf 	bl	8000ba8 <__aeabi_uldivmod>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4b2f      	ldr	r3, [pc, #188]	; (80074ec <UART_SetConfig+0x38c>)
 8007430:	fba3 1302 	umull	r1, r3, r3, r2
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	2164      	movs	r1, #100	; 0x64
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	3332      	adds	r3, #50	; 0x32
 8007442:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <UART_SetConfig+0x38c>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800744e:	441e      	add	r6, r3
 8007450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007452:	4618      	mov	r0, r3
 8007454:	f04f 0100 	mov.w	r1, #0
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	1894      	adds	r4, r2, r2
 800745e:	603c      	str	r4, [r7, #0]
 8007460:	415b      	adcs	r3, r3
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007468:	1812      	adds	r2, r2, r0
 800746a:	eb41 0303 	adc.w	r3, r1, r3
 800746e:	f04f 0400 	mov.w	r4, #0
 8007472:	f04f 0500 	mov.w	r5, #0
 8007476:	00dd      	lsls	r5, r3, #3
 8007478:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800747c:	00d4      	lsls	r4, r2, #3
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	eb12 0a00 	adds.w	sl, r2, r0
 8007486:	eb43 0b01 	adc.w	fp, r3, r1
 800748a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	f04f 0100 	mov.w	r1, #0
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	008b      	lsls	r3, r1, #2
 800749e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074a2:	0082      	lsls	r2, r0, #2
 80074a4:	4650      	mov	r0, sl
 80074a6:	4659      	mov	r1, fp
 80074a8:	f7f9 fb7e 	bl	8000ba8 <__aeabi_uldivmod>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <UART_SetConfig+0x38c>)
 80074b2:	fba3 1302 	umull	r1, r3, r3, r2
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	2164      	movs	r1, #100	; 0x64
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	3332      	adds	r3, #50	; 0x32
 80074c4:	4a09      	ldr	r2, [pc, #36]	; (80074ec <UART_SetConfig+0x38c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	f003 020f 	and.w	r2, r3, #15
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4432      	add	r2, r6
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	bf00      	nop
 80074da:	377c      	adds	r7, #124	; 0x7c
 80074dc:	46bd      	mov	sp, r7
 80074de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e2:	bf00      	nop
 80074e4:	40011000 	.word	0x40011000
 80074e8:	40011400 	.word	0x40011400
 80074ec:	51eb851f 	.word	0x51eb851f

080074f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074f0:	b084      	sub	sp, #16
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	f107 001c 	add.w	r0, r7, #28
 80074fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	2b01      	cmp	r3, #1
 8007506:	d122      	bne.n	800754e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800751c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d105      	bne.n	8007542 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9a0 	bl	8007888 <USB_CoreReset>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
 800754c:	e01a      	b.n	8007584 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f994 	bl	8007888 <USB_CoreReset>
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
 8007576:	e005      	b.n	8007584 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2b01      	cmp	r3, #1
 8007588:	d10b      	bne.n	80075a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f043 0206 	orr.w	r2, r3, #6
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075ae:	b004      	add	sp, #16
 80075b0:	4770      	bx	lr

080075b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f043 0201 	orr.w	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f023 0201 	bic.w	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d115      	bne.n	8007644 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007624:	2001      	movs	r0, #1
 8007626:	f7fa fdcd 	bl	80021c4 <HAL_Delay>
      ms++;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f91a 	bl	800786a <USB_GetMode>
 8007636:	4603      	mov	r3, r0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d01e      	beq.n	800767a <USB_SetCurrentMode+0x84>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b31      	cmp	r3, #49	; 0x31
 8007640:	d9f0      	bls.n	8007624 <USB_SetCurrentMode+0x2e>
 8007642:	e01a      	b.n	800767a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d115      	bne.n	8007676 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007656:	2001      	movs	r0, #1
 8007658:	f7fa fdb4 	bl	80021c4 <HAL_Delay>
      ms++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f901 	bl	800786a <USB_GetMode>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <USB_SetCurrentMode+0x84>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b31      	cmp	r3, #49	; 0x31
 8007672:	d9f0      	bls.n	8007656 <USB_SetCurrentMode+0x60>
 8007674:	e001      	b.n	800767a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e005      	b.n	8007686 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b32      	cmp	r3, #50	; 0x32
 800767e:	d101      	bne.n	8007684 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	019b      	lsls	r3, r3, #6
 80076a2:	f043 0220 	orr.w	r2, r3, #32
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <USB_FlushTxFifo+0x44>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e006      	b.n	80076c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d0f1      	beq.n	80076aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	00030d40 	.word	0x00030d40

080076d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2210      	movs	r2, #16
 80076e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	4a08      	ldr	r2, [pc, #32]	; (8007714 <USB_FlushRxFifo+0x3c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d901      	bls.n	80076fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e006      	b.n	8007708 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b10      	cmp	r3, #16
 8007704:	d0f1      	beq.n	80076ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	00030d40 	.word	0x00030d40

08007718 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007718:	b480      	push	{r7}
 800771a:	b089      	sub	sp, #36	; 0x24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4611      	mov	r1, r2
 8007724:	461a      	mov	r2, r3
 8007726:	460b      	mov	r3, r1
 8007728:	71fb      	strb	r3, [r7, #7]
 800772a:	4613      	mov	r3, r2
 800772c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007736:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d123      	bne.n	8007786 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800773e:	88bb      	ldrh	r3, [r7, #4]
 8007740:	3303      	adds	r3, #3
 8007742:	089b      	lsrs	r3, r3, #2
 8007744:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007746:	2300      	movs	r3, #0
 8007748:	61bb      	str	r3, [r7, #24]
 800774a:	e018      	b.n	800777e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	031a      	lsls	r2, r3, #12
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	4413      	add	r3, r2
 8007754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007758:	461a      	mov	r2, r3
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	3301      	adds	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3301      	adds	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	3301      	adds	r3, #1
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	429a      	cmp	r2, r3
 8007784:	d3e2      	bcc.n	800774c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3724      	adds	r7, #36	; 0x24
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007794:	b480      	push	{r7}
 8007796:	b08b      	sub	sp, #44	; 0x2c
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	089b      	lsrs	r3, r3, #2
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077ba:	2300      	movs	r3, #0
 80077bc:	623b      	str	r3, [r7, #32]
 80077be:	e014      	b.n	80077ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	3301      	adds	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	3301      	adds	r3, #1
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	3301      	adds	r3, #1
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	3301      	adds	r3, #1
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	3301      	adds	r3, #1
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	6a3a      	ldr	r2, [r7, #32]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d3e6      	bcc.n	80077c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077f2:	8bfb      	ldrh	r3, [r7, #30]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01e      	beq.n	8007836 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007802:	461a      	mov	r2, r3
 8007804:	f107 0310 	add.w	r3, r7, #16
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	fa22 f303 	lsr.w	r3, r2, r3
 8007818:	b2da      	uxtb	r2, r3
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	701a      	strb	r2, [r3, #0]
      i++;
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	3301      	adds	r3, #1
 8007822:	623b      	str	r3, [r7, #32]
      pDest++;
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	3301      	adds	r3, #1
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800782a:	8bfb      	ldrh	r3, [r7, #30]
 800782c:	3b01      	subs	r3, #1
 800782e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007830:	8bfb      	ldrh	r3, [r7, #30]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1ea      	bne.n	800780c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007838:	4618      	mov	r0, r3
 800783a:	372c      	adds	r7, #44	; 0x2c
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800785c:	68fb      	ldr	r3, [r7, #12]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0301 	and.w	r3, r3, #1
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <USB_CoreReset+0x60>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d901      	bls.n	80078a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e01a      	b.n	80078da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	daf3      	bge.n	8007894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f043 0201 	orr.w	r2, r3, #1
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <USB_CoreReset+0x60>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d901      	bls.n	80078cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e006      	b.n	80078da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d0f1      	beq.n	80078bc <USB_CoreReset+0x34>

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	00030d40 	.word	0x00030d40

080078ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078ec:	b084      	sub	sp, #16
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	f107 001c 	add.w	r0, r7, #28
 80078fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007908:	461a      	mov	r2, r3
 800790a:	2300      	movs	r3, #0
 800790c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793a:	2b00      	cmp	r3, #0
 800793c:	d018      	beq.n	8007970 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10a      	bne.n	800795a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007952:	f043 0304 	orr.w	r3, r3, #4
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e014      	b.n	8007984 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007968:	f023 0304 	bic.w	r3, r3, #4
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e009      	b.n	8007984 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800797e:	f023 0304 	bic.w	r3, r3, #4
 8007982:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007984:	2110      	movs	r1, #16
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fe82 	bl	8007690 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fea3 	bl	80076d8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e015      	b.n	80079c4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a4:	461a      	mov	r2, r3
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b8:	461a      	mov	r2, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d3e5      	bcc.n	8007998 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <USB_HostInit+0x154>)
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <USB_HostInit+0x158>)
 80079f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80079fc:	e009      	b.n	8007a12 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <USB_HostInit+0x15c>)
 8007a08:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a0f      	ldr	r2, [pc, #60]	; (8007a4c <USB_HostInit+0x160>)
 8007a0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f043 0210 	orr.w	r2, r3, #16
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <USB_HostInit+0x164>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a3c:	b004      	add	sp, #16
 8007a3e:	4770      	bx	lr
 8007a40:	01000200 	.word	0x01000200
 8007a44:	00e00300 	.word	0x00e00300
 8007a48:	00600080 	.word	0x00600080
 8007a4c:	004000e0 	.word	0x004000e0
 8007a50:	a3200008 	.word	0xa3200008

08007a54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a72:	f023 0303 	bic.w	r3, r3, #3
 8007a76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d107      	bne.n	8007aa6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007aa2:	6053      	str	r3, [r2, #4]
 8007aa4:	e009      	b.n	8007aba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d106      	bne.n	8007aba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ab8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ae8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007af8:	2064      	movs	r0, #100	; 0x64
 8007afa:	f7fa fb63 	bl	80021c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007b0c:	200a      	movs	r0, #10
 8007b0e:	f7fa fb59 	bl	80021c4 <HAL_Delay>

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d109      	bne.n	8007b60 <USB_DriveVbus+0x44>
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d106      	bne.n	8007b60 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b5e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6a:	d109      	bne.n	8007b80 <USB_DriveVbus+0x64>
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b7e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	0c5b      	lsrs	r3, r3, #17
 8007bac:	f003 0303 	and.w	r3, r3, #3
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	b29b      	uxth	r3, r3
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	461a      	mov	r2, r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	70fb      	strb	r3, [r7, #3]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70bb      	strb	r3, [r7, #2]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f04f 33ff 	mov.w	r3, #4294967295
 8007c14:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007c16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d87e      	bhi.n	8007d1c <USB_HC_Init+0x13c>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <USB_HC_Init+0x44>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007cdf 	.word	0x08007cdf
 8007c2c:	08007c35 	.word	0x08007c35
 8007c30:	08007ca1 	.word	0x08007ca1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c40:	461a      	mov	r2, r3
 8007c42:	f240 439d 	movw	r3, #1181	; 0x49d
 8007c46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da10      	bge.n	8007c72 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	78fa      	ldrb	r2, [r7, #3]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007c70:	e057      	b.n	8007d22 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d051      	beq.n	8007d22 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c9c:	60d3      	str	r3, [r2, #12]
      break;
 8007c9e:	e040      	b.n	8007d22 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cac:	461a      	mov	r2, r3
 8007cae:	f240 639d 	movw	r3, #1693	; 0x69d
 8007cb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da34      	bge.n	8007d26 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	78fa      	ldrb	r2, [r7, #3]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cda:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007cdc:	e023      	b.n	8007d26 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cea:	461a      	mov	r2, r3
 8007cec:	f240 2325 	movw	r3, #549	; 0x225
 8007cf0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da17      	bge.n	8007d2a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	78fa      	ldrb	r2, [r7, #3]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d14:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007d18:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007d1a:	e006      	b.n	8007d2a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	77fb      	strb	r3, [r7, #31]
      break;
 8007d20:	e004      	b.n	8007d2c <USB_HC_Init+0x14c>
      break;
 8007d22:	bf00      	nop
 8007d24:	e002      	b.n	8007d2c <USB_HC_Init+0x14c>
      break;
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <USB_HC_Init+0x14c>
      break;
 8007d2a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d40:	6939      	ldr	r1, [r7, #16]
 8007d42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d46:	4313      	orrs	r3, r2
 8007d48:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da03      	bge.n	8007d66 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	e001      	b.n	8007d6a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff ff0f 	bl	8007b8e <USB_GetHostSpeed>
 8007d70:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d106      	bne.n	8007d88 <USB_HC_Init+0x1a8>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d003      	beq.n	8007d88 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	e001      	b.n	8007d8c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d8c:	787b      	ldrb	r3, [r7, #1]
 8007d8e:	059b      	lsls	r3, r3, #22
 8007d90:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d94:	78bb      	ldrb	r3, [r7, #2]
 8007d96:	02db      	lsls	r3, r3, #11
 8007d98:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d9c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007da2:	049b      	lsls	r3, r3, #18
 8007da4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007da8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007daa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007db0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	0159      	lsls	r1, r3, #5
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	440b      	add	r3, r1
 8007dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dc8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007dca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d10f      	bne.n	8007df2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007df0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e18:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d02d      	beq.n	8007e82 <USB_HC_StartXfer+0x86>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	791b      	ldrb	r3, [r3, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d129      	bne.n	8007e82 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d117      	bne.n	8007e64 <USB_HC_StartXfer+0x68>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	79db      	ldrb	r3, [r3, #7]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <USB_HC_StartXfer+0x48>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	79db      	ldrb	r3, [r3, #7]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d10f      	bne.n	8007e64 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	6a3a      	ldr	r2, [r7, #32]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <USB_HC_StartXfer+0x86>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	795b      	ldrb	r3, [r3, #5]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d107      	bne.n	8007e82 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	4619      	mov	r1, r3
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fa2f 	bl	80082dc <USB_DoPing>
      return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e0f8      	b.n	8008074 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d018      	beq.n	8007ebc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	8912      	ldrh	r2, [r2, #8]
 8007e92:	4413      	add	r3, r2
 8007e94:	3b01      	subs	r3, #1
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	8912      	ldrh	r2, [r2, #8]
 8007e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e9e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007ea0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ea2:	8b7b      	ldrh	r3, [r7, #26]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d90b      	bls.n	8007ec0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007ea8:	8b7b      	ldrh	r3, [r7, #26]
 8007eaa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	8912      	ldrh	r2, [r2, #8]
 8007eb2:	fb02 f203 	mul.w	r2, r2, r3
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	611a      	str	r2, [r3, #16]
 8007eba:	e001      	b.n	8007ec0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	8912      	ldrh	r2, [r2, #8]
 8007ece:	fb02 f203 	mul.w	r2, r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	611a      	str	r2, [r3, #16]
 8007ed6:	e003      	b.n	8007ee0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	695a      	ldr	r2, [r3, #20]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eea:	04d9      	lsls	r1, r3, #19
 8007eec:	4b63      	ldr	r3, [pc, #396]	; (800807c <USB_HC_StartXfer+0x280>)
 8007eee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ef0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	7a9b      	ldrb	r3, [r3, #10]
 8007ef6:	075b      	lsls	r3, r3, #29
 8007ef8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007efc:	69f9      	ldr	r1, [r7, #28]
 8007efe:	0148      	lsls	r0, r1, #5
 8007f00:	6a39      	ldr	r1, [r7, #32]
 8007f02:	4401      	add	r1, r0
 8007f04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	68d9      	ldr	r1, [r3, #12]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f22:	460a      	mov	r2, r1
 8007f24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bf0c      	ite	eq
 8007f36:	2301      	moveq	r3, #1
 8007f38:	2300      	movne	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	6a3a      	ldr	r2, [r7, #32]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	7e7b      	ldrb	r3, [r7, #25]
 8007f6e:	075b      	lsls	r3, r3, #29
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	0148      	lsls	r0, r1, #5
 8007f74:	6a39      	ldr	r1, [r7, #32]
 8007f76:	4401      	add	r1, r0
 8007f78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f96:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	78db      	ldrb	r3, [r3, #3]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	e003      	b.n	8007fb2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fb0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e04e      	b.n	8008074 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	78db      	ldrb	r3, [r3, #3]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d149      	bne.n	8008072 <USB_HC_StartXfer+0x276>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d045      	beq.n	8008072 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	79db      	ldrb	r3, [r3, #7]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d830      	bhi.n	8008050 <USB_HC_StartXfer+0x254>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <USB_HC_StartXfer+0x1f8>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008005 	.word	0x08008005
 8007ff8:	08008029 	.word	0x08008029
 8007ffc:	08008005 	.word	0x08008005
 8008000:	08008029 	.word	0x08008029
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	3303      	adds	r3, #3
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800800e:	8afa      	ldrh	r2, [r7, #22]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	b29b      	uxth	r3, r3
 8008016:	429a      	cmp	r2, r3
 8008018:	d91c      	bls.n	8008054 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f043 0220 	orr.w	r2, r3, #32
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	619a      	str	r2, [r3, #24]
        }
        break;
 8008026:	e015      	b.n	8008054 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	3303      	adds	r3, #3
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008032:	8afa      	ldrh	r2, [r7, #22]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	b29b      	uxth	r3, r3
 800803e:	429a      	cmp	r2, r3
 8008040:	d90a      	bls.n	8008058 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	619a      	str	r2, [r3, #24]
        }
        break;
 800804e:	e003      	b.n	8008058 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008050:	bf00      	nop
 8008052:	e002      	b.n	800805a <USB_HC_StartXfer+0x25e>
        break;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <USB_HC_StartXfer+0x25e>
        break;
 8008058:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	68d9      	ldr	r1, [r3, #12]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	785a      	ldrb	r2, [r3, #1]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	b29b      	uxth	r3, r3
 8008068:	2000      	movs	r0, #0
 800806a:	9000      	str	r0, [sp, #0]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fb53 	bl	8007718 <USB_WritePacket>
  }

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3728      	adds	r7, #40	; 0x28
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	1ff80000 	.word	0x1ff80000

08008080 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	b29b      	uxth	r3, r3
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b089      	sub	sp, #36	; 0x24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	0c9b      	lsrs	r3, r3, #18
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	0fdb      	lsrs	r3, r3, #31
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	d104      	bne.n	80080fc <USB_HC_Halt+0x5a>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e0e8      	b.n	80082ce <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <USB_HC_Halt+0x66>
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d173      	bne.n	80081f0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	4413      	add	r3, r2
 8008110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	0151      	lsls	r1, r2, #5
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	440a      	add	r2, r1
 800811e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008126:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 80cb 	bne.w	80082cc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d143      	bne.n	80081ca <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	440a      	add	r2, r1
 8008158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800815c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008160:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	4413      	add	r3, r2
 800816a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	440a      	add	r2, r1
 8008178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800817c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008180:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	440a      	add	r2, r1
 8008198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800819c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081a0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	3301      	adds	r3, #1
 80081a6:	61fb      	str	r3, [r7, #28]
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081ae:	d81d      	bhi.n	80081ec <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081c6:	d0ec      	beq.n	80081a2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081c8:	e080      	b.n	80082cc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	0151      	lsls	r1, r2, #5
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	440a      	add	r2, r1
 80081e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081ea:	e06f      	b.n	80082cc <USB_HC_Halt+0x22a>
            break;
 80081ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081ee:	e06d      	b.n	80082cc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	440a      	add	r2, r1
 8008206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800820a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800820e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d143      	bne.n	80082a8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	4413      	add	r3, r2
 8008228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	440a      	add	r2, r1
 8008236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800823a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800823e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	440a      	add	r2, r1
 8008256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800825e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	440a      	add	r2, r1
 8008276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800827a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800827e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	3301      	adds	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800828c:	d81d      	bhi.n	80082ca <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	4413      	add	r3, r2
 8008296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082a4:	d0ec      	beq.n	8008280 <USB_HC_Halt+0x1de>
 80082a6:	e011      	b.n	80082cc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	e000      	b.n	80082cc <USB_HC_Halt+0x22a>
          break;
 80082ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3724      	adds	r7, #36	; 0x24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
	...

080082dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80082f0:	2301      	movs	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	04da      	lsls	r2, r3, #19
 80082f8:	4b15      	ldr	r3, [pc, #84]	; (8008350 <USB_DoPing+0x74>)
 80082fa:	4013      	ands	r3, r2
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	0151      	lsls	r1, r2, #5
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	440a      	add	r2, r1
 8008304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800830c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008324:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800832c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	4413      	add	r3, r2
 8008336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833a:	461a      	mov	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	1ff80000 	.word	0x1ff80000

08008354 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff f935 	bl	80075d4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800836a:	2110      	movs	r1, #16
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff f98f 	bl	8007690 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff f9b0 	bl	80076d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	e01f      	b.n	80083be <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008394:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800839c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b2:	461a      	mov	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	3301      	adds	r3, #1
 80083bc:	613b      	str	r3, [r7, #16]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b0f      	cmp	r3, #15
 80083c2:	d9dc      	bls.n	800837e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e034      	b.n	8008434 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fe:	461a      	mov	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008410:	d80c      	bhi.n	800842c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008428:	d0ec      	beq.n	8008404 <USB_StopHost+0xb0>
 800842a:	e000      	b.n	800842e <USB_StopHost+0xda>
        break;
 800842c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b0f      	cmp	r3, #15
 8008438:	d9c7      	bls.n	80083ca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008440:	461a      	mov	r2, r3
 8008442:	f04f 33ff 	mov.w	r3, #4294967295
 8008446:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f04f 32ff 	mov.w	r2, #4294967295
 800844e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff f8ae 	bl	80075b2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b089      	sub	sp, #36	; 0x24
 8008464:	af04      	add	r7, sp, #16
 8008466:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008468:	2301      	movs	r3, #1
 800846a:	2202      	movs	r2, #2
 800846c:	2102      	movs	r1, #2
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fc66 	bl	8008d40 <USBH_FindInterface>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2bff      	cmp	r3, #255	; 0xff
 800847c:	d002      	beq.n	8008484 <USBH_CDC_InterfaceInit+0x24>
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d901      	bls.n	8008488 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008484:	2302      	movs	r3, #2
 8008486:	e13d      	b.n	8008704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fc3b 	bl	8008d08 <USBH_SelectInterface>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800849c:	2302      	movs	r3, #2
 800849e:	e131      	b.n	8008704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80084a6:	2050      	movs	r0, #80	; 0x50
 80084a8:	f002 fa00 	bl	800a8ac <malloc>
 80084ac:	4603      	mov	r3, r0
 80084ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80084c0:	2302      	movs	r3, #2
 80084c2:	e11f      	b.n	8008704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80084c4:	2250      	movs	r2, #80	; 0x50
 80084c6:	2100      	movs	r1, #0
 80084c8:	68b8      	ldr	r0, [r7, #8]
 80084ca:	f002 fa0d 	bl	800a8e8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	211a      	movs	r1, #26
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	4413      	add	r3, r2
 80084da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b25b      	sxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	da15      	bge.n	8008512 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	211a      	movs	r1, #26
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	211a      	movs	r1, #26
 8008502:	fb01 f303 	mul.w	r3, r1, r3
 8008506:	4413      	add	r3, r2
 8008508:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800850c:	881a      	ldrh	r2, [r3, #0]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 fe32 	bl	800a182 <USBH_AllocPipe>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	7819      	ldrb	r1, [r3, #0]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	7858      	ldrb	r0, [r3, #1]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	8952      	ldrh	r2, [r2, #10]
 800853e:	9202      	str	r2, [sp, #8]
 8008540:	2203      	movs	r2, #3
 8008542:	9201      	str	r2, [sp, #4]
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	4623      	mov	r3, r4
 8008548:	4602      	mov	r2, r0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fdea 	bl	800a124 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2200      	movs	r2, #0
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f002 f8f9 	bl	800a750 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800855e:	2300      	movs	r3, #0
 8008560:	2200      	movs	r2, #0
 8008562:	210a      	movs	r1, #10
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fbeb 	bl	8008d40 <USBH_FindInterface>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2bff      	cmp	r3, #255	; 0xff
 8008572:	d002      	beq.n	800857a <USBH_CDC_InterfaceInit+0x11a>
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d901      	bls.n	800857e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	e0c2      	b.n	8008704 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	211a      	movs	r1, #26
 8008584:	fb01 f303 	mul.w	r3, r1, r3
 8008588:	4413      	add	r3, r2
 800858a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b25b      	sxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	da16      	bge.n	80085c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	211a      	movs	r1, #26
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	211a      	movs	r1, #26
 80085b2:	fb01 f303 	mul.w	r3, r1, r3
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	835a      	strh	r2, [r3, #26]
 80085c2:	e015      	b.n	80085f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	211a      	movs	r1, #26
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	4413      	add	r3, r2
 80085d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	211a      	movs	r1, #26
 80085e0:	fb01 f303 	mul.w	r3, r1, r3
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085ea:	881a      	ldrh	r2, [r3, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	211a      	movs	r1, #26
 80085f6:	fb01 f303 	mul.w	r3, r1, r3
 80085fa:	4413      	add	r3, r2
 80085fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b25b      	sxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	da16      	bge.n	8008636 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	211a      	movs	r1, #26
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	4413      	add	r3, r2
 8008614:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	211a      	movs	r1, #26
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	4413      	add	r3, r2
 800862a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800862e:	881a      	ldrh	r2, [r3, #0]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	835a      	strh	r2, [r3, #26]
 8008634:	e015      	b.n	8008662 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	211a      	movs	r1, #26
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	4413      	add	r3, r2
 8008642:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	211a      	movs	r1, #26
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	4413      	add	r3, r2
 8008658:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800865c:	881a      	ldrh	r2, [r3, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	7b9b      	ldrb	r3, [r3, #14]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 fd8a 	bl	800a182 <USBH_AllocPipe>
 800866e:	4603      	mov	r3, r0
 8008670:	461a      	mov	r2, r3
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	7bdb      	ldrb	r3, [r3, #15]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fd80 	bl	800a182 <USBH_AllocPipe>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	7b59      	ldrb	r1, [r3, #13]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	7b98      	ldrb	r0, [r3, #14]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	8b12      	ldrh	r2, [r2, #24]
 80086a2:	9202      	str	r2, [sp, #8]
 80086a4:	2202      	movs	r2, #2
 80086a6:	9201      	str	r2, [sp, #4]
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	4623      	mov	r3, r4
 80086ac:	4602      	mov	r2, r0
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fd38 	bl	800a124 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7b19      	ldrb	r1, [r3, #12]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	7bd8      	ldrb	r0, [r3, #15]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	8b52      	ldrh	r2, [r2, #26]
 80086cc:	9202      	str	r2, [sp, #8]
 80086ce:	2202      	movs	r2, #2
 80086d0:	9201      	str	r2, [sp, #4]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	4623      	mov	r3, r4
 80086d6:	4602      	mov	r2, r0
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fd23 	bl	800a124 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	7b5b      	ldrb	r3, [r3, #13]
 80086ea:	2200      	movs	r2, #0
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f002 f82e 	bl	800a750 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	7b1b      	ldrb	r3, [r3, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f002 f827 	bl	800a750 <USBH_LL_SetToggle>

  return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bd90      	pop	{r4, r7, pc}

0800870c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00e      	beq.n	8008744 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fd18 	bl	800a162 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fd43 	bl	800a1c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	7b1b      	ldrb	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	7b1b      	ldrb	r3, [r3, #12]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fd05 	bl	800a162 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	7b1b      	ldrb	r3, [r3, #12]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 fd30 	bl	800a1c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	7b5b      	ldrb	r3, [r3, #13]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00e      	beq.n	8008790 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	7b5b      	ldrb	r3, [r3, #13]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 fcf2 	bl	800a162 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	7b5b      	ldrb	r3, [r3, #13]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fd1d 	bl	800a1c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 f889 	bl	800a8bc <free>
    phost->pActiveClass->pData = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b0:	2200      	movs	r2, #0
 80087b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3340      	adds	r3, #64	; 0x40
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8b1 	bl	800893e <GetLineCoding>
 80087dc:	4603      	mov	r3, r0
 80087de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d105      	bne.n	80087f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087ec:	2102      	movs	r1, #2
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80087f2:	7afb      	ldrb	r3, [r7, #11]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800881c:	2b04      	cmp	r3, #4
 800881e:	d877      	bhi.n	8008910 <USBH_CDC_Process+0x114>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <USBH_CDC_Process+0x2c>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	0800883d 	.word	0x0800883d
 800882c:	08008843 	.word	0x08008843
 8008830:	08008873 	.word	0x08008873
 8008834:	080088e7 	.word	0x080088e7
 8008838:	080088f5 	.word	0x080088f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
      break;
 8008840:	e06d      	b.n	800891e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f897 	bl	800897c <SetLineCoding>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008860:	e058      	b.n	8008914 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d055      	beq.n	8008914 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2204      	movs	r2, #4
 800886c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008870:	e050      	b.n	8008914 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	3340      	adds	r3, #64	; 0x40
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f860 	bl	800893e <GetLineCoding>
 800887e:	4603      	mov	r3, r0
 8008880:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d126      	bne.n	80088d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889a:	791b      	ldrb	r3, [r3, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d13b      	bne.n	8008918 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d133      	bne.n	8008918 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088bc:	429a      	cmp	r2, r3
 80088be:	d12b      	bne.n	8008918 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d124      	bne.n	8008918 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f958 	bl	8008b84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088d4:	e020      	b.n	8008918 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d01d      	beq.n	8008918 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2204      	movs	r2, #4
 80088e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80088e4:	e018      	b.n	8008918 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f867 	bl	80089ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f8da 	bl	8008aa6 <CDC_ProcessReception>
      break;
 80088f2:	e014      	b.n	800891e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 ffe3 	bl	80098c2 <USBH_ClrFeature>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800890e:	e005      	b.n	800891c <USBH_CDC_Process+0x120>

    default:
      break;
 8008910:	bf00      	nop
 8008912:	e004      	b.n	800891e <USBH_CDC_Process+0x122>
      break;
 8008914:	bf00      	nop
 8008916:	e002      	b.n	800891e <USBH_CDC_Process+0x122>
      break;
 8008918:	bf00      	nop
 800891a:	e000      	b.n	800891e <USBH_CDC_Process+0x122>
      break;
 800891c:	bf00      	nop

  }

  return status;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	22a1      	movs	r2, #161	; 0xa1
 800894c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2221      	movs	r2, #33	; 0x21
 8008952:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2207      	movs	r2, #7
 8008964:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2207      	movs	r2, #7
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 f988 	bl	8009c82 <USBH_CtlReq>
 8008972:	4603      	mov	r3, r0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2221      	movs	r2, #33	; 0x21
 800898a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2207      	movs	r2, #7
 80089a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2207      	movs	r2, #7
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f969 	bl	8009c82 <USBH_CtlReq>
 80089b0:	4603      	mov	r3, r0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af02      	add	r7, sp, #8
 80089c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d002      	beq.n	80089e0 <CDC_ProcessTransmission+0x26>
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d023      	beq.n	8008a26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80089de:	e05e      	b.n	8008a9e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	8b12      	ldrh	r2, [r2, #24]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d90b      	bls.n	8008a04 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	69d9      	ldr	r1, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8b1a      	ldrh	r2, [r3, #24]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	7b5b      	ldrb	r3, [r3, #13]
 80089f8:	2001      	movs	r0, #1
 80089fa:	9000      	str	r0, [sp, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 fb4e 	bl	800a09e <USBH_BulkSendData>
 8008a02:	e00b      	b.n	8008a1c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	7b5b      	ldrb	r3, [r3, #13]
 8008a12:	2001      	movs	r0, #1
 8008a14:	9000      	str	r0, [sp, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fb41 	bl	800a09e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a24:	e03b      	b.n	8008a9e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	7b5b      	ldrb	r3, [r3, #13]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fe65 	bl	800a6fc <USBH_LL_GetURBState>
 8008a32:	4603      	mov	r3, r0
 8008a34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d128      	bne.n	8008a8e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	8b12      	ldrh	r2, [r2, #24]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d90e      	bls.n	8008a66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	8b12      	ldrh	r2, [r2, #24]
 8008a50:	1a9a      	subs	r2, r3, r2
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	8b12      	ldrh	r2, [r2, #24]
 8008a5e:	441a      	add	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	61da      	str	r2, [r3, #28]
 8008a64:	e002      	b.n	8008a6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d004      	beq.n	8008a7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a7c:	e00e      	b.n	8008a9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f868 	bl	8008b5c <USBH_CDC_TransmitCallback>
      break;
 8008a8c:	e006      	b.n	8008a9c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d103      	bne.n	8008a9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a9c:	bf00      	nop
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d002      	beq.n	8008acc <CDC_ProcessReception+0x26>
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d00e      	beq.n	8008ae8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008aca:	e043      	b.n	8008b54 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	6a19      	ldr	r1, [r3, #32]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	8b5a      	ldrh	r2, [r3, #26]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	7b1b      	ldrb	r3, [r3, #12]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fb05 	bl	800a0e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2204      	movs	r2, #4
 8008ae2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ae6:	e035      	b.n	8008b54 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	7b1b      	ldrb	r3, [r3, #12]
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fe04 	bl	800a6fc <USBH_LL_GetURBState>
 8008af4:	4603      	mov	r3, r0
 8008af6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008af8:	7cfb      	ldrb	r3, [r7, #19]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d129      	bne.n	8008b52 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	7b1b      	ldrb	r3, [r3, #12]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 fd67 	bl	800a5d8 <USBH_LL_GetLastXferSize>
 8008b0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d016      	beq.n	8008b44 <CDC_ProcessReception+0x9e>
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	8b5b      	ldrh	r3, [r3, #26]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d910      	bls.n	8008b44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6a1a      	ldr	r2, [r3, #32]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	441a      	add	r2, r3
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008b42:	e006      	b.n	8008b52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f80f 	bl	8008b70 <USBH_CDC_ReceiveCallback>
      break;
 8008b52:	bf00      	nop
  }
}
 8008b54:	bf00      	nop
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e029      	b.n	8008c04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f81f 	bl	8008c0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f001 fc37 	bl	800a470 <USBH_LL_Init>

  return USBH_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	e009      	b.n	8008c32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	33e0      	adds	r3, #224	; 0xe0
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	2200      	movs	r2, #0
 8008c2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b0e      	cmp	r3, #14
 8008c36:	d9f2      	bls.n	8008c1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e009      	b.n	8008c52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c48:	2200      	movs	r2, #0
 8008c4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d3f1      	bcc.n	8008c3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2240      	movs	r2, #64	; 0x40
 8008c7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d016      	beq.n	8008cf6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10e      	bne.n	8008cf0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cd8:	1c59      	adds	r1, r3, #1
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	33de      	adds	r3, #222	; 0xde
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
 8008cee:	e004      	b.n	8008cfa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e001      	b.n	8008cfa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d204      	bcs.n	8008d2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008d2c:	e001      	b.n	8008d32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	70fb      	strb	r3, [r7, #3]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70bb      	strb	r3, [r7, #2]
 8008d56:	4613      	mov	r3, r2
 8008d58:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d68:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d6a:	e025      	b.n	8008db8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	221a      	movs	r2, #26
 8008d70:	fb02 f303 	mul.w	r3, r2, r3
 8008d74:	3308      	adds	r3, #8
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	795b      	ldrb	r3, [r3, #5]
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d002      	beq.n	8008d8e <USBH_FindInterface+0x4e>
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	2bff      	cmp	r3, #255	; 0xff
 8008d8c:	d111      	bne.n	8008db2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d92:	78ba      	ldrb	r2, [r7, #2]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d002      	beq.n	8008d9e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d98:	78bb      	ldrb	r3, [r7, #2]
 8008d9a:	2bff      	cmp	r3, #255	; 0xff
 8008d9c:	d109      	bne.n	8008db2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008da2:	787a      	ldrb	r2, [r7, #1]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d002      	beq.n	8008dae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008da8:	787b      	ldrb	r3, [r7, #1]
 8008daa:	2bff      	cmp	r3, #255	; 0xff
 8008dac:	d101      	bne.n	8008db2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	e006      	b.n	8008dc0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	3301      	adds	r3, #1
 8008db6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d9d6      	bls.n	8008d6c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008dbe:	23ff      	movs	r3, #255	; 0xff
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 fb87 	bl	800a4e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008dda:	2101      	movs	r1, #1
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fca0 	bl	800a722 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af04      	add	r7, sp, #16
 8008df2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008df4:	2302      	movs	r3, #2
 8008df6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d102      	bne.n	8008e0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2203      	movs	r2, #3
 8008e0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b0b      	cmp	r3, #11
 8008e16:	f200 81b3 	bhi.w	8009180 <USBH_Process+0x394>
 8008e1a:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <USBH_Process+0x34>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008e51 	.word	0x08008e51
 8008e24:	08008e83 	.word	0x08008e83
 8008e28:	08008eeb 	.word	0x08008eeb
 8008e2c:	0800911b 	.word	0x0800911b
 8008e30:	08009181 	.word	0x08009181
 8008e34:	08008f8f 	.word	0x08008f8f
 8008e38:	080090c1 	.word	0x080090c1
 8008e3c:	08008fc5 	.word	0x08008fc5
 8008e40:	08008fe5 	.word	0x08008fe5
 8008e44:	08009005 	.word	0x08009005
 8008e48:	08009033 	.word	0x08009033
 8008e4c:	08009103 	.word	0x08009103
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8193 	beq.w	8009184 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e64:	20c8      	movs	r0, #200	; 0xc8
 8008e66:	f001 fca3 	bl	800a7b0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fb99 	bl	800a5a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e80:	e180      	b.n	8009184 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d107      	bne.n	8008e9c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e9a:	e182      	b.n	80091a2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ea6:	d914      	bls.n	8008ed2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008eae:	3301      	adds	r3, #1
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d903      	bls.n	8008eca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	220d      	movs	r2, #13
 8008ec6:	701a      	strb	r2, [r3, #0]
      break;
 8008ec8:	e16b      	b.n	80091a2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
      break;
 8008ed0:	e167      	b.n	80091a2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ed8:	f103 020a 	add.w	r2, r3, #10
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008ee2:	200a      	movs	r0, #10
 8008ee4:	f001 fc64 	bl	800a7b0 <USBH_Delay>
      break;
 8008ee8:	e15b      	b.n	80091a2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008efa:	2104      	movs	r1, #4
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f00:	2064      	movs	r0, #100	; 0x64
 8008f02:	f001 fc55 	bl	800a7b0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fb24 	bl	800a554 <USBH_LL_GetSpeed>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2205      	movs	r2, #5
 8008f1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 f92f 	bl	800a182 <USBH_AllocPipe>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f2c:	2180      	movs	r1, #128	; 0x80
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 f927 	bl	800a182 <USBH_AllocPipe>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7919      	ldrb	r1, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f50:	b292      	uxth	r2, r2
 8008f52:	9202      	str	r2, [sp, #8]
 8008f54:	2200      	movs	r2, #0
 8008f56:	9201      	str	r2, [sp, #4]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2280      	movs	r2, #128	; 0x80
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f8e0 	bl	800a124 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7959      	ldrb	r1, [r3, #5]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	9202      	str	r2, [sp, #8]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	9201      	str	r2, [sp, #4]
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	4603      	mov	r3, r0
 8008f84:	2200      	movs	r2, #0
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f8cc 	bl	800a124 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f8c:	e109      	b.n	80091a2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f90c 	bl	80091ac <USBH_HandleEnum>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 80f3 	bne.w	8009188 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d103      	bne.n	8008fbc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008fba:	e0e5      	b.n	8009188 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2207      	movs	r2, #7
 8008fc0:	701a      	strb	r2, [r3, #0]
      break;
 8008fc2:	e0e1      	b.n	8009188 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 80de 	beq.w	800918c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2208      	movs	r2, #8
 8008fe0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008fe2:	e0d3      	b.n	800918c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fc20 	bl	8009834 <USBH_SetCfg>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 80ca 	bne.w	8009190 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2209      	movs	r2, #9
 8009000:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009002:	e0c5      	b.n	8009190 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00b      	beq.n	800902a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009012:	2101      	movs	r1, #1
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fc30 	bl	800987a <USBH_SetFeature>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 80b9 	bne.w	8009194 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	220a      	movs	r2, #10
 8009026:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009028:	e0b4      	b.n	8009194 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	220a      	movs	r2, #10
 800902e:	701a      	strb	r2, [r3, #0]
      break;
 8009030:	e0b0      	b.n	8009194 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80ad 	beq.w	8009198 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
 800904a:	e016      	b.n	800907a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800904c:	7bfa      	ldrb	r2, [r7, #15]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	32de      	adds	r2, #222	; 0xde
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	791a      	ldrb	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800905e:	429a      	cmp	r2, r3
 8009060:	d108      	bne.n	8009074 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009062:	7bfa      	ldrb	r2, [r7, #15]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	32de      	adds	r2, #222	; 0xde
 8009068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009072:	e005      	b.n	8009080 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	3301      	adds	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0e5      	beq.n	800904c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d016      	beq.n	80090b8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2206      	movs	r2, #6
 80090a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090a8:	2103      	movs	r1, #3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090ae:	e073      	b.n	8009198 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	220d      	movs	r2, #13
 80090b4:	701a      	strb	r2, [r3, #0]
      break;
 80090b6:	e06f      	b.n	8009198 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	220d      	movs	r2, #13
 80090bc:	701a      	strb	r2, [r3, #0]
      break;
 80090be:	e06b      	b.n	8009198 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d017      	beq.n	80090fa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
 80090d6:	4603      	mov	r3, r0
 80090d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	220b      	movs	r2, #11
 80090e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090e8:	e058      	b.n	800919c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d154      	bne.n	800919c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220d      	movs	r2, #13
 80090f6:	701a      	strb	r2, [r3, #0]
      break;
 80090f8:	e050      	b.n	800919c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	220d      	movs	r2, #13
 80090fe:	701a      	strb	r2, [r3, #0]
      break;
 8009100:	e04c      	b.n	800919c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d049      	beq.n	80091a0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
      }
      break;
 8009118:	e042      	b.n	80091a0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fd72 	bl	8008c0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009156:	2105      	movs	r1, #5
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	d107      	bne.n	8009178 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff fe2b 	bl	8008dcc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009176:	e014      	b.n	80091a2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 f9b5 	bl	800a4e8 <USBH_LL_Start>
      break;
 800917e:	e010      	b.n	80091a2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009180:	bf00      	nop
 8009182:	e00e      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 8009184:	bf00      	nop
 8009186:	e00c      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 8009188:	bf00      	nop
 800918a:	e00a      	b.n	80091a2 <USBH_Process+0x3b6>
    break;
 800918c:	bf00      	nop
 800918e:	e008      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 8009190:	bf00      	nop
 8009192:	e006      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 8009194:	bf00      	nop
 8009196:	e004      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 8009198:	bf00      	nop
 800919a:	e002      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 800919c:	bf00      	nop
 800919e:	e000      	b.n	80091a2 <USBH_Process+0x3b6>
      break;
 80091a0:	bf00      	nop
  }
  return USBH_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af04      	add	r7, sp, #16
 80091b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80091b8:	2301      	movs	r3, #1
 80091ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b07      	cmp	r3, #7
 80091c2:	f200 81c1 	bhi.w	8009548 <USBH_HandleEnum+0x39c>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <USBH_HandleEnum+0x20>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	080091ed 	.word	0x080091ed
 80091d0:	080092ab 	.word	0x080092ab
 80091d4:	08009315 	.word	0x08009315
 80091d8:	080093a3 	.word	0x080093a3
 80091dc:	0800940d 	.word	0x0800940d
 80091e0:	0800947d 	.word	0x0800947d
 80091e4:	080094c3 	.word	0x080094c3
 80091e8:	08009509 	.word	0x08009509
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80091ec:	2108      	movs	r1, #8
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa50 	bl	8009694 <USBH_Get_DevDesc>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d130      	bne.n	8009260 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	7919      	ldrb	r1, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009222:	b292      	uxth	r2, r2
 8009224:	9202      	str	r2, [sp, #8]
 8009226:	2200      	movs	r2, #0
 8009228:	9201      	str	r2, [sp, #4]
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	4603      	mov	r3, r0
 800922e:	2280      	movs	r2, #128	; 0x80
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 ff77 	bl	800a124 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7959      	ldrb	r1, [r3, #5]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800924a:	b292      	uxth	r2, r2
 800924c:	9202      	str	r2, [sp, #8]
 800924e:	2200      	movs	r2, #0
 8009250:	9201      	str	r2, [sp, #4]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	4603      	mov	r3, r0
 8009256:	2200      	movs	r2, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 ff63 	bl	800a124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800925e:	e175      	b.n	800954c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b03      	cmp	r3, #3
 8009264:	f040 8172 	bne.w	800954c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800926e:	3301      	adds	r3, #1
 8009270:	b2da      	uxtb	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800927e:	2b03      	cmp	r3, #3
 8009280:	d903      	bls.n	800928a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	220d      	movs	r2, #13
 8009286:	701a      	strb	r2, [r3, #0]
      break;
 8009288:	e160      	b.n	800954c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	795b      	ldrb	r3, [r3, #5]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 ff97 	bl	800a1c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	791b      	ldrb	r3, [r3, #4]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ff91 	bl	800a1c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	701a      	strb	r2, [r3, #0]
      break;
 80092a8:	e150      	b.n	800954c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092aa:	2112      	movs	r1, #18
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f9f1 	bl	8009694 <USBH_Get_DevDesc>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d103      	bne.n	80092c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092c2:	e145      	b.n	8009550 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	f040 8142 	bne.w	8009550 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092d2:	3301      	adds	r3, #1
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d903      	bls.n	80092ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	220d      	movs	r2, #13
 80092ea:	701a      	strb	r2, [r3, #0]
      break;
 80092ec:	e130      	b.n	8009550 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	795b      	ldrb	r3, [r3, #5]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 ff65 	bl	800a1c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 ff5f 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
      break;
 8009312:	e11d      	b.n	8009550 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009314:	2101      	movs	r1, #1
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa68 	bl	80097ec <USBH_SetAddress>
 800931c:	4603      	mov	r3, r0
 800931e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d132      	bne.n	800938c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009326:	2002      	movs	r0, #2
 8009328:	f001 fa42 	bl	800a7b0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2203      	movs	r2, #3
 8009338:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	7919      	ldrb	r1, [r3, #4]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800934e:	b292      	uxth	r2, r2
 8009350:	9202      	str	r2, [sp, #8]
 8009352:	2200      	movs	r2, #0
 8009354:	9201      	str	r2, [sp, #4]
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4603      	mov	r3, r0
 800935a:	2280      	movs	r2, #128	; 0x80
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fee1 	bl	800a124 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7959      	ldrb	r1, [r3, #5]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009376:	b292      	uxth	r2, r2
 8009378:	9202      	str	r2, [sp, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	9201      	str	r2, [sp, #4]
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	4603      	mov	r3, r0
 8009382:	2200      	movs	r2, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fecd 	bl	800a124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800938a:	e0e3      	b.n	8009554 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b03      	cmp	r3, #3
 8009390:	f040 80e0 	bne.w	8009554 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	220d      	movs	r2, #13
 8009398:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	705a      	strb	r2, [r3, #1]
      break;
 80093a0:	e0d8      	b.n	8009554 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093a2:	2109      	movs	r1, #9
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f99d 	bl	80096e4 <USBH_Get_CfgDesc>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d103      	bne.n	80093bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2204      	movs	r2, #4
 80093b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093ba:	e0cd      	b.n	8009558 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b03      	cmp	r3, #3
 80093c0:	f040 80ca 	bne.w	8009558 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093ca:	3301      	adds	r3, #1
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d903      	bls.n	80093e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	220d      	movs	r2, #13
 80093e2:	701a      	strb	r2, [r3, #0]
      break;
 80093e4:	e0b8      	b.n	8009558 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	795b      	ldrb	r3, [r3, #5]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fee9 	bl	800a1c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	791b      	ldrb	r3, [r3, #4]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fee3 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
      break;
 800940a:	e0a5      	b.n	8009558 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f965 	bl	80096e4 <USBH_Get_CfgDesc>
 800941a:	4603      	mov	r3, r0
 800941c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2205      	movs	r2, #5
 8009428:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800942a:	e097      	b.n	800955c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b03      	cmp	r3, #3
 8009430:	f040 8094 	bne.w	800955c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800943a:	3301      	adds	r3, #1
 800943c:	b2da      	uxtb	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800944a:	2b03      	cmp	r3, #3
 800944c:	d903      	bls.n	8009456 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	220d      	movs	r2, #13
 8009452:	701a      	strb	r2, [r3, #0]
      break;
 8009454:	e082      	b.n	800955c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	795b      	ldrb	r3, [r3, #5]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 feb1 	bl	800a1c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	791b      	ldrb	r3, [r3, #4]
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 feab 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	701a      	strb	r2, [r3, #0]
      break;
 800947a:	e06f      	b.n	800955c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009482:	2b00      	cmp	r3, #0
 8009484:	d019      	beq.n	80094ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009492:	23ff      	movs	r3, #255	; 0xff
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f949 	bl	800972c <USBH_Get_StringDesc>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2206      	movs	r2, #6
 80094a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094aa:	e059      	b.n	8009560 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d156      	bne.n	8009560 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2206      	movs	r2, #6
 80094b6:	705a      	strb	r2, [r3, #1]
      break;
 80094b8:	e052      	b.n	8009560 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2206      	movs	r2, #6
 80094be:	705a      	strb	r2, [r3, #1]
      break;
 80094c0:	e04e      	b.n	8009560 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d019      	beq.n	8009500 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094d8:	23ff      	movs	r3, #255	; 0xff
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f926 	bl	800972c <USBH_Get_StringDesc>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2207      	movs	r2, #7
 80094ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094f0:	e038      	b.n	8009564 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d135      	bne.n	8009564 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2207      	movs	r2, #7
 80094fc:	705a      	strb	r2, [r3, #1]
      break;
 80094fe:	e031      	b.n	8009564 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2207      	movs	r2, #7
 8009504:	705a      	strb	r2, [r3, #1]
      break;
 8009506:	e02d      	b.n	8009564 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800950e:	2b00      	cmp	r3, #0
 8009510:	d017      	beq.n	8009542 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800951e:	23ff      	movs	r3, #255	; 0xff
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f903 	bl	800972c <USBH_Get_StringDesc>
 8009526:	4603      	mov	r3, r0
 8009528:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009534:	e018      	b.n	8009568 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d115      	bne.n	8009568 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
      break;
 8009540:	e012      	b.n	8009568 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
      break;
 8009546:	e00f      	b.n	8009568 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009548:	bf00      	nop
 800954a:	e00e      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 800954c:	bf00      	nop
 800954e:	e00c      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 8009550:	bf00      	nop
 8009552:	e00a      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 8009554:	bf00      	nop
 8009556:	e008      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 8009558:	bf00      	nop
 800955a:	e006      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 800955c:	bf00      	nop
 800955e:	e004      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 8009560:	bf00      	nop
 8009562:	e002      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 8009564:	bf00      	nop
 8009566:	e000      	b.n	800956a <USBH_HandleEnum+0x3be>
      break;
 8009568:	bf00      	nop
  }
  return Status;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f804 	bl	80095b6 <USBH_HandleSof>
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b0b      	cmp	r3, #11
 80095c6:	d10a      	bne.n	80095de <USBH_HandleSof+0x28>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d005      	beq.n	80095de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
  }
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80095f6:	bf00      	nop
}
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009612:	bf00      	nop
}
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 ff56 	bl	800a51e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	791b      	ldrb	r3, [r3, #4]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fda3 	bl	800a1c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	795b      	ldrb	r3, [r3, #5]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fd9d 	bl	800a1c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	4613      	mov	r3, r2
 80096ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f864 	bl	8009782 <USBH_GetDescriptor>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	b292      	uxth	r2, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	f000 f918 	bl	800990a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af02      	add	r7, sp, #8
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	331c      	adds	r3, #28
 80096f4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80096f6:	887b      	ldrh	r3, [r7, #2]
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009700:	2100      	movs	r1, #0
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f83d 	bl	8009782 <USBH_GetDescriptor>
 8009708:	4603      	mov	r3, r0
 800970a:	72fb      	strb	r3, [r7, #11]
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d107      	bne.n	8009722 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009718:	887a      	ldrh	r2, [r7, #2]
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	4618      	mov	r0, r3
 800971e:	f000 f964 	bl	80099ea <USBH_ParseCfgDesc>
  }

  return status;
 8009722:	7afb      	ldrb	r3, [r7, #11]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af02      	add	r7, sp, #8
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	461a      	mov	r2, r3
 8009738:	460b      	mov	r3, r1
 800973a:	72fb      	strb	r3, [r7, #11]
 800973c:	4613      	mov	r3, r2
 800973e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	b29b      	uxth	r3, r3
 8009744:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009748:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009750:	893b      	ldrh	r3, [r7, #8]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	460b      	mov	r3, r1
 8009756:	2100      	movs	r1, #0
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f812 	bl	8009782 <USBH_GetDescriptor>
 800975e:	4603      	mov	r3, r0
 8009760:	75fb      	strb	r3, [r7, #23]
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d107      	bne.n	8009778 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800976e:	893a      	ldrh	r2, [r7, #8]
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fa37 	bl	8009be6 <USBH_ParseStringDesc>
  }

  return status;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	60f8      	str	r0, [r7, #12]
 800978a:	607b      	str	r3, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	72fb      	strb	r3, [r7, #11]
 8009790:	4613      	mov	r3, r2
 8009792:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	789b      	ldrb	r3, [r3, #2]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d11c      	bne.n	80097d6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2206      	movs	r2, #6
 80097ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	893a      	ldrh	r2, [r7, #8]
 80097b2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80097b4:	893b      	ldrh	r3, [r7, #8]
 80097b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097be:	d104      	bne.n	80097ca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f240 4209 	movw	r2, #1033	; 0x409
 80097c6:	829a      	strh	r2, [r3, #20]
 80097c8:	e002      	b.n	80097d0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8b3a      	ldrh	r2, [r7, #24]
 80097d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80097d6:	8b3b      	ldrh	r3, [r7, #24]
 80097d8:	461a      	mov	r2, r3
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 fa50 	bl	8009c82 <USBH_CtlReq>
 80097e2:	4603      	mov	r3, r0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	789b      	ldrb	r3, [r3, #2]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d10f      	bne.n	8009820 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2205      	movs	r2, #5
 800980a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	b29a      	uxth	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa2c 	bl	8009c82 <USBH_CtlReq>
 800982a:	4603      	mov	r3, r0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	789b      	ldrb	r3, [r3, #2]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d10e      	bne.n	8009866 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2209      	movs	r2, #9
 8009852:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	887a      	ldrh	r2, [r7, #2]
 8009858:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009866:	2200      	movs	r2, #0
 8009868:	2100      	movs	r1, #0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa09 	bl	8009c82 <USBH_CtlReq>
 8009870:	4603      	mov	r3, r0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	789b      	ldrb	r3, [r3, #2]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d10f      	bne.n	80098ae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2203      	movs	r2, #3
 8009898:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	b29a      	uxth	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f9e5 	bl	8009c82 <USBH_CtlReq>
 80098b8:	4603      	mov	r3, r0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	789b      	ldrb	r3, [r3, #2]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d10f      	bne.n	80098f6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f9c1 	bl	8009c82 <USBH_CtlReq>
 8009900:	4603      	mov	r3, r0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	4613      	mov	r3, r2
 8009916:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	785a      	ldrb	r2, [r3, #1]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	3302      	adds	r3, #2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b29a      	uxth	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	3303      	adds	r3, #3
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	b29b      	uxth	r3, r3
 800993c:	4313      	orrs	r3, r2
 800993e:	b29a      	uxth	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	791a      	ldrb	r2, [r3, #4]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	795a      	ldrb	r2, [r3, #5]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	799a      	ldrb	r2, [r3, #6]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	79da      	ldrb	r2, [r3, #7]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009964:	88fb      	ldrh	r3, [r7, #6]
 8009966:	2b08      	cmp	r3, #8
 8009968:	d939      	bls.n	80099de <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	3308      	adds	r3, #8
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	b29a      	uxth	r2, r3
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	3309      	adds	r3, #9
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	b29b      	uxth	r3, r3
 800997e:	4313      	orrs	r3, r2
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	330a      	adds	r3, #10
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b29a      	uxth	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	330b      	adds	r3, #11
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	021b      	lsls	r3, r3, #8
 8009998:	b29b      	uxth	r3, r3
 800999a:	4313      	orrs	r3, r2
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	330c      	adds	r3, #12
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	330d      	adds	r3, #13
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4313      	orrs	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	7b9a      	ldrb	r2, [r3, #14]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	7bda      	ldrb	r2, [r3, #15]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	7c1a      	ldrb	r2, [r3, #16]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	7c5a      	ldrb	r2, [r3, #17]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	745a      	strb	r2, [r3, #17]
  }
}
 80099de:	bf00      	nop
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b08a      	sub	sp, #40	; 0x28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	4613      	mov	r3, r2
 80099f6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	785a      	ldrb	r2, [r3, #1]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	3302      	adds	r3, #2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	3303      	adds	r3, #3
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	4313      	orrs	r3, r2
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	791a      	ldrb	r2, [r3, #4]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	795a      	ldrb	r2, [r3, #5]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	799a      	ldrb	r2, [r3, #6]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	79da      	ldrb	r2, [r3, #7]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	7a1a      	ldrb	r2, [r3, #8]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	2b09      	cmp	r3, #9
 8009a64:	d95f      	bls.n	8009b26 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a66:	2309      	movs	r3, #9
 8009a68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a6e:	e051      	b.n	8009b14 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a70:	f107 0316 	add.w	r3, r7, #22
 8009a74:	4619      	mov	r1, r3
 8009a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a78:	f000 f8e8 	bl	8009c4c <USBH_GetNextDesc>
 8009a7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	d146      	bne.n	8009b14 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a8a:	221a      	movs	r2, #26
 8009a8c:	fb02 f303 	mul.w	r3, r2, r3
 8009a90:	3308      	adds	r3, #8
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	3302      	adds	r3, #2
 8009a98:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a9c:	69f8      	ldr	r0, [r7, #28]
 8009a9e:	f000 f846 	bl	8009b2e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009aac:	e022      	b.n	8009af4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009aae:	f107 0316 	add.w	r3, r7, #22
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ab6:	f000 f8c9 	bl	8009c4c <USBH_GetNextDesc>
 8009aba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	d117      	bne.n	8009af4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ac8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009acc:	3201      	adds	r2, #1
 8009ace:	00d2      	lsls	r2, r2, #3
 8009ad0:	211a      	movs	r1, #26
 8009ad2:	fb01 f303 	mul.w	r3, r1, r3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3308      	adds	r3, #8
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	4413      	add	r3, r2
 8009ade:	3304      	adds	r3, #4
 8009ae0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ae4:	69b8      	ldr	r0, [r7, #24]
 8009ae6:	f000 f851 	bl	8009b8c <USBH_ParseEPDesc>
            ep_ix++;
 8009aea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009aee:	3301      	adds	r3, #1
 8009af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	791b      	ldrb	r3, [r3, #4]
 8009af8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d204      	bcs.n	8009b0a <USBH_ParseCfgDesc+0x120>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	885a      	ldrh	r2, [r3, #2]
 8009b04:	8afb      	ldrh	r3, [r7, #22]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d8d1      	bhi.n	8009aae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b0e:	3301      	adds	r3, #1
 8009b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d804      	bhi.n	8009b26 <USBH_ParseCfgDesc+0x13c>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	885a      	ldrh	r2, [r3, #2]
 8009b20:	8afb      	ldrh	r3, [r7, #22]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d8a4      	bhi.n	8009a70 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009b26:	bf00      	nop
 8009b28:	3728      	adds	r7, #40	; 0x28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781a      	ldrb	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785a      	ldrb	r2, [r3, #1]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	789a      	ldrb	r2, [r3, #2]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	78da      	ldrb	r2, [r3, #3]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	791a      	ldrb	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	795a      	ldrb	r2, [r3, #5]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	799a      	ldrb	r2, [r3, #6]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	79da      	ldrb	r2, [r3, #7]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	7a1a      	ldrb	r2, [r3, #8]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	721a      	strb	r2, [r3, #8]
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	785a      	ldrb	r2, [r3, #1]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	789a      	ldrb	r2, [r3, #2]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	78da      	ldrb	r2, [r3, #3]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	3305      	adds	r3, #5
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	799a      	ldrb	r2, [r3, #6]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	719a      	strb	r2, [r3, #6]
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d120      	bne.n	8009c40 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	1e9a      	subs	r2, r3, #2
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	4293      	cmp	r3, r2
 8009c08:	bf28      	it	cs
 8009c0a:	4613      	movcs	r3, r2
 8009c0c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3302      	adds	r3, #2
 8009c12:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c14:	2300      	movs	r3, #0
 8009c16:	82fb      	strh	r3, [r7, #22]
 8009c18:	e00b      	b.n	8009c32 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c1a:	8afb      	ldrh	r3, [r7, #22]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c2c:	8afb      	ldrh	r3, [r7, #22]
 8009c2e:	3302      	adds	r3, #2
 8009c30:	82fb      	strh	r3, [r7, #22]
 8009c32:	8afa      	ldrh	r2, [r7, #22]
 8009c34:	8abb      	ldrh	r3, [r7, #20]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d3ef      	bcc.n	8009c1a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	701a      	strb	r2, [r3, #0]
  }
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	881a      	ldrh	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4413      	add	r3, r2
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c90:	2301      	movs	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	789b      	ldrb	r3, [r3, #2]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d002      	beq.n	8009ca2 <USBH_CtlReq+0x20>
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d00f      	beq.n	8009cc0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009ca0:	e027      	b.n	8009cf2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	88fa      	ldrh	r2, [r7, #6]
 8009cac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbe:	e018      	b.n	8009cf2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f81b 	bl	8009cfc <USBH_HandleControl>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <USBH_CtlReq+0x54>
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d106      	bne.n	8009ce4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	761a      	strb	r2, [r3, #24]
      break;
 8009ce2:	e005      	b.n	8009cf0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d102      	bne.n	8009cf0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	709a      	strb	r2, [r3, #2]
      break;
 8009cf0:	bf00      	nop
  }
  return status;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d04:	2301      	movs	r3, #1
 8009d06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7e1b      	ldrb	r3, [r3, #24]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	2b0a      	cmp	r3, #10
 8009d14:	f200 8156 	bhi.w	8009fc4 <USBH_HandleControl+0x2c8>
 8009d18:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <USBH_HandleControl+0x24>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009d4d 	.word	0x08009d4d
 8009d24:	08009d67 	.word	0x08009d67
 8009d28:	08009dd1 	.word	0x08009dd1
 8009d2c:	08009df7 	.word	0x08009df7
 8009d30:	08009e2f 	.word	0x08009e2f
 8009d34:	08009e59 	.word	0x08009e59
 8009d38:	08009eab 	.word	0x08009eab
 8009d3c:	08009ecd 	.word	0x08009ecd
 8009d40:	08009f09 	.word	0x08009f09
 8009d44:	08009f2f 	.word	0x08009f2f
 8009d48:	08009f6d 	.word	0x08009f6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f103 0110 	add.w	r1, r3, #16
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	795b      	ldrb	r3, [r3, #5]
 8009d56:	461a      	mov	r2, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f943 	bl	8009fe4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2202      	movs	r2, #2
 8009d62:	761a      	strb	r2, [r3, #24]
      break;
 8009d64:	e139      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	795b      	ldrb	r3, [r3, #5]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fcc5 	bl	800a6fc <USBH_LL_GetURBState>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d11e      	bne.n	8009dba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7c1b      	ldrb	r3, [r3, #16]
 8009d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8adb      	ldrh	r3, [r3, #22]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d8e:	7b7b      	ldrb	r3, [r7, #13]
 8009d90:	2b80      	cmp	r3, #128	; 0x80
 8009d92:	d103      	bne.n	8009d9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2203      	movs	r2, #3
 8009d98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d9a:	e115      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2205      	movs	r2, #5
 8009da0:	761a      	strb	r2, [r3, #24]
      break;
 8009da2:	e111      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009da4:	7b7b      	ldrb	r3, [r7, #13]
 8009da6:	2b80      	cmp	r3, #128	; 0x80
 8009da8:	d103      	bne.n	8009db2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2209      	movs	r2, #9
 8009dae:	761a      	strb	r2, [r3, #24]
      break;
 8009db0:	e10a      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2207      	movs	r2, #7
 8009db6:	761a      	strb	r2, [r3, #24]
      break;
 8009db8:	e106      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d003      	beq.n	8009dc8 <USBH_HandleControl+0xcc>
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	f040 8100 	bne.w	8009fc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	220b      	movs	r2, #11
 8009dcc:	761a      	strb	r2, [r3, #24]
      break;
 8009dce:	e0fb      	b.n	8009fc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6899      	ldr	r1, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	899a      	ldrh	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	791b      	ldrb	r3, [r3, #4]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f93a 	bl	800a062 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2204      	movs	r2, #4
 8009df2:	761a      	strb	r2, [r3, #24]
      break;
 8009df4:	e0f1      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	791b      	ldrb	r3, [r3, #4]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc7d 	bl	800a6fc <USBH_LL_GetURBState>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d102      	bne.n	8009e12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2209      	movs	r2, #9
 8009e10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	2b05      	cmp	r3, #5
 8009e16:	d102      	bne.n	8009e1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e1c:	e0d6      	b.n	8009fcc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	f040 80d3 	bne.w	8009fcc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	220b      	movs	r2, #11
 8009e2a:	761a      	strb	r2, [r3, #24]
      break;
 8009e2c:	e0ce      	b.n	8009fcc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6899      	ldr	r1, [r3, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	899a      	ldrh	r2, [r3, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	795b      	ldrb	r3, [r3, #5]
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	9000      	str	r0, [sp, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8ea 	bl	800a018 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2206      	movs	r2, #6
 8009e54:	761a      	strb	r2, [r3, #24]
      break;
 8009e56:	e0c0      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	795b      	ldrb	r3, [r3, #5]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fc4c 	bl	800a6fc <USBH_LL_GetURBState>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d103      	bne.n	8009e76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2207      	movs	r2, #7
 8009e72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e74:	e0ac      	b.n	8009fd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b05      	cmp	r3, #5
 8009e7a:	d105      	bne.n	8009e88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	220c      	movs	r2, #12
 8009e80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e82:	2303      	movs	r3, #3
 8009e84:	73fb      	strb	r3, [r7, #15]
      break;
 8009e86:	e0a3      	b.n	8009fd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d103      	bne.n	8009e96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2205      	movs	r2, #5
 8009e92:	761a      	strb	r2, [r3, #24]
      break;
 8009e94:	e09c      	b.n	8009fd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	f040 8099 	bne.w	8009fd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	220b      	movs	r2, #11
 8009ea2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea8:	e092      	b.n	8009fd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	791b      	ldrb	r3, [r3, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f8d5 	bl	800a062 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2208      	movs	r2, #8
 8009ec8:	761a      	strb	r2, [r3, #24]

      break;
 8009eca:	e086      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	791b      	ldrb	r3, [r3, #4]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fc12 	bl	800a6fc <USBH_LL_GetURBState>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d105      	bne.n	8009eee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	220d      	movs	r2, #13
 8009ee6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009eec:	e072      	b.n	8009fd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d103      	bne.n	8009efc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	220b      	movs	r2, #11
 8009ef8:	761a      	strb	r2, [r3, #24]
      break;
 8009efa:	e06b      	b.n	8009fd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d168      	bne.n	8009fd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f02:	2303      	movs	r3, #3
 8009f04:	73fb      	strb	r3, [r7, #15]
      break;
 8009f06:	e065      	b.n	8009fd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	795b      	ldrb	r3, [r3, #5]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	9200      	str	r2, [sp, #0]
 8009f10:	2200      	movs	r2, #0
 8009f12:	2100      	movs	r1, #0
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f87f 	bl	800a018 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	220a      	movs	r2, #10
 8009f2a:	761a      	strb	r2, [r3, #24]
      break;
 8009f2c:	e055      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	795b      	ldrb	r3, [r3, #5]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbe1 	bl	800a6fc <USBH_LL_GetURBState>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d105      	bne.n	8009f50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	220d      	movs	r2, #13
 8009f4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f4e:	e043      	b.n	8009fd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d103      	bne.n	8009f5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2209      	movs	r2, #9
 8009f5a:	761a      	strb	r2, [r3, #24]
      break;
 8009f5c:	e03c      	b.n	8009fd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d139      	bne.n	8009fd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	220b      	movs	r2, #11
 8009f68:	761a      	strb	r2, [r3, #24]
      break;
 8009f6a:	e035      	b.n	8009fd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7e5b      	ldrb	r3, [r3, #25]
 8009f70:	3301      	adds	r3, #1
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	765a      	strb	r2, [r3, #25]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7e5b      	ldrb	r3, [r3, #25]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d806      	bhi.n	8009f8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f8c:	e025      	b.n	8009fda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f94:	2106      	movs	r1, #6
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	795b      	ldrb	r3, [r3, #5]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f90c 	bl	800a1c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	791b      	ldrb	r3, [r3, #4]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f906 	bl	800a1c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc2:	e00a      	b.n	8009fda <USBH_HandleControl+0x2de>

    default:
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e008      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fc8:	bf00      	nop
 8009fca:	e006      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fcc:	bf00      	nop
 8009fce:	e004      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e002      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fd8:	bf00      	nop
  }

  return status;
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af04      	add	r7, sp, #16
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ff2:	79f9      	ldrb	r1, [r7, #7]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	2200      	movs	r2, #0
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fb46 	bl	800a69a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4611      	mov	r1, r2
 800a024:	461a      	mov	r2, r3
 800a026:	460b      	mov	r3, r1
 800a028:	80fb      	strh	r3, [r7, #6]
 800a02a:	4613      	mov	r3, r2
 800a02c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a03c:	7979      	ldrb	r1, [r7, #5]
 800a03e:	7e3b      	ldrb	r3, [r7, #24]
 800a040:	9303      	str	r3, [sp, #12]
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	2301      	movs	r3, #1
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	2300      	movs	r3, #0
 800a050:	2200      	movs	r2, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fb21 	bl	800a69a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b088      	sub	sp, #32
 800a066:	af04      	add	r7, sp, #16
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	4611      	mov	r1, r2
 800a06e:	461a      	mov	r2, r3
 800a070:	460b      	mov	r3, r1
 800a072:	80fb      	strh	r3, [r7, #6]
 800a074:	4613      	mov	r3, r2
 800a076:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a078:	7979      	ldrb	r1, [r7, #5]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9303      	str	r3, [sp, #12]
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	9302      	str	r3, [sp, #8]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	2301      	movs	r3, #1
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	2300      	movs	r3, #0
 800a08c:	2201      	movs	r2, #1
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fb03 	bl	800a69a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a094:	2300      	movs	r3, #0

}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b088      	sub	sp, #32
 800a0a2:	af04      	add	r7, sp, #16
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	80fb      	strh	r3, [r7, #6]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0c2:	7979      	ldrb	r1, [r7, #5]
 800a0c4:	7e3b      	ldrb	r3, [r7, #24]
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	88fb      	ldrh	r3, [r7, #6]
 800a0ca:	9302      	str	r3, [sp, #8]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fade 	bl	800a69a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	80fb      	strh	r3, [r7, #6]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0fe:	7979      	ldrb	r1, [r7, #5]
 800a100:	2300      	movs	r3, #0
 800a102:	9303      	str	r3, [sp, #12]
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	9302      	str	r3, [sp, #8]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	2301      	movs	r3, #1
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	2302      	movs	r3, #2
 800a112:	2201      	movs	r2, #1
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fac0 	bl	800a69a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af04      	add	r7, sp, #16
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	4608      	mov	r0, r1
 800a12e:	4611      	mov	r1, r2
 800a130:	461a      	mov	r2, r3
 800a132:	4603      	mov	r3, r0
 800a134:	70fb      	strb	r3, [r7, #3]
 800a136:	460b      	mov	r3, r1
 800a138:	70bb      	strb	r3, [r7, #2]
 800a13a:	4613      	mov	r3, r2
 800a13c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a13e:	7878      	ldrb	r0, [r7, #1]
 800a140:	78ba      	ldrb	r2, [r7, #2]
 800a142:	78f9      	ldrb	r1, [r7, #3]
 800a144:	8b3b      	ldrh	r3, [r7, #24]
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	7d3b      	ldrb	r3, [r7, #20]
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	7c3b      	ldrb	r3, [r7, #16]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa53 	bl	800a5fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa72 	bl	800a65c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f836 	bl	800a200 <USBH_GetFreePipe>
 800a194:	4603      	mov	r3, r0
 800a196:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a198:	89fb      	ldrh	r3, [r7, #14]
 800a19a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00a      	beq.n	800a1b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	89fb      	ldrh	r3, [r7, #14]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	33e0      	adds	r3, #224	; 0xe0
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a1b8:	89fb      	ldrh	r3, [r7, #14]
 800a1ba:	b2db      	uxtb	r3, r3
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	2b0a      	cmp	r3, #10
 800a1d4:	d80d      	bhi.n	800a1f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	33e0      	adds	r3, #224	; 0xe0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	33e0      	adds	r3, #224	; 0xe0
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	e00f      	b.n	800a232 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	33e0      	adds	r3, #224	; 0xe0
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	e007      	b.n	800a23c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	3301      	adds	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	2b0a      	cmp	r3, #10
 800a236:	d9ec      	bls.n	800a212 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a238:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a24c:	2201      	movs	r2, #1
 800a24e:	490e      	ldr	r1, [pc, #56]	; (800a288 <MX_USB_HOST_Init+0x40>)
 800a250:	480e      	ldr	r0, [pc, #56]	; (800a28c <MX_USB_HOST_Init+0x44>)
 800a252:	f7fe fca1 	bl	8008b98 <USBH_Init>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a25c:	f7f7 fcc2 	bl	8001be4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a260:	490b      	ldr	r1, [pc, #44]	; (800a290 <MX_USB_HOST_Init+0x48>)
 800a262:	480a      	ldr	r0, [pc, #40]	; (800a28c <MX_USB_HOST_Init+0x44>)
 800a264:	f7fe fd26 	bl	8008cb4 <USBH_RegisterClass>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a26e:	f7f7 fcb9 	bl	8001be4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a272:	4806      	ldr	r0, [pc, #24]	; (800a28c <MX_USB_HOST_Init+0x44>)
 800a274:	f7fe fdaa 	bl	8008dcc <USBH_Start>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a27e:	f7f7 fcb1 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	0800a2a9 	.word	0x0800a2a9
 800a28c:	20000430 	.word	0x20000430
 800a290:	2000001c 	.word	0x2000001c

0800a294 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a298:	4802      	ldr	r0, [pc, #8]	; (800a2a4 <MX_USB_HOST_Process+0x10>)
 800a29a:	f7fe fda7 	bl	8008dec <USBH_Process>
}
 800a29e:	bf00      	nop
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000430 	.word	0x20000430

0800a2a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d819      	bhi.n	800a2f0 <USBH_UserProcess+0x48>
 800a2bc:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <USBH_UserProcess+0x1c>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a2f1 	.word	0x0800a2f1
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a2e9 	.word	0x0800a2e9
 800a2d4:	0800a2d9 	.word	0x0800a2d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2d8:	4b09      	ldr	r3, [pc, #36]	; (800a300 <USBH_UserProcess+0x58>)
 800a2da:	2203      	movs	r2, #3
 800a2dc:	701a      	strb	r2, [r3, #0]
  break;
 800a2de:	e008      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <USBH_UserProcess+0x58>)
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	701a      	strb	r2, [r3, #0]
  break;
 800a2e6:	e004      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <USBH_UserProcess+0x58>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	701a      	strb	r2, [r3, #0]
  break;
 800a2ee:	e000      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a2f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20000290 	.word	0x20000290

0800a304 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	; 0x28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a30c:	f107 0314 	add.w	r3, r7, #20
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	609a      	str	r2, [r3, #8]
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a324:	d147      	bne.n	800a3b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	4b25      	ldr	r3, [pc, #148]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	4a24      	ldr	r2, [pc, #144]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a330:	f043 0301 	orr.w	r3, r3, #1
 800a334:	6313      	str	r3, [r2, #48]	; 0x30
 800a336:	4b22      	ldr	r3, [pc, #136]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a342:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a348:	2300      	movs	r3, #0
 800a34a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a350:	f107 0314 	add.w	r3, r7, #20
 800a354:	4619      	mov	r1, r3
 800a356:	481b      	ldr	r0, [pc, #108]	; (800a3c4 <HAL_HCD_MspInit+0xc0>)
 800a358:	f7f8 f8fc 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a35c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a362:	2302      	movs	r3, #2
 800a364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a36a:	2300      	movs	r3, #0
 800a36c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36e:	230a      	movs	r3, #10
 800a370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a372:	f107 0314 	add.w	r3, r7, #20
 800a376:	4619      	mov	r1, r3
 800a378:	4812      	ldr	r0, [pc, #72]	; (800a3c4 <HAL_HCD_MspInit+0xc0>)
 800a37a:	f7f8 f8eb 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a382:	4a0f      	ldr	r2, [pc, #60]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a388:	6353      	str	r3, [r2, #52]	; 0x34
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a392:	4a0b      	ldr	r2, [pc, #44]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a398:	6453      	str	r3, [r2, #68]	; 0x44
 800a39a:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	2043      	movs	r0, #67	; 0x43
 800a3ac:	f7f8 f809 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3b0:	2043      	movs	r0, #67	; 0x43
 800a3b2:	f7f8 f822 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3b6:	bf00      	nop
 800a3b8:	3728      	adds	r7, #40	; 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	40023800 	.word	0x40023800
 800a3c4:	40020000 	.word	0x40020000

0800a3c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff f8db 	bl	8009592 <USBH_LL_IncTimer>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff f913 	bl	800961e <USBH_LL_Connect>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff f91c 	bl	800964c <USBH_LL_Disconnect>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
 800a428:	4613      	mov	r3, r2
 800a42a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff f8cd 	bl	80095e6 <USBH_LL_PortEnabled>
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff f8cd 	bl	8009602 <USBH_LL_PortDisabled>
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d12a      	bne.n	800a4d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a482:	4a18      	ldr	r2, [pc, #96]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a48e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a492:	4b14      	ldr	r3, [pc, #80]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a494:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a498:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a49a:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a49c:	2208      	movs	r2, #8
 800a49e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4a0:	4b10      	ldr	r3, [pc, #64]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4a6:	4b0f      	ldr	r3, [pc, #60]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4b2:	4b0c      	ldr	r3, [pc, #48]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a4b8:	480a      	ldr	r0, [pc, #40]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a4ba:	f7f8 fa00 	bl	80028be <HAL_HCD_Init>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4c4:	f7f7 fb8e 	bl	8001be4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4c8:	4806      	ldr	r0, [pc, #24]	; (800a4e4 <USBH_LL_Init+0x74>)
 800a4ca:	f7f8 fde4 	bl	8003096 <HAL_HCD_GetCurrentFrame>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff f84e 	bl	8009574 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000808 	.word	0x20000808

0800a4e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f8 fd53 	bl	8002faa <HAL_HCD_Start>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f95c 	bl	800a7c8 <USBH_Get_USB_Status>
 800a510:	4603      	mov	r3, r0
 800a512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a514:	7bbb      	ldrb	r3, [r7, #14]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a534:	4618      	mov	r0, r3
 800a536:	f7f8 fd5b 	bl	8002ff0 <HAL_HCD_Stop>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f941 	bl	800a7c8 <USBH_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a55c:	2301      	movs	r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a566:	4618      	mov	r0, r3
 800a568:	f7f8 fda3 	bl	80030b2 <HAL_HCD_GetCurrentSpeed>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d00c      	beq.n	800a58c <USBH_LL_GetSpeed+0x38>
 800a572:	2b02      	cmp	r3, #2
 800a574:	d80d      	bhi.n	800a592 <USBH_LL_GetSpeed+0x3e>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <USBH_LL_GetSpeed+0x2c>
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d003      	beq.n	800a586 <USBH_LL_GetSpeed+0x32>
 800a57e:	e008      	b.n	800a592 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
    break;
 800a584:	e008      	b.n	800a598 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
    break;
 800a58a:	e005      	b.n	800a598 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a58c:	2302      	movs	r3, #2
 800a58e:	73fb      	strb	r3, [r7, #15]
    break;
 800a590:	e002      	b.n	800a598 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a592:	2301      	movs	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]
    break;
 800a596:	bf00      	nop
  }
  return  speed;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7f8 fd36 	bl	800302a <HAL_HCD_ResetPort>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f8ff 	bl	800a7c8 <USBH_Get_USB_Status>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f8 fd3d 	bl	800306e <HAL_HCD_HC_GetXferCount>
 800a5f4:	4603      	mov	r3, r0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5fe:	b590      	push	{r4, r7, lr}
 800a600:	b089      	sub	sp, #36	; 0x24
 800a602:	af04      	add	r7, sp, #16
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	461a      	mov	r2, r3
 800a60c:	4603      	mov	r3, r0
 800a60e:	70fb      	strb	r3, [r7, #3]
 800a610:	460b      	mov	r3, r1
 800a612:	70bb      	strb	r3, [r7, #2]
 800a614:	4613      	mov	r3, r2
 800a616:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a626:	787c      	ldrb	r4, [r7, #1]
 800a628:	78ba      	ldrb	r2, [r7, #2]
 800a62a:	78f9      	ldrb	r1, [r7, #3]
 800a62c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	4623      	mov	r3, r4
 800a63e:	f7f8 f9a0 	bl	8002982 <HAL_HCD_HC_Init>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f8bd 	bl	800a7c8 <USBH_Get_USB_Status>
 800a64e:	4603      	mov	r3, r0
 800a650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a652:	7bbb      	ldrb	r3, [r7, #14]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}

0800a65c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a676:	78fa      	ldrb	r2, [r7, #3]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f8 fa10 	bl	8002aa0 <HAL_HCD_HC_Halt>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f89e 	bl	800a7c8 <USBH_Get_USB_Status>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a690:	7bbb      	ldrb	r3, [r7, #14]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a69a:	b590      	push	{r4, r7, lr}
 800a69c:	b089      	sub	sp, #36	; 0x24
 800a69e:	af04      	add	r7, sp, #16
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	70fb      	strb	r3, [r7, #3]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70bb      	strb	r3, [r7, #2]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a6c2:	787c      	ldrb	r4, [r7, #1]
 800a6c4:	78ba      	ldrb	r2, [r7, #2]
 800a6c6:	78f9      	ldrb	r1, [r7, #3]
 800a6c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6cc:	9303      	str	r3, [sp, #12]
 800a6ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6d0:	9302      	str	r3, [sp, #8]
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4623      	mov	r3, r4
 800a6de:	f7f8 fa03 	bl	8002ae8 <HAL_HCD_HC_SubmitRequest>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 f86d 	bl	800a7c8 <USBH_Get_USB_Status>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd90      	pop	{r4, r7, pc}

0800a6fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7f8 fc97 	bl	8003046 <HAL_HCD_HC_GetURBState>
 800a718:	4603      	mov	r3, r0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a734:	2b01      	cmp	r3, #1
 800a736:	d103      	bne.n	800a740 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f870 	bl	800a820 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a740:	20c8      	movs	r0, #200	; 0xc8
 800a742:	f7f7 fd3f 	bl	80021c4 <HAL_Delay>
  return USBH_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
 800a75c:	4613      	mov	r3, r2
 800a75e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a766:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	212c      	movs	r1, #44	; 0x2c
 800a76e:	fb01 f303 	mul.w	r3, r1, r3
 800a772:	4413      	add	r3, r2
 800a774:	333b      	adds	r3, #59	; 0x3b
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d009      	beq.n	800a790 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	212c      	movs	r1, #44	; 0x2c
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	4413      	add	r3, r2
 800a788:	3354      	adds	r3, #84	; 0x54
 800a78a:	78ba      	ldrb	r2, [r7, #2]
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e008      	b.n	800a7a2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	212c      	movs	r1, #44	; 0x2c
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	3355      	adds	r3, #85	; 0x55
 800a79e:	78ba      	ldrb	r2, [r7, #2]
 800a7a0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7f7 fd03 	bl	80021c4 <HAL_Delay>
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d817      	bhi.n	800a80c <USBH_Get_USB_Status+0x44>
 800a7dc:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <USBH_Get_USB_Status+0x1c>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a7f5 	.word	0x0800a7f5
 800a7e8:	0800a7fb 	.word	0x0800a7fb
 800a7ec:	0800a801 	.word	0x0800a801
 800a7f0:	0800a807 	.word	0x0800a807
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f8:	e00b      	b.n	800a812 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fe:	e008      	b.n	800a812 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a800:	2301      	movs	r3, #1
 800a802:	73fb      	strb	r3, [r7, #15]
    break;
 800a804:	e005      	b.n	800a812 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a806:	2302      	movs	r3, #2
 800a808:	73fb      	strb	r3, [r7, #15]
    break;
 800a80a:	e002      	b.n	800a812 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a80c:	2302      	movs	r3, #2
 800a80e:	73fb      	strb	r3, [r7, #15]
    break;
 800a810:	bf00      	nop
  }
  return usb_status;
 800a812:	7bfb      	ldrb	r3, [r7, #15]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a834:	2301      	movs	r3, #1
 800a836:	73fb      	strb	r3, [r7, #15]
 800a838:	e001      	b.n	800a83e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	461a      	mov	r2, r3
 800a842:	2101      	movs	r1, #1
 800a844:	4803      	ldr	r0, [pc, #12]	; (800a854 <MX_DriverVbusFS+0x34>)
 800a846:	f7f8 f821 	bl	800288c <HAL_GPIO_WritePin>
}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	40020800 	.word	0x40020800

0800a858 <__errno>:
 800a858:	4b01      	ldr	r3, [pc, #4]	; (800a860 <__errno+0x8>)
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	2000003c 	.word	0x2000003c

0800a864 <__libc_init_array>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	4d0d      	ldr	r5, [pc, #52]	; (800a89c <__libc_init_array+0x38>)
 800a868:	4c0d      	ldr	r4, [pc, #52]	; (800a8a0 <__libc_init_array+0x3c>)
 800a86a:	1b64      	subs	r4, r4, r5
 800a86c:	10a4      	asrs	r4, r4, #2
 800a86e:	2600      	movs	r6, #0
 800a870:	42a6      	cmp	r6, r4
 800a872:	d109      	bne.n	800a888 <__libc_init_array+0x24>
 800a874:	4d0b      	ldr	r5, [pc, #44]	; (800a8a4 <__libc_init_array+0x40>)
 800a876:	4c0c      	ldr	r4, [pc, #48]	; (800a8a8 <__libc_init_array+0x44>)
 800a878:	f002 feba 	bl	800d5f0 <_init>
 800a87c:	1b64      	subs	r4, r4, r5
 800a87e:	10a4      	asrs	r4, r4, #2
 800a880:	2600      	movs	r6, #0
 800a882:	42a6      	cmp	r6, r4
 800a884:	d105      	bne.n	800a892 <__libc_init_array+0x2e>
 800a886:	bd70      	pop	{r4, r5, r6, pc}
 800a888:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88c:	4798      	blx	r3
 800a88e:	3601      	adds	r6, #1
 800a890:	e7ee      	b.n	800a870 <__libc_init_array+0xc>
 800a892:	f855 3b04 	ldr.w	r3, [r5], #4
 800a896:	4798      	blx	r3
 800a898:	3601      	adds	r6, #1
 800a89a:	e7f2      	b.n	800a882 <__libc_init_array+0x1e>
 800a89c:	0800dab4 	.word	0x0800dab4
 800a8a0:	0800dab4 	.word	0x0800dab4
 800a8a4:	0800dab4 	.word	0x0800dab4
 800a8a8:	0800dab8 	.word	0x0800dab8

0800a8ac <malloc>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <malloc+0xc>)
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	f000 b871 	b.w	800a998 <_malloc_r>
 800a8b6:	bf00      	nop
 800a8b8:	2000003c 	.word	0x2000003c

0800a8bc <free>:
 800a8bc:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <free+0xc>)
 800a8be:	4601      	mov	r1, r0
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f000 b819 	b.w	800a8f8 <_free_r>
 800a8c6:	bf00      	nop
 800a8c8:	2000003c 	.word	0x2000003c

0800a8cc <memcpy>:
 800a8cc:	440a      	add	r2, r1
 800a8ce:	4291      	cmp	r1, r2
 800a8d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8d4:	d100      	bne.n	800a8d8 <memcpy+0xc>
 800a8d6:	4770      	bx	lr
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8e2:	4291      	cmp	r1, r2
 800a8e4:	d1f9      	bne.n	800a8da <memcpy+0xe>
 800a8e6:	bd10      	pop	{r4, pc}

0800a8e8 <memset>:
 800a8e8:	4402      	add	r2, r0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d100      	bne.n	800a8f2 <memset+0xa>
 800a8f0:	4770      	bx	lr
 800a8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f6:	e7f9      	b.n	800a8ec <memset+0x4>

0800a8f8 <_free_r>:
 800a8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8fa:	2900      	cmp	r1, #0
 800a8fc:	d048      	beq.n	800a990 <_free_r+0x98>
 800a8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a902:	9001      	str	r0, [sp, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f1a1 0404 	sub.w	r4, r1, #4
 800a90a:	bfb8      	it	lt
 800a90c:	18e4      	addlt	r4, r4, r3
 800a90e:	f001 fbb3 	bl	800c078 <__malloc_lock>
 800a912:	4a20      	ldr	r2, [pc, #128]	; (800a994 <_free_r+0x9c>)
 800a914:	9801      	ldr	r0, [sp, #4]
 800a916:	6813      	ldr	r3, [r2, #0]
 800a918:	4615      	mov	r5, r2
 800a91a:	b933      	cbnz	r3, 800a92a <_free_r+0x32>
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	6014      	str	r4, [r2, #0]
 800a920:	b003      	add	sp, #12
 800a922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a926:	f001 bbad 	b.w	800c084 <__malloc_unlock>
 800a92a:	42a3      	cmp	r3, r4
 800a92c:	d90b      	bls.n	800a946 <_free_r+0x4e>
 800a92e:	6821      	ldr	r1, [r4, #0]
 800a930:	1862      	adds	r2, r4, r1
 800a932:	4293      	cmp	r3, r2
 800a934:	bf04      	itt	eq
 800a936:	681a      	ldreq	r2, [r3, #0]
 800a938:	685b      	ldreq	r3, [r3, #4]
 800a93a:	6063      	str	r3, [r4, #4]
 800a93c:	bf04      	itt	eq
 800a93e:	1852      	addeq	r2, r2, r1
 800a940:	6022      	streq	r2, [r4, #0]
 800a942:	602c      	str	r4, [r5, #0]
 800a944:	e7ec      	b.n	800a920 <_free_r+0x28>
 800a946:	461a      	mov	r2, r3
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	b10b      	cbz	r3, 800a950 <_free_r+0x58>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d9fa      	bls.n	800a946 <_free_r+0x4e>
 800a950:	6811      	ldr	r1, [r2, #0]
 800a952:	1855      	adds	r5, r2, r1
 800a954:	42a5      	cmp	r5, r4
 800a956:	d10b      	bne.n	800a970 <_free_r+0x78>
 800a958:	6824      	ldr	r4, [r4, #0]
 800a95a:	4421      	add	r1, r4
 800a95c:	1854      	adds	r4, r2, r1
 800a95e:	42a3      	cmp	r3, r4
 800a960:	6011      	str	r1, [r2, #0]
 800a962:	d1dd      	bne.n	800a920 <_free_r+0x28>
 800a964:	681c      	ldr	r4, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	6053      	str	r3, [r2, #4]
 800a96a:	4421      	add	r1, r4
 800a96c:	6011      	str	r1, [r2, #0]
 800a96e:	e7d7      	b.n	800a920 <_free_r+0x28>
 800a970:	d902      	bls.n	800a978 <_free_r+0x80>
 800a972:	230c      	movs	r3, #12
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	e7d3      	b.n	800a920 <_free_r+0x28>
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	1961      	adds	r1, r4, r5
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf04      	itt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	bf04      	itt	eq
 800a988:	1949      	addeq	r1, r1, r5
 800a98a:	6021      	streq	r1, [r4, #0]
 800a98c:	6054      	str	r4, [r2, #4]
 800a98e:	e7c7      	b.n	800a920 <_free_r+0x28>
 800a990:	b003      	add	sp, #12
 800a992:	bd30      	pop	{r4, r5, pc}
 800a994:	20000294 	.word	0x20000294

0800a998 <_malloc_r>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	1ccd      	adds	r5, r1, #3
 800a99c:	f025 0503 	bic.w	r5, r5, #3
 800a9a0:	3508      	adds	r5, #8
 800a9a2:	2d0c      	cmp	r5, #12
 800a9a4:	bf38      	it	cc
 800a9a6:	250c      	movcc	r5, #12
 800a9a8:	2d00      	cmp	r5, #0
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	db01      	blt.n	800a9b2 <_malloc_r+0x1a>
 800a9ae:	42a9      	cmp	r1, r5
 800a9b0:	d903      	bls.n	800a9ba <_malloc_r+0x22>
 800a9b2:	230c      	movs	r3, #12
 800a9b4:	6033      	str	r3, [r6, #0]
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ba:	f001 fb5d 	bl	800c078 <__malloc_lock>
 800a9be:	4921      	ldr	r1, [pc, #132]	; (800aa44 <_malloc_r+0xac>)
 800a9c0:	680a      	ldr	r2, [r1, #0]
 800a9c2:	4614      	mov	r4, r2
 800a9c4:	b99c      	cbnz	r4, 800a9ee <_malloc_r+0x56>
 800a9c6:	4f20      	ldr	r7, [pc, #128]	; (800aa48 <_malloc_r+0xb0>)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	b923      	cbnz	r3, 800a9d6 <_malloc_r+0x3e>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f000 fca6 	bl	800b320 <_sbrk_r>
 800a9d4:	6038      	str	r0, [r7, #0]
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 fca1 	bl	800b320 <_sbrk_r>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	d123      	bne.n	800aa2a <_malloc_r+0x92>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f001 fb4c 	bl	800c084 <__malloc_unlock>
 800a9ec:	e7e3      	b.n	800a9b6 <_malloc_r+0x1e>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	1b5b      	subs	r3, r3, r5
 800a9f2:	d417      	bmi.n	800aa24 <_malloc_r+0x8c>
 800a9f4:	2b0b      	cmp	r3, #11
 800a9f6:	d903      	bls.n	800aa00 <_malloc_r+0x68>
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	441c      	add	r4, r3
 800a9fc:	6025      	str	r5, [r4, #0]
 800a9fe:	e004      	b.n	800aa0a <_malloc_r+0x72>
 800aa00:	6863      	ldr	r3, [r4, #4]
 800aa02:	42a2      	cmp	r2, r4
 800aa04:	bf0c      	ite	eq
 800aa06:	600b      	streq	r3, [r1, #0]
 800aa08:	6053      	strne	r3, [r2, #4]
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f001 fb3a 	bl	800c084 <__malloc_unlock>
 800aa10:	f104 000b 	add.w	r0, r4, #11
 800aa14:	1d23      	adds	r3, r4, #4
 800aa16:	f020 0007 	bic.w	r0, r0, #7
 800aa1a:	1ac2      	subs	r2, r0, r3
 800aa1c:	d0cc      	beq.n	800a9b8 <_malloc_r+0x20>
 800aa1e:	1a1b      	subs	r3, r3, r0
 800aa20:	50a3      	str	r3, [r4, r2]
 800aa22:	e7c9      	b.n	800a9b8 <_malloc_r+0x20>
 800aa24:	4622      	mov	r2, r4
 800aa26:	6864      	ldr	r4, [r4, #4]
 800aa28:	e7cc      	b.n	800a9c4 <_malloc_r+0x2c>
 800aa2a:	1cc4      	adds	r4, r0, #3
 800aa2c:	f024 0403 	bic.w	r4, r4, #3
 800aa30:	42a0      	cmp	r0, r4
 800aa32:	d0e3      	beq.n	800a9fc <_malloc_r+0x64>
 800aa34:	1a21      	subs	r1, r4, r0
 800aa36:	4630      	mov	r0, r6
 800aa38:	f000 fc72 	bl	800b320 <_sbrk_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d1dd      	bne.n	800a9fc <_malloc_r+0x64>
 800aa40:	e7cf      	b.n	800a9e2 <_malloc_r+0x4a>
 800aa42:	bf00      	nop
 800aa44:	20000294 	.word	0x20000294
 800aa48:	20000298 	.word	0x20000298

0800aa4c <__cvt>:
 800aa4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa50:	ec55 4b10 	vmov	r4, r5, d0
 800aa54:	2d00      	cmp	r5, #0
 800aa56:	460e      	mov	r6, r1
 800aa58:	4619      	mov	r1, r3
 800aa5a:	462b      	mov	r3, r5
 800aa5c:	bfbb      	ittet	lt
 800aa5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa62:	461d      	movlt	r5, r3
 800aa64:	2300      	movge	r3, #0
 800aa66:	232d      	movlt	r3, #45	; 0x2d
 800aa68:	700b      	strb	r3, [r1, #0]
 800aa6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa70:	4691      	mov	r9, r2
 800aa72:	f023 0820 	bic.w	r8, r3, #32
 800aa76:	bfbc      	itt	lt
 800aa78:	4622      	movlt	r2, r4
 800aa7a:	4614      	movlt	r4, r2
 800aa7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa80:	d005      	beq.n	800aa8e <__cvt+0x42>
 800aa82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa86:	d100      	bne.n	800aa8a <__cvt+0x3e>
 800aa88:	3601      	adds	r6, #1
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	e000      	b.n	800aa90 <__cvt+0x44>
 800aa8e:	2103      	movs	r1, #3
 800aa90:	ab03      	add	r3, sp, #12
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	ab02      	add	r3, sp, #8
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	ec45 4b10 	vmov	d0, r4, r5
 800aa9c:	4653      	mov	r3, sl
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	f000 fcfa 	bl	800b498 <_dtoa_r>
 800aaa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	d102      	bne.n	800aab2 <__cvt+0x66>
 800aaac:	f019 0f01 	tst.w	r9, #1
 800aab0:	d022      	beq.n	800aaf8 <__cvt+0xac>
 800aab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aab6:	eb07 0906 	add.w	r9, r7, r6
 800aaba:	d110      	bne.n	800aade <__cvt+0x92>
 800aabc:	783b      	ldrb	r3, [r7, #0]
 800aabe:	2b30      	cmp	r3, #48	; 0x30
 800aac0:	d10a      	bne.n	800aad8 <__cvt+0x8c>
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7f5 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800aace:	b918      	cbnz	r0, 800aad8 <__cvt+0x8c>
 800aad0:	f1c6 0601 	rsb	r6, r6, #1
 800aad4:	f8ca 6000 	str.w	r6, [sl]
 800aad8:	f8da 3000 	ldr.w	r3, [sl]
 800aadc:	4499      	add	r9, r3
 800aade:	2200      	movs	r2, #0
 800aae0:	2300      	movs	r3, #0
 800aae2:	4620      	mov	r0, r4
 800aae4:	4629      	mov	r1, r5
 800aae6:	f7f5 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaea:	b108      	cbz	r0, 800aaf0 <__cvt+0xa4>
 800aaec:	f8cd 900c 	str.w	r9, [sp, #12]
 800aaf0:	2230      	movs	r2, #48	; 0x30
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	454b      	cmp	r3, r9
 800aaf6:	d307      	bcc.n	800ab08 <__cvt+0xbc>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aafc:	1bdb      	subs	r3, r3, r7
 800aafe:	4638      	mov	r0, r7
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	b004      	add	sp, #16
 800ab04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab08:	1c59      	adds	r1, r3, #1
 800ab0a:	9103      	str	r1, [sp, #12]
 800ab0c:	701a      	strb	r2, [r3, #0]
 800ab0e:	e7f0      	b.n	800aaf2 <__cvt+0xa6>

0800ab10 <__exponent>:
 800ab10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab12:	4603      	mov	r3, r0
 800ab14:	2900      	cmp	r1, #0
 800ab16:	bfb8      	it	lt
 800ab18:	4249      	neglt	r1, r1
 800ab1a:	f803 2b02 	strb.w	r2, [r3], #2
 800ab1e:	bfb4      	ite	lt
 800ab20:	222d      	movlt	r2, #45	; 0x2d
 800ab22:	222b      	movge	r2, #43	; 0x2b
 800ab24:	2909      	cmp	r1, #9
 800ab26:	7042      	strb	r2, [r0, #1]
 800ab28:	dd2a      	ble.n	800ab80 <__exponent+0x70>
 800ab2a:	f10d 0407 	add.w	r4, sp, #7
 800ab2e:	46a4      	mov	ip, r4
 800ab30:	270a      	movs	r7, #10
 800ab32:	46a6      	mov	lr, r4
 800ab34:	460a      	mov	r2, r1
 800ab36:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab3a:	fb07 1516 	mls	r5, r7, r6, r1
 800ab3e:	3530      	adds	r5, #48	; 0x30
 800ab40:	2a63      	cmp	r2, #99	; 0x63
 800ab42:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	dcf1      	bgt.n	800ab32 <__exponent+0x22>
 800ab4e:	3130      	adds	r1, #48	; 0x30
 800ab50:	f1ae 0502 	sub.w	r5, lr, #2
 800ab54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab58:	1c44      	adds	r4, r0, #1
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4561      	cmp	r1, ip
 800ab5e:	d30a      	bcc.n	800ab76 <__exponent+0x66>
 800ab60:	f10d 0209 	add.w	r2, sp, #9
 800ab64:	eba2 020e 	sub.w	r2, r2, lr
 800ab68:	4565      	cmp	r5, ip
 800ab6a:	bf88      	it	hi
 800ab6c:	2200      	movhi	r2, #0
 800ab6e:	4413      	add	r3, r2
 800ab70:	1a18      	subs	r0, r3, r0
 800ab72:	b003      	add	sp, #12
 800ab74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab7e:	e7ed      	b.n	800ab5c <__exponent+0x4c>
 800ab80:	2330      	movs	r3, #48	; 0x30
 800ab82:	3130      	adds	r1, #48	; 0x30
 800ab84:	7083      	strb	r3, [r0, #2]
 800ab86:	70c1      	strb	r1, [r0, #3]
 800ab88:	1d03      	adds	r3, r0, #4
 800ab8a:	e7f1      	b.n	800ab70 <__exponent+0x60>

0800ab8c <_printf_float>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	ed2d 8b02 	vpush	{d8}
 800ab94:	b08d      	sub	sp, #52	; 0x34
 800ab96:	460c      	mov	r4, r1
 800ab98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	461f      	mov	r7, r3
 800aba0:	4605      	mov	r5, r0
 800aba2:	f001 fa65 	bl	800c070 <_localeconv_r>
 800aba6:	f8d0 a000 	ldr.w	sl, [r0]
 800abaa:	4650      	mov	r0, sl
 800abac:	f7f5 fb10 	bl	80001d0 <strlen>
 800abb0:	2300      	movs	r3, #0
 800abb2:	930a      	str	r3, [sp, #40]	; 0x28
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	9305      	str	r3, [sp, #20]
 800abb8:	f8d8 3000 	ldr.w	r3, [r8]
 800abbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abc0:	3307      	adds	r3, #7
 800abc2:	f023 0307 	bic.w	r3, r3, #7
 800abc6:	f103 0208 	add.w	r2, r3, #8
 800abca:	f8c8 2000 	str.w	r2, [r8]
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800abda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abde:	9307      	str	r3, [sp, #28]
 800abe0:	f8cd 8018 	str.w	r8, [sp, #24]
 800abe4:	ee08 0a10 	vmov	s16, r0
 800abe8:	4b9f      	ldr	r3, [pc, #636]	; (800ae68 <_printf_float+0x2dc>)
 800abea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abee:	f04f 32ff 	mov.w	r2, #4294967295
 800abf2:	f7f5 ff9b 	bl	8000b2c <__aeabi_dcmpun>
 800abf6:	bb88      	cbnz	r0, 800ac5c <_printf_float+0xd0>
 800abf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abfc:	4b9a      	ldr	r3, [pc, #616]	; (800ae68 <_printf_float+0x2dc>)
 800abfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ac02:	f7f5 ff75 	bl	8000af0 <__aeabi_dcmple>
 800ac06:	bb48      	cbnz	r0, 800ac5c <_printf_float+0xd0>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 ff64 	bl	8000adc <__aeabi_dcmplt>
 800ac14:	b110      	cbz	r0, 800ac1c <_printf_float+0x90>
 800ac16:	232d      	movs	r3, #45	; 0x2d
 800ac18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac1c:	4b93      	ldr	r3, [pc, #588]	; (800ae6c <_printf_float+0x2e0>)
 800ac1e:	4894      	ldr	r0, [pc, #592]	; (800ae70 <_printf_float+0x2e4>)
 800ac20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac24:	bf94      	ite	ls
 800ac26:	4698      	movls	r8, r3
 800ac28:	4680      	movhi	r8, r0
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	9b05      	ldr	r3, [sp, #20]
 800ac30:	f023 0204 	bic.w	r2, r3, #4
 800ac34:	6022      	str	r2, [r4, #0]
 800ac36:	f04f 0900 	mov.w	r9, #0
 800ac3a:	9700      	str	r7, [sp, #0]
 800ac3c:	4633      	mov	r3, r6
 800ac3e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac40:	4621      	mov	r1, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 f9d8 	bl	800aff8 <_printf_common>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	f040 8090 	bne.w	800ad6e <_printf_float+0x1e2>
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	b00d      	add	sp, #52	; 0x34
 800ac54:	ecbd 8b02 	vpop	{d8}
 800ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	464b      	mov	r3, r9
 800ac60:	4640      	mov	r0, r8
 800ac62:	4649      	mov	r1, r9
 800ac64:	f7f5 ff62 	bl	8000b2c <__aeabi_dcmpun>
 800ac68:	b140      	cbz	r0, 800ac7c <_printf_float+0xf0>
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bfbc      	itt	lt
 800ac70:	232d      	movlt	r3, #45	; 0x2d
 800ac72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac76:	487f      	ldr	r0, [pc, #508]	; (800ae74 <_printf_float+0x2e8>)
 800ac78:	4b7f      	ldr	r3, [pc, #508]	; (800ae78 <_printf_float+0x2ec>)
 800ac7a:	e7d1      	b.n	800ac20 <_printf_float+0x94>
 800ac7c:	6863      	ldr	r3, [r4, #4]
 800ac7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac82:	9206      	str	r2, [sp, #24]
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	d13f      	bne.n	800ad08 <_printf_float+0x17c>
 800ac88:	2306      	movs	r3, #6
 800ac8a:	6063      	str	r3, [r4, #4]
 800ac8c:	9b05      	ldr	r3, [sp, #20]
 800ac8e:	6861      	ldr	r1, [r4, #4]
 800ac90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac94:	2300      	movs	r3, #0
 800ac96:	9303      	str	r3, [sp, #12]
 800ac98:	ab0a      	add	r3, sp, #40	; 0x28
 800ac9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac9e:	ab09      	add	r3, sp, #36	; 0x24
 800aca0:	ec49 8b10 	vmov	d0, r8, r9
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acac:	4628      	mov	r0, r5
 800acae:	f7ff fecd 	bl	800aa4c <__cvt>
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acb6:	2b47      	cmp	r3, #71	; 0x47
 800acb8:	4680      	mov	r8, r0
 800acba:	d108      	bne.n	800acce <_printf_float+0x142>
 800acbc:	1cc8      	adds	r0, r1, #3
 800acbe:	db02      	blt.n	800acc6 <_printf_float+0x13a>
 800acc0:	6863      	ldr	r3, [r4, #4]
 800acc2:	4299      	cmp	r1, r3
 800acc4:	dd41      	ble.n	800ad4a <_printf_float+0x1be>
 800acc6:	f1ab 0b02 	sub.w	fp, fp, #2
 800acca:	fa5f fb8b 	uxtb.w	fp, fp
 800acce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acd2:	d820      	bhi.n	800ad16 <_printf_float+0x18a>
 800acd4:	3901      	subs	r1, #1
 800acd6:	465a      	mov	r2, fp
 800acd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acdc:	9109      	str	r1, [sp, #36]	; 0x24
 800acde:	f7ff ff17 	bl	800ab10 <__exponent>
 800ace2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ace4:	1813      	adds	r3, r2, r0
 800ace6:	2a01      	cmp	r2, #1
 800ace8:	4681      	mov	r9, r0
 800acea:	6123      	str	r3, [r4, #16]
 800acec:	dc02      	bgt.n	800acf4 <_printf_float+0x168>
 800acee:	6822      	ldr	r2, [r4, #0]
 800acf0:	07d2      	lsls	r2, r2, #31
 800acf2:	d501      	bpl.n	800acf8 <_printf_float+0x16c>
 800acf4:	3301      	adds	r3, #1
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d09c      	beq.n	800ac3a <_printf_float+0xae>
 800ad00:	232d      	movs	r3, #45	; 0x2d
 800ad02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad06:	e798      	b.n	800ac3a <_printf_float+0xae>
 800ad08:	9a06      	ldr	r2, [sp, #24]
 800ad0a:	2a47      	cmp	r2, #71	; 0x47
 800ad0c:	d1be      	bne.n	800ac8c <_printf_float+0x100>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1bc      	bne.n	800ac8c <_printf_float+0x100>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e7b9      	b.n	800ac8a <_printf_float+0xfe>
 800ad16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad1a:	d118      	bne.n	800ad4e <_printf_float+0x1c2>
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	6863      	ldr	r3, [r4, #4]
 800ad20:	dd0b      	ble.n	800ad3a <_printf_float+0x1ae>
 800ad22:	6121      	str	r1, [r4, #16]
 800ad24:	b913      	cbnz	r3, 800ad2c <_printf_float+0x1a0>
 800ad26:	6822      	ldr	r2, [r4, #0]
 800ad28:	07d0      	lsls	r0, r2, #31
 800ad2a:	d502      	bpl.n	800ad32 <_printf_float+0x1a6>
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	440b      	add	r3, r1
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad34:	f04f 0900 	mov.w	r9, #0
 800ad38:	e7de      	b.n	800acf8 <_printf_float+0x16c>
 800ad3a:	b913      	cbnz	r3, 800ad42 <_printf_float+0x1b6>
 800ad3c:	6822      	ldr	r2, [r4, #0]
 800ad3e:	07d2      	lsls	r2, r2, #31
 800ad40:	d501      	bpl.n	800ad46 <_printf_float+0x1ba>
 800ad42:	3302      	adds	r3, #2
 800ad44:	e7f4      	b.n	800ad30 <_printf_float+0x1a4>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e7f2      	b.n	800ad30 <_printf_float+0x1a4>
 800ad4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad50:	4299      	cmp	r1, r3
 800ad52:	db05      	blt.n	800ad60 <_printf_float+0x1d4>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	6121      	str	r1, [r4, #16]
 800ad58:	07d8      	lsls	r0, r3, #31
 800ad5a:	d5ea      	bpl.n	800ad32 <_printf_float+0x1a6>
 800ad5c:	1c4b      	adds	r3, r1, #1
 800ad5e:	e7e7      	b.n	800ad30 <_printf_float+0x1a4>
 800ad60:	2900      	cmp	r1, #0
 800ad62:	bfd4      	ite	le
 800ad64:	f1c1 0202 	rsble	r2, r1, #2
 800ad68:	2201      	movgt	r2, #1
 800ad6a:	4413      	add	r3, r2
 800ad6c:	e7e0      	b.n	800ad30 <_printf_float+0x1a4>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	055a      	lsls	r2, r3, #21
 800ad72:	d407      	bmi.n	800ad84 <_printf_float+0x1f8>
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	4642      	mov	r2, r8
 800ad78:	4631      	mov	r1, r6
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	47b8      	blx	r7
 800ad7e:	3001      	adds	r0, #1
 800ad80:	d12c      	bne.n	800addc <_printf_float+0x250>
 800ad82:	e764      	b.n	800ac4e <_printf_float+0xc2>
 800ad84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad88:	f240 80e0 	bls.w	800af4c <_printf_float+0x3c0>
 800ad8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad90:	2200      	movs	r2, #0
 800ad92:	2300      	movs	r3, #0
 800ad94:	f7f5 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d034      	beq.n	800ae06 <_printf_float+0x27a>
 800ad9c:	4a37      	ldr	r2, [pc, #220]	; (800ae7c <_printf_float+0x2f0>)
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4631      	mov	r1, r6
 800ada2:	4628      	mov	r0, r5
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	f43f af51 	beq.w	800ac4e <_printf_float+0xc2>
 800adac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adb0:	429a      	cmp	r2, r3
 800adb2:	db02      	blt.n	800adba <_printf_float+0x22e>
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	07d8      	lsls	r0, r3, #31
 800adb8:	d510      	bpl.n	800addc <_printf_float+0x250>
 800adba:	ee18 3a10 	vmov	r3, s16
 800adbe:	4652      	mov	r2, sl
 800adc0:	4631      	mov	r1, r6
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b8      	blx	r7
 800adc6:	3001      	adds	r0, #1
 800adc8:	f43f af41 	beq.w	800ac4e <_printf_float+0xc2>
 800adcc:	f04f 0800 	mov.w	r8, #0
 800add0:	f104 091a 	add.w	r9, r4, #26
 800add4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add6:	3b01      	subs	r3, #1
 800add8:	4543      	cmp	r3, r8
 800adda:	dc09      	bgt.n	800adf0 <_printf_float+0x264>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	079b      	lsls	r3, r3, #30
 800ade0:	f100 8105 	bmi.w	800afee <_printf_float+0x462>
 800ade4:	68e0      	ldr	r0, [r4, #12]
 800ade6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade8:	4298      	cmp	r0, r3
 800adea:	bfb8      	it	lt
 800adec:	4618      	movlt	r0, r3
 800adee:	e730      	b.n	800ac52 <_printf_float+0xc6>
 800adf0:	2301      	movs	r3, #1
 800adf2:	464a      	mov	r2, r9
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f af27 	beq.w	800ac4e <_printf_float+0xc2>
 800ae00:	f108 0801 	add.w	r8, r8, #1
 800ae04:	e7e6      	b.n	800add4 <_printf_float+0x248>
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dc39      	bgt.n	800ae80 <_printf_float+0x2f4>
 800ae0c:	4a1b      	ldr	r2, [pc, #108]	; (800ae7c <_printf_float+0x2f0>)
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4631      	mov	r1, r6
 800ae12:	4628      	mov	r0, r5
 800ae14:	47b8      	blx	r7
 800ae16:	3001      	adds	r0, #1
 800ae18:	f43f af19 	beq.w	800ac4e <_printf_float+0xc2>
 800ae1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae20:	4313      	orrs	r3, r2
 800ae22:	d102      	bne.n	800ae2a <_printf_float+0x29e>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	07d9      	lsls	r1, r3, #31
 800ae28:	d5d8      	bpl.n	800addc <_printf_float+0x250>
 800ae2a:	ee18 3a10 	vmov	r3, s16
 800ae2e:	4652      	mov	r2, sl
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f af09 	beq.w	800ac4e <_printf_float+0xc2>
 800ae3c:	f04f 0900 	mov.w	r9, #0
 800ae40:	f104 0a1a 	add.w	sl, r4, #26
 800ae44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae46:	425b      	negs	r3, r3
 800ae48:	454b      	cmp	r3, r9
 800ae4a:	dc01      	bgt.n	800ae50 <_printf_float+0x2c4>
 800ae4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae4e:	e792      	b.n	800ad76 <_printf_float+0x1ea>
 800ae50:	2301      	movs	r3, #1
 800ae52:	4652      	mov	r2, sl
 800ae54:	4631      	mov	r1, r6
 800ae56:	4628      	mov	r0, r5
 800ae58:	47b8      	blx	r7
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	f43f aef7 	beq.w	800ac4e <_printf_float+0xc2>
 800ae60:	f109 0901 	add.w	r9, r9, #1
 800ae64:	e7ee      	b.n	800ae44 <_printf_float+0x2b8>
 800ae66:	bf00      	nop
 800ae68:	7fefffff 	.word	0x7fefffff
 800ae6c:	0800d6cc 	.word	0x0800d6cc
 800ae70:	0800d6d0 	.word	0x0800d6d0
 800ae74:	0800d6d8 	.word	0x0800d6d8
 800ae78:	0800d6d4 	.word	0x0800d6d4
 800ae7c:	0800d6dc 	.word	0x0800d6dc
 800ae80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae84:	429a      	cmp	r2, r3
 800ae86:	bfa8      	it	ge
 800ae88:	461a      	movge	r2, r3
 800ae8a:	2a00      	cmp	r2, #0
 800ae8c:	4691      	mov	r9, r2
 800ae8e:	dc37      	bgt.n	800af00 <_printf_float+0x374>
 800ae90:	f04f 0b00 	mov.w	fp, #0
 800ae94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae98:	f104 021a 	add.w	r2, r4, #26
 800ae9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	eba3 0309 	sub.w	r3, r3, r9
 800aea4:	455b      	cmp	r3, fp
 800aea6:	dc33      	bgt.n	800af10 <_printf_float+0x384>
 800aea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeac:	429a      	cmp	r2, r3
 800aeae:	db3b      	blt.n	800af28 <_printf_float+0x39c>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	07da      	lsls	r2, r3, #31
 800aeb4:	d438      	bmi.n	800af28 <_printf_float+0x39c>
 800aeb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeb8:	9b05      	ldr	r3, [sp, #20]
 800aeba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	eba2 0901 	sub.w	r9, r2, r1
 800aec2:	4599      	cmp	r9, r3
 800aec4:	bfa8      	it	ge
 800aec6:	4699      	movge	r9, r3
 800aec8:	f1b9 0f00 	cmp.w	r9, #0
 800aecc:	dc35      	bgt.n	800af3a <_printf_float+0x3ae>
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aed6:	f104 0a1a 	add.w	sl, r4, #26
 800aeda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aede:	1a9b      	subs	r3, r3, r2
 800aee0:	eba3 0309 	sub.w	r3, r3, r9
 800aee4:	4543      	cmp	r3, r8
 800aee6:	f77f af79 	ble.w	800addc <_printf_float+0x250>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4652      	mov	r2, sl
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	f43f aeaa 	beq.w	800ac4e <_printf_float+0xc2>
 800aefa:	f108 0801 	add.w	r8, r8, #1
 800aefe:	e7ec      	b.n	800aeda <_printf_float+0x34e>
 800af00:	4613      	mov	r3, r2
 800af02:	4631      	mov	r1, r6
 800af04:	4642      	mov	r2, r8
 800af06:	4628      	mov	r0, r5
 800af08:	47b8      	blx	r7
 800af0a:	3001      	adds	r0, #1
 800af0c:	d1c0      	bne.n	800ae90 <_printf_float+0x304>
 800af0e:	e69e      	b.n	800ac4e <_printf_float+0xc2>
 800af10:	2301      	movs	r3, #1
 800af12:	4631      	mov	r1, r6
 800af14:	4628      	mov	r0, r5
 800af16:	9205      	str	r2, [sp, #20]
 800af18:	47b8      	blx	r7
 800af1a:	3001      	adds	r0, #1
 800af1c:	f43f ae97 	beq.w	800ac4e <_printf_float+0xc2>
 800af20:	9a05      	ldr	r2, [sp, #20]
 800af22:	f10b 0b01 	add.w	fp, fp, #1
 800af26:	e7b9      	b.n	800ae9c <_printf_float+0x310>
 800af28:	ee18 3a10 	vmov	r3, s16
 800af2c:	4652      	mov	r2, sl
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	d1be      	bne.n	800aeb6 <_printf_float+0x32a>
 800af38:	e689      	b.n	800ac4e <_printf_float+0xc2>
 800af3a:	9a05      	ldr	r2, [sp, #20]
 800af3c:	464b      	mov	r3, r9
 800af3e:	4442      	add	r2, r8
 800af40:	4631      	mov	r1, r6
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	d1c1      	bne.n	800aece <_printf_float+0x342>
 800af4a:	e680      	b.n	800ac4e <_printf_float+0xc2>
 800af4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af4e:	2a01      	cmp	r2, #1
 800af50:	dc01      	bgt.n	800af56 <_printf_float+0x3ca>
 800af52:	07db      	lsls	r3, r3, #31
 800af54:	d538      	bpl.n	800afc8 <_printf_float+0x43c>
 800af56:	2301      	movs	r3, #1
 800af58:	4642      	mov	r2, r8
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b8      	blx	r7
 800af60:	3001      	adds	r0, #1
 800af62:	f43f ae74 	beq.w	800ac4e <_printf_float+0xc2>
 800af66:	ee18 3a10 	vmov	r3, s16
 800af6a:	4652      	mov	r2, sl
 800af6c:	4631      	mov	r1, r6
 800af6e:	4628      	mov	r0, r5
 800af70:	47b8      	blx	r7
 800af72:	3001      	adds	r0, #1
 800af74:	f43f ae6b 	beq.w	800ac4e <_printf_float+0xc2>
 800af78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af7c:	2200      	movs	r2, #0
 800af7e:	2300      	movs	r3, #0
 800af80:	f7f5 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 800af84:	b9d8      	cbnz	r0, 800afbe <_printf_float+0x432>
 800af86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af88:	f108 0201 	add.w	r2, r8, #1
 800af8c:	3b01      	subs	r3, #1
 800af8e:	4631      	mov	r1, r6
 800af90:	4628      	mov	r0, r5
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	d10e      	bne.n	800afb6 <_printf_float+0x42a>
 800af98:	e659      	b.n	800ac4e <_printf_float+0xc2>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4652      	mov	r2, sl
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	f43f ae52 	beq.w	800ac4e <_printf_float+0xc2>
 800afaa:	f108 0801 	add.w	r8, r8, #1
 800afae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb0:	3b01      	subs	r3, #1
 800afb2:	4543      	cmp	r3, r8
 800afb4:	dcf1      	bgt.n	800af9a <_printf_float+0x40e>
 800afb6:	464b      	mov	r3, r9
 800afb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afbc:	e6dc      	b.n	800ad78 <_printf_float+0x1ec>
 800afbe:	f04f 0800 	mov.w	r8, #0
 800afc2:	f104 0a1a 	add.w	sl, r4, #26
 800afc6:	e7f2      	b.n	800afae <_printf_float+0x422>
 800afc8:	2301      	movs	r3, #1
 800afca:	4642      	mov	r2, r8
 800afcc:	e7df      	b.n	800af8e <_printf_float+0x402>
 800afce:	2301      	movs	r3, #1
 800afd0:	464a      	mov	r2, r9
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae38 	beq.w	800ac4e <_printf_float+0xc2>
 800afde:	f108 0801 	add.w	r8, r8, #1
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afe6:	1a5b      	subs	r3, r3, r1
 800afe8:	4543      	cmp	r3, r8
 800afea:	dcf0      	bgt.n	800afce <_printf_float+0x442>
 800afec:	e6fa      	b.n	800ade4 <_printf_float+0x258>
 800afee:	f04f 0800 	mov.w	r8, #0
 800aff2:	f104 0919 	add.w	r9, r4, #25
 800aff6:	e7f4      	b.n	800afe2 <_printf_float+0x456>

0800aff8 <_printf_common>:
 800aff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	4616      	mov	r6, r2
 800affe:	4699      	mov	r9, r3
 800b000:	688a      	ldr	r2, [r1, #8]
 800b002:	690b      	ldr	r3, [r1, #16]
 800b004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b008:	4293      	cmp	r3, r2
 800b00a:	bfb8      	it	lt
 800b00c:	4613      	movlt	r3, r2
 800b00e:	6033      	str	r3, [r6, #0]
 800b010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b014:	4607      	mov	r7, r0
 800b016:	460c      	mov	r4, r1
 800b018:	b10a      	cbz	r2, 800b01e <_printf_common+0x26>
 800b01a:	3301      	adds	r3, #1
 800b01c:	6033      	str	r3, [r6, #0]
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	0699      	lsls	r1, r3, #26
 800b022:	bf42      	ittt	mi
 800b024:	6833      	ldrmi	r3, [r6, #0]
 800b026:	3302      	addmi	r3, #2
 800b028:	6033      	strmi	r3, [r6, #0]
 800b02a:	6825      	ldr	r5, [r4, #0]
 800b02c:	f015 0506 	ands.w	r5, r5, #6
 800b030:	d106      	bne.n	800b040 <_printf_common+0x48>
 800b032:	f104 0a19 	add.w	sl, r4, #25
 800b036:	68e3      	ldr	r3, [r4, #12]
 800b038:	6832      	ldr	r2, [r6, #0]
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	42ab      	cmp	r3, r5
 800b03e:	dc26      	bgt.n	800b08e <_printf_common+0x96>
 800b040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b044:	1e13      	subs	r3, r2, #0
 800b046:	6822      	ldr	r2, [r4, #0]
 800b048:	bf18      	it	ne
 800b04a:	2301      	movne	r3, #1
 800b04c:	0692      	lsls	r2, r2, #26
 800b04e:	d42b      	bmi.n	800b0a8 <_printf_common+0xb0>
 800b050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b054:	4649      	mov	r1, r9
 800b056:	4638      	mov	r0, r7
 800b058:	47c0      	blx	r8
 800b05a:	3001      	adds	r0, #1
 800b05c:	d01e      	beq.n	800b09c <_printf_common+0xa4>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	68e5      	ldr	r5, [r4, #12]
 800b062:	6832      	ldr	r2, [r6, #0]
 800b064:	f003 0306 	and.w	r3, r3, #6
 800b068:	2b04      	cmp	r3, #4
 800b06a:	bf08      	it	eq
 800b06c:	1aad      	subeq	r5, r5, r2
 800b06e:	68a3      	ldr	r3, [r4, #8]
 800b070:	6922      	ldr	r2, [r4, #16]
 800b072:	bf0c      	ite	eq
 800b074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b078:	2500      	movne	r5, #0
 800b07a:	4293      	cmp	r3, r2
 800b07c:	bfc4      	itt	gt
 800b07e:	1a9b      	subgt	r3, r3, r2
 800b080:	18ed      	addgt	r5, r5, r3
 800b082:	2600      	movs	r6, #0
 800b084:	341a      	adds	r4, #26
 800b086:	42b5      	cmp	r5, r6
 800b088:	d11a      	bne.n	800b0c0 <_printf_common+0xc8>
 800b08a:	2000      	movs	r0, #0
 800b08c:	e008      	b.n	800b0a0 <_printf_common+0xa8>
 800b08e:	2301      	movs	r3, #1
 800b090:	4652      	mov	r2, sl
 800b092:	4649      	mov	r1, r9
 800b094:	4638      	mov	r0, r7
 800b096:	47c0      	blx	r8
 800b098:	3001      	adds	r0, #1
 800b09a:	d103      	bne.n	800b0a4 <_printf_common+0xac>
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	e7c6      	b.n	800b036 <_printf_common+0x3e>
 800b0a8:	18e1      	adds	r1, r4, r3
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	2030      	movs	r0, #48	; 0x30
 800b0ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0b2:	4422      	add	r2, r4
 800b0b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0bc:	3302      	adds	r3, #2
 800b0be:	e7c7      	b.n	800b050 <_printf_common+0x58>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	47c0      	blx	r8
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	d0e6      	beq.n	800b09c <_printf_common+0xa4>
 800b0ce:	3601      	adds	r6, #1
 800b0d0:	e7d9      	b.n	800b086 <_printf_common+0x8e>
	...

0800b0d4 <_printf_i>:
 800b0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d8:	460c      	mov	r4, r1
 800b0da:	4691      	mov	r9, r2
 800b0dc:	7e27      	ldrb	r7, [r4, #24]
 800b0de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0e0:	2f78      	cmp	r7, #120	; 0x78
 800b0e2:	4680      	mov	r8, r0
 800b0e4:	469a      	mov	sl, r3
 800b0e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0ea:	d807      	bhi.n	800b0fc <_printf_i+0x28>
 800b0ec:	2f62      	cmp	r7, #98	; 0x62
 800b0ee:	d80a      	bhi.n	800b106 <_printf_i+0x32>
 800b0f0:	2f00      	cmp	r7, #0
 800b0f2:	f000 80d8 	beq.w	800b2a6 <_printf_i+0x1d2>
 800b0f6:	2f58      	cmp	r7, #88	; 0x58
 800b0f8:	f000 80a3 	beq.w	800b242 <_printf_i+0x16e>
 800b0fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b104:	e03a      	b.n	800b17c <_printf_i+0xa8>
 800b106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b10a:	2b15      	cmp	r3, #21
 800b10c:	d8f6      	bhi.n	800b0fc <_printf_i+0x28>
 800b10e:	a001      	add	r0, pc, #4	; (adr r0, 800b114 <_printf_i+0x40>)
 800b110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b114:	0800b16d 	.word	0x0800b16d
 800b118:	0800b181 	.word	0x0800b181
 800b11c:	0800b0fd 	.word	0x0800b0fd
 800b120:	0800b0fd 	.word	0x0800b0fd
 800b124:	0800b0fd 	.word	0x0800b0fd
 800b128:	0800b0fd 	.word	0x0800b0fd
 800b12c:	0800b181 	.word	0x0800b181
 800b130:	0800b0fd 	.word	0x0800b0fd
 800b134:	0800b0fd 	.word	0x0800b0fd
 800b138:	0800b0fd 	.word	0x0800b0fd
 800b13c:	0800b0fd 	.word	0x0800b0fd
 800b140:	0800b28d 	.word	0x0800b28d
 800b144:	0800b1b1 	.word	0x0800b1b1
 800b148:	0800b26f 	.word	0x0800b26f
 800b14c:	0800b0fd 	.word	0x0800b0fd
 800b150:	0800b0fd 	.word	0x0800b0fd
 800b154:	0800b2af 	.word	0x0800b2af
 800b158:	0800b0fd 	.word	0x0800b0fd
 800b15c:	0800b1b1 	.word	0x0800b1b1
 800b160:	0800b0fd 	.word	0x0800b0fd
 800b164:	0800b0fd 	.word	0x0800b0fd
 800b168:	0800b277 	.word	0x0800b277
 800b16c:	680b      	ldr	r3, [r1, #0]
 800b16e:	1d1a      	adds	r2, r3, #4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	600a      	str	r2, [r1, #0]
 800b174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b17c:	2301      	movs	r3, #1
 800b17e:	e0a3      	b.n	800b2c8 <_printf_i+0x1f4>
 800b180:	6825      	ldr	r5, [r4, #0]
 800b182:	6808      	ldr	r0, [r1, #0]
 800b184:	062e      	lsls	r6, r5, #24
 800b186:	f100 0304 	add.w	r3, r0, #4
 800b18a:	d50a      	bpl.n	800b1a2 <_printf_i+0xce>
 800b18c:	6805      	ldr	r5, [r0, #0]
 800b18e:	600b      	str	r3, [r1, #0]
 800b190:	2d00      	cmp	r5, #0
 800b192:	da03      	bge.n	800b19c <_printf_i+0xc8>
 800b194:	232d      	movs	r3, #45	; 0x2d
 800b196:	426d      	negs	r5, r5
 800b198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b19c:	485e      	ldr	r0, [pc, #376]	; (800b318 <_printf_i+0x244>)
 800b19e:	230a      	movs	r3, #10
 800b1a0:	e019      	b.n	800b1d6 <_printf_i+0x102>
 800b1a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b1a6:	6805      	ldr	r5, [r0, #0]
 800b1a8:	600b      	str	r3, [r1, #0]
 800b1aa:	bf18      	it	ne
 800b1ac:	b22d      	sxthne	r5, r5
 800b1ae:	e7ef      	b.n	800b190 <_printf_i+0xbc>
 800b1b0:	680b      	ldr	r3, [r1, #0]
 800b1b2:	6825      	ldr	r5, [r4, #0]
 800b1b4:	1d18      	adds	r0, r3, #4
 800b1b6:	6008      	str	r0, [r1, #0]
 800b1b8:	0628      	lsls	r0, r5, #24
 800b1ba:	d501      	bpl.n	800b1c0 <_printf_i+0xec>
 800b1bc:	681d      	ldr	r5, [r3, #0]
 800b1be:	e002      	b.n	800b1c6 <_printf_i+0xf2>
 800b1c0:	0669      	lsls	r1, r5, #25
 800b1c2:	d5fb      	bpl.n	800b1bc <_printf_i+0xe8>
 800b1c4:	881d      	ldrh	r5, [r3, #0]
 800b1c6:	4854      	ldr	r0, [pc, #336]	; (800b318 <_printf_i+0x244>)
 800b1c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b1ca:	bf0c      	ite	eq
 800b1cc:	2308      	moveq	r3, #8
 800b1ce:	230a      	movne	r3, #10
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1d6:	6866      	ldr	r6, [r4, #4]
 800b1d8:	60a6      	str	r6, [r4, #8]
 800b1da:	2e00      	cmp	r6, #0
 800b1dc:	bfa2      	ittt	ge
 800b1de:	6821      	ldrge	r1, [r4, #0]
 800b1e0:	f021 0104 	bicge.w	r1, r1, #4
 800b1e4:	6021      	strge	r1, [r4, #0]
 800b1e6:	b90d      	cbnz	r5, 800b1ec <_printf_i+0x118>
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	d04d      	beq.n	800b288 <_printf_i+0x1b4>
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1f2:	fb03 5711 	mls	r7, r3, r1, r5
 800b1f6:	5dc7      	ldrb	r7, [r0, r7]
 800b1f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1fc:	462f      	mov	r7, r5
 800b1fe:	42bb      	cmp	r3, r7
 800b200:	460d      	mov	r5, r1
 800b202:	d9f4      	bls.n	800b1ee <_printf_i+0x11a>
 800b204:	2b08      	cmp	r3, #8
 800b206:	d10b      	bne.n	800b220 <_printf_i+0x14c>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	07df      	lsls	r7, r3, #31
 800b20c:	d508      	bpl.n	800b220 <_printf_i+0x14c>
 800b20e:	6923      	ldr	r3, [r4, #16]
 800b210:	6861      	ldr	r1, [r4, #4]
 800b212:	4299      	cmp	r1, r3
 800b214:	bfde      	ittt	le
 800b216:	2330      	movle	r3, #48	; 0x30
 800b218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b21c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b220:	1b92      	subs	r2, r2, r6
 800b222:	6122      	str	r2, [r4, #16]
 800b224:	f8cd a000 	str.w	sl, [sp]
 800b228:	464b      	mov	r3, r9
 800b22a:	aa03      	add	r2, sp, #12
 800b22c:	4621      	mov	r1, r4
 800b22e:	4640      	mov	r0, r8
 800b230:	f7ff fee2 	bl	800aff8 <_printf_common>
 800b234:	3001      	adds	r0, #1
 800b236:	d14c      	bne.n	800b2d2 <_printf_i+0x1fe>
 800b238:	f04f 30ff 	mov.w	r0, #4294967295
 800b23c:	b004      	add	sp, #16
 800b23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b242:	4835      	ldr	r0, [pc, #212]	; (800b318 <_printf_i+0x244>)
 800b244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	680e      	ldr	r6, [r1, #0]
 800b24c:	061f      	lsls	r7, r3, #24
 800b24e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b252:	600e      	str	r6, [r1, #0]
 800b254:	d514      	bpl.n	800b280 <_printf_i+0x1ac>
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	bf44      	itt	mi
 800b25a:	f043 0320 	orrmi.w	r3, r3, #32
 800b25e:	6023      	strmi	r3, [r4, #0]
 800b260:	b91d      	cbnz	r5, 800b26a <_printf_i+0x196>
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	f023 0320 	bic.w	r3, r3, #32
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	2310      	movs	r3, #16
 800b26c:	e7b0      	b.n	800b1d0 <_printf_i+0xfc>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f043 0320 	orr.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	2378      	movs	r3, #120	; 0x78
 800b278:	4828      	ldr	r0, [pc, #160]	; (800b31c <_printf_i+0x248>)
 800b27a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b27e:	e7e3      	b.n	800b248 <_printf_i+0x174>
 800b280:	065e      	lsls	r6, r3, #25
 800b282:	bf48      	it	mi
 800b284:	b2ad      	uxthmi	r5, r5
 800b286:	e7e6      	b.n	800b256 <_printf_i+0x182>
 800b288:	4616      	mov	r6, r2
 800b28a:	e7bb      	b.n	800b204 <_printf_i+0x130>
 800b28c:	680b      	ldr	r3, [r1, #0]
 800b28e:	6826      	ldr	r6, [r4, #0]
 800b290:	6960      	ldr	r0, [r4, #20]
 800b292:	1d1d      	adds	r5, r3, #4
 800b294:	600d      	str	r5, [r1, #0]
 800b296:	0635      	lsls	r5, r6, #24
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	d501      	bpl.n	800b2a0 <_printf_i+0x1cc>
 800b29c:	6018      	str	r0, [r3, #0]
 800b29e:	e002      	b.n	800b2a6 <_printf_i+0x1d2>
 800b2a0:	0671      	lsls	r1, r6, #25
 800b2a2:	d5fb      	bpl.n	800b29c <_printf_i+0x1c8>
 800b2a4:	8018      	strh	r0, [r3, #0]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	6123      	str	r3, [r4, #16]
 800b2aa:	4616      	mov	r6, r2
 800b2ac:	e7ba      	b.n	800b224 <_printf_i+0x150>
 800b2ae:	680b      	ldr	r3, [r1, #0]
 800b2b0:	1d1a      	adds	r2, r3, #4
 800b2b2:	600a      	str	r2, [r1, #0]
 800b2b4:	681e      	ldr	r6, [r3, #0]
 800b2b6:	6862      	ldr	r2, [r4, #4]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f7f4 ff90 	bl	80001e0 <memchr>
 800b2c0:	b108      	cbz	r0, 800b2c6 <_printf_i+0x1f2>
 800b2c2:	1b80      	subs	r0, r0, r6
 800b2c4:	6060      	str	r0, [r4, #4]
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d0:	e7a8      	b.n	800b224 <_printf_i+0x150>
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	4640      	mov	r0, r8
 800b2da:	47d0      	blx	sl
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d0ab      	beq.n	800b238 <_printf_i+0x164>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	079b      	lsls	r3, r3, #30
 800b2e4:	d413      	bmi.n	800b30e <_printf_i+0x23a>
 800b2e6:	68e0      	ldr	r0, [r4, #12]
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	4298      	cmp	r0, r3
 800b2ec:	bfb8      	it	lt
 800b2ee:	4618      	movlt	r0, r3
 800b2f0:	e7a4      	b.n	800b23c <_printf_i+0x168>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	47d0      	blx	sl
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d09b      	beq.n	800b238 <_printf_i+0x164>
 800b300:	3501      	adds	r5, #1
 800b302:	68e3      	ldr	r3, [r4, #12]
 800b304:	9903      	ldr	r1, [sp, #12]
 800b306:	1a5b      	subs	r3, r3, r1
 800b308:	42ab      	cmp	r3, r5
 800b30a:	dcf2      	bgt.n	800b2f2 <_printf_i+0x21e>
 800b30c:	e7eb      	b.n	800b2e6 <_printf_i+0x212>
 800b30e:	2500      	movs	r5, #0
 800b310:	f104 0619 	add.w	r6, r4, #25
 800b314:	e7f5      	b.n	800b302 <_printf_i+0x22e>
 800b316:	bf00      	nop
 800b318:	0800d6de 	.word	0x0800d6de
 800b31c:	0800d6ef 	.word	0x0800d6ef

0800b320 <_sbrk_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d06      	ldr	r5, [pc, #24]	; (800b33c <_sbrk_r+0x1c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f6 fdd4 	bl	8001ed8 <_sbrk>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_sbrk_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_sbrk_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20000b0c 	.word	0x20000b0c

0800b340 <siprintf>:
 800b340:	b40e      	push	{r1, r2, r3}
 800b342:	b500      	push	{lr}
 800b344:	b09c      	sub	sp, #112	; 0x70
 800b346:	ab1d      	add	r3, sp, #116	; 0x74
 800b348:	9002      	str	r0, [sp, #8]
 800b34a:	9006      	str	r0, [sp, #24]
 800b34c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b350:	4809      	ldr	r0, [pc, #36]	; (800b378 <siprintf+0x38>)
 800b352:	9107      	str	r1, [sp, #28]
 800b354:	9104      	str	r1, [sp, #16]
 800b356:	4909      	ldr	r1, [pc, #36]	; (800b37c <siprintf+0x3c>)
 800b358:	f853 2b04 	ldr.w	r2, [r3], #4
 800b35c:	9105      	str	r1, [sp, #20]
 800b35e:	6800      	ldr	r0, [r0, #0]
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	a902      	add	r1, sp, #8
 800b364:	f001 fa7c 	bl	800c860 <_svfiprintf_r>
 800b368:	9b02      	ldr	r3, [sp, #8]
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	b01c      	add	sp, #112	; 0x70
 800b370:	f85d eb04 	ldr.w	lr, [sp], #4
 800b374:	b003      	add	sp, #12
 800b376:	4770      	bx	lr
 800b378:	2000003c 	.word	0x2000003c
 800b37c:	ffff0208 	.word	0xffff0208

0800b380 <quorem>:
 800b380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	6903      	ldr	r3, [r0, #16]
 800b386:	690c      	ldr	r4, [r1, #16]
 800b388:	42a3      	cmp	r3, r4
 800b38a:	4607      	mov	r7, r0
 800b38c:	f2c0 8081 	blt.w	800b492 <quorem+0x112>
 800b390:	3c01      	subs	r4, #1
 800b392:	f101 0814 	add.w	r8, r1, #20
 800b396:	f100 0514 	add.w	r5, r0, #20
 800b39a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3b8:	d331      	bcc.n	800b41e <quorem+0x9e>
 800b3ba:	f04f 0e00 	mov.w	lr, #0
 800b3be:	4640      	mov	r0, r8
 800b3c0:	46ac      	mov	ip, r5
 800b3c2:	46f2      	mov	sl, lr
 800b3c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3c8:	b293      	uxth	r3, r2
 800b3ca:	fb06 e303 	mla	r3, r6, r3, lr
 800b3ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3d8:	0c12      	lsrs	r2, r2, #16
 800b3da:	f8dc a000 	ldr.w	sl, [ip]
 800b3de:	fb06 e202 	mla	r2, r6, r2, lr
 800b3e2:	fa13 f38a 	uxtah	r3, r3, sl
 800b3e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b3ea:	fa1f fa82 	uxth.w	sl, r2
 800b3ee:	f8dc 2000 	ldr.w	r2, [ip]
 800b3f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b3f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b400:	4581      	cmp	r9, r0
 800b402:	f84c 3b04 	str.w	r3, [ip], #4
 800b406:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b40a:	d2db      	bcs.n	800b3c4 <quorem+0x44>
 800b40c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b410:	b92b      	cbnz	r3, 800b41e <quorem+0x9e>
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	3b04      	subs	r3, #4
 800b416:	429d      	cmp	r5, r3
 800b418:	461a      	mov	r2, r3
 800b41a:	d32e      	bcc.n	800b47a <quorem+0xfa>
 800b41c:	613c      	str	r4, [r7, #16]
 800b41e:	4638      	mov	r0, r7
 800b420:	f001 f8b4 	bl	800c58c <__mcmp>
 800b424:	2800      	cmp	r0, #0
 800b426:	db24      	blt.n	800b472 <quorem+0xf2>
 800b428:	3601      	adds	r6, #1
 800b42a:	4628      	mov	r0, r5
 800b42c:	f04f 0c00 	mov.w	ip, #0
 800b430:	f858 2b04 	ldr.w	r2, [r8], #4
 800b434:	f8d0 e000 	ldr.w	lr, [r0]
 800b438:	b293      	uxth	r3, r2
 800b43a:	ebac 0303 	sub.w	r3, ip, r3
 800b43e:	0c12      	lsrs	r2, r2, #16
 800b440:	fa13 f38e 	uxtah	r3, r3, lr
 800b444:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b452:	45c1      	cmp	r9, r8
 800b454:	f840 3b04 	str.w	r3, [r0], #4
 800b458:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b45c:	d2e8      	bcs.n	800b430 <quorem+0xb0>
 800b45e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b466:	b922      	cbnz	r2, 800b472 <quorem+0xf2>
 800b468:	3b04      	subs	r3, #4
 800b46a:	429d      	cmp	r5, r3
 800b46c:	461a      	mov	r2, r3
 800b46e:	d30a      	bcc.n	800b486 <quorem+0x106>
 800b470:	613c      	str	r4, [r7, #16]
 800b472:	4630      	mov	r0, r6
 800b474:	b003      	add	sp, #12
 800b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47a:	6812      	ldr	r2, [r2, #0]
 800b47c:	3b04      	subs	r3, #4
 800b47e:	2a00      	cmp	r2, #0
 800b480:	d1cc      	bne.n	800b41c <quorem+0x9c>
 800b482:	3c01      	subs	r4, #1
 800b484:	e7c7      	b.n	800b416 <quorem+0x96>
 800b486:	6812      	ldr	r2, [r2, #0]
 800b488:	3b04      	subs	r3, #4
 800b48a:	2a00      	cmp	r2, #0
 800b48c:	d1f0      	bne.n	800b470 <quorem+0xf0>
 800b48e:	3c01      	subs	r4, #1
 800b490:	e7eb      	b.n	800b46a <quorem+0xea>
 800b492:	2000      	movs	r0, #0
 800b494:	e7ee      	b.n	800b474 <quorem+0xf4>
	...

0800b498 <_dtoa_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ed2d 8b02 	vpush	{d8}
 800b4a0:	ec57 6b10 	vmov	r6, r7, d0
 800b4a4:	b095      	sub	sp, #84	; 0x54
 800b4a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4ac:	9105      	str	r1, [sp, #20]
 800b4ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4b8:	b975      	cbnz	r5, 800b4d8 <_dtoa_r+0x40>
 800b4ba:	2010      	movs	r0, #16
 800b4bc:	f7ff f9f6 	bl	800a8ac <malloc>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	6260      	str	r0, [r4, #36]	; 0x24
 800b4c4:	b920      	cbnz	r0, 800b4d0 <_dtoa_r+0x38>
 800b4c6:	4bb2      	ldr	r3, [pc, #712]	; (800b790 <_dtoa_r+0x2f8>)
 800b4c8:	21ea      	movs	r1, #234	; 0xea
 800b4ca:	48b2      	ldr	r0, [pc, #712]	; (800b794 <_dtoa_r+0x2fc>)
 800b4cc:	f001 fac8 	bl	800ca60 <__assert_func>
 800b4d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4d4:	6005      	str	r5, [r0, #0]
 800b4d6:	60c5      	str	r5, [r0, #12]
 800b4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4da:	6819      	ldr	r1, [r3, #0]
 800b4dc:	b151      	cbz	r1, 800b4f4 <_dtoa_r+0x5c>
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	604a      	str	r2, [r1, #4]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4093      	lsls	r3, r2
 800b4e6:	608b      	str	r3, [r1, #8]
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 fe11 	bl	800c110 <_Bfree>
 800b4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	1e3b      	subs	r3, r7, #0
 800b4f6:	bfb9      	ittee	lt
 800b4f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b4fc:	9303      	strlt	r3, [sp, #12]
 800b4fe:	2300      	movge	r3, #0
 800b500:	f8c8 3000 	strge.w	r3, [r8]
 800b504:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b508:	4ba3      	ldr	r3, [pc, #652]	; (800b798 <_dtoa_r+0x300>)
 800b50a:	bfbc      	itt	lt
 800b50c:	2201      	movlt	r2, #1
 800b50e:	f8c8 2000 	strlt.w	r2, [r8]
 800b512:	ea33 0309 	bics.w	r3, r3, r9
 800b516:	d11b      	bne.n	800b550 <_dtoa_r+0xb8>
 800b518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b51a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b524:	4333      	orrs	r3, r6
 800b526:	f000 857a 	beq.w	800c01e <_dtoa_r+0xb86>
 800b52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b52c:	b963      	cbnz	r3, 800b548 <_dtoa_r+0xb0>
 800b52e:	4b9b      	ldr	r3, [pc, #620]	; (800b79c <_dtoa_r+0x304>)
 800b530:	e024      	b.n	800b57c <_dtoa_r+0xe4>
 800b532:	4b9b      	ldr	r3, [pc, #620]	; (800b7a0 <_dtoa_r+0x308>)
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	3308      	adds	r3, #8
 800b538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	9800      	ldr	r0, [sp, #0]
 800b53e:	b015      	add	sp, #84	; 0x54
 800b540:	ecbd 8b02 	vpop	{d8}
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	4b94      	ldr	r3, [pc, #592]	; (800b79c <_dtoa_r+0x304>)
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	3303      	adds	r3, #3
 800b54e:	e7f3      	b.n	800b538 <_dtoa_r+0xa0>
 800b550:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b554:	2200      	movs	r2, #0
 800b556:	ec51 0b17 	vmov	r0, r1, d7
 800b55a:	2300      	movs	r3, #0
 800b55c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b560:	f7f5 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b564:	4680      	mov	r8, r0
 800b566:	b158      	cbz	r0, 800b580 <_dtoa_r+0xe8>
 800b568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b56a:	2301      	movs	r3, #1
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 8551 	beq.w	800c018 <_dtoa_r+0xb80>
 800b576:	488b      	ldr	r0, [pc, #556]	; (800b7a4 <_dtoa_r+0x30c>)
 800b578:	6018      	str	r0, [r3, #0]
 800b57a:	1e43      	subs	r3, r0, #1
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	e7dd      	b.n	800b53c <_dtoa_r+0xa4>
 800b580:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b584:	aa12      	add	r2, sp, #72	; 0x48
 800b586:	a913      	add	r1, sp, #76	; 0x4c
 800b588:	4620      	mov	r0, r4
 800b58a:	f001 f8a3 	bl	800c6d4 <__d2b>
 800b58e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b592:	4683      	mov	fp, r0
 800b594:	2d00      	cmp	r5, #0
 800b596:	d07c      	beq.n	800b692 <_dtoa_r+0x1fa>
 800b598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b59a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b59e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b5a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5b2:	4b7d      	ldr	r3, [pc, #500]	; (800b7a8 <_dtoa_r+0x310>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	f7f4 fe65 	bl	8000288 <__aeabi_dsub>
 800b5be:	a36e      	add	r3, pc, #440	; (adr r3, 800b778 <_dtoa_r+0x2e0>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	a36d      	add	r3, pc, #436	; (adr r3, 800b780 <_dtoa_r+0x2e8>)
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	f7f4 fe5d 	bl	800028c <__adddf3>
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	f7f4 ffa4 	bl	8000524 <__aeabi_i2d>
 800b5dc:	a36a      	add	r3, pc, #424	; (adr r3, 800b788 <_dtoa_r+0x2f0>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f7f5 f809 	bl	80005f8 <__aeabi_dmul>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	f7f4 fe4d 	bl	800028c <__adddf3>
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	f7f5 faaf 	bl	8000b58 <__aeabi_d2iz>
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	4682      	mov	sl, r0
 800b5fe:	2300      	movs	r3, #0
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f5 fa6a 	bl	8000adc <__aeabi_dcmplt>
 800b608:	b148      	cbz	r0, 800b61e <_dtoa_r+0x186>
 800b60a:	4650      	mov	r0, sl
 800b60c:	f7f4 ff8a 	bl	8000524 <__aeabi_i2d>
 800b610:	4632      	mov	r2, r6
 800b612:	463b      	mov	r3, r7
 800b614:	f7f5 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 800b618:	b908      	cbnz	r0, 800b61e <_dtoa_r+0x186>
 800b61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b61e:	f1ba 0f16 	cmp.w	sl, #22
 800b622:	d854      	bhi.n	800b6ce <_dtoa_r+0x236>
 800b624:	4b61      	ldr	r3, [pc, #388]	; (800b7ac <_dtoa_r+0x314>)
 800b626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b632:	f7f5 fa53 	bl	8000adc <__aeabi_dcmplt>
 800b636:	2800      	cmp	r0, #0
 800b638:	d04b      	beq.n	800b6d2 <_dtoa_r+0x23a>
 800b63a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b63e:	2300      	movs	r3, #0
 800b640:	930e      	str	r3, [sp, #56]	; 0x38
 800b642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b644:	1b5d      	subs	r5, r3, r5
 800b646:	1e6b      	subs	r3, r5, #1
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	bf43      	ittte	mi
 800b64c:	2300      	movmi	r3, #0
 800b64e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b652:	9304      	strmi	r3, [sp, #16]
 800b654:	f04f 0800 	movpl.w	r8, #0
 800b658:	f1ba 0f00 	cmp.w	sl, #0
 800b65c:	db3b      	blt.n	800b6d6 <_dtoa_r+0x23e>
 800b65e:	9b04      	ldr	r3, [sp, #16]
 800b660:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b664:	4453      	add	r3, sl
 800b666:	9304      	str	r3, [sp, #16]
 800b668:	2300      	movs	r3, #0
 800b66a:	9306      	str	r3, [sp, #24]
 800b66c:	9b05      	ldr	r3, [sp, #20]
 800b66e:	2b09      	cmp	r3, #9
 800b670:	d869      	bhi.n	800b746 <_dtoa_r+0x2ae>
 800b672:	2b05      	cmp	r3, #5
 800b674:	bfc4      	itt	gt
 800b676:	3b04      	subgt	r3, #4
 800b678:	9305      	strgt	r3, [sp, #20]
 800b67a:	9b05      	ldr	r3, [sp, #20]
 800b67c:	f1a3 0302 	sub.w	r3, r3, #2
 800b680:	bfcc      	ite	gt
 800b682:	2500      	movgt	r5, #0
 800b684:	2501      	movle	r5, #1
 800b686:	2b03      	cmp	r3, #3
 800b688:	d869      	bhi.n	800b75e <_dtoa_r+0x2c6>
 800b68a:	e8df f003 	tbb	[pc, r3]
 800b68e:	4e2c      	.short	0x4e2c
 800b690:	5a4c      	.short	0x5a4c
 800b692:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b696:	441d      	add	r5, r3
 800b698:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	bfc1      	itttt	gt
 800b6a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800b6ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6b0:	bfda      	itte	le
 800b6b2:	f1c3 0320 	rsble	r3, r3, #32
 800b6b6:	fa06 f003 	lslle.w	r0, r6, r3
 800b6ba:	4318      	orrgt	r0, r3
 800b6bc:	f7f4 ff22 	bl	8000504 <__aeabi_ui2d>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b6c8:	3d01      	subs	r5, #1
 800b6ca:	9310      	str	r3, [sp, #64]	; 0x40
 800b6cc:	e771      	b.n	800b5b2 <_dtoa_r+0x11a>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e7b6      	b.n	800b640 <_dtoa_r+0x1a8>
 800b6d2:	900e      	str	r0, [sp, #56]	; 0x38
 800b6d4:	e7b5      	b.n	800b642 <_dtoa_r+0x1aa>
 800b6d6:	f1ca 0300 	rsb	r3, sl, #0
 800b6da:	9306      	str	r3, [sp, #24]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	eba8 080a 	sub.w	r8, r8, sl
 800b6e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6e4:	e7c2      	b.n	800b66c <_dtoa_r+0x1d4>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9308      	str	r3, [sp, #32]
 800b6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	dc39      	bgt.n	800b764 <_dtoa_r+0x2cc>
 800b6f0:	f04f 0901 	mov.w	r9, #1
 800b6f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b6f8:	464b      	mov	r3, r9
 800b6fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b6fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b700:	2200      	movs	r2, #0
 800b702:	6042      	str	r2, [r0, #4]
 800b704:	2204      	movs	r2, #4
 800b706:	f102 0614 	add.w	r6, r2, #20
 800b70a:	429e      	cmp	r6, r3
 800b70c:	6841      	ldr	r1, [r0, #4]
 800b70e:	d92f      	bls.n	800b770 <_dtoa_r+0x2d8>
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fcbd 	bl	800c090 <_Balloc>
 800b716:	9000      	str	r0, [sp, #0]
 800b718:	2800      	cmp	r0, #0
 800b71a:	d14b      	bne.n	800b7b4 <_dtoa_r+0x31c>
 800b71c:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <_dtoa_r+0x318>)
 800b71e:	4602      	mov	r2, r0
 800b720:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b724:	e6d1      	b.n	800b4ca <_dtoa_r+0x32>
 800b726:	2301      	movs	r3, #1
 800b728:	e7de      	b.n	800b6e8 <_dtoa_r+0x250>
 800b72a:	2300      	movs	r3, #0
 800b72c:	9308      	str	r3, [sp, #32]
 800b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b730:	eb0a 0903 	add.w	r9, sl, r3
 800b734:	f109 0301 	add.w	r3, r9, #1
 800b738:	2b01      	cmp	r3, #1
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	bfb8      	it	lt
 800b73e:	2301      	movlt	r3, #1
 800b740:	e7dd      	b.n	800b6fe <_dtoa_r+0x266>
 800b742:	2301      	movs	r3, #1
 800b744:	e7f2      	b.n	800b72c <_dtoa_r+0x294>
 800b746:	2501      	movs	r5, #1
 800b748:	2300      	movs	r3, #0
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	9508      	str	r5, [sp, #32]
 800b74e:	f04f 39ff 	mov.w	r9, #4294967295
 800b752:	2200      	movs	r2, #0
 800b754:	f8cd 9004 	str.w	r9, [sp, #4]
 800b758:	2312      	movs	r3, #18
 800b75a:	9209      	str	r2, [sp, #36]	; 0x24
 800b75c:	e7cf      	b.n	800b6fe <_dtoa_r+0x266>
 800b75e:	2301      	movs	r3, #1
 800b760:	9308      	str	r3, [sp, #32]
 800b762:	e7f4      	b.n	800b74e <_dtoa_r+0x2b6>
 800b764:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b768:	f8cd 9004 	str.w	r9, [sp, #4]
 800b76c:	464b      	mov	r3, r9
 800b76e:	e7c6      	b.n	800b6fe <_dtoa_r+0x266>
 800b770:	3101      	adds	r1, #1
 800b772:	6041      	str	r1, [r0, #4]
 800b774:	0052      	lsls	r2, r2, #1
 800b776:	e7c6      	b.n	800b706 <_dtoa_r+0x26e>
 800b778:	636f4361 	.word	0x636f4361
 800b77c:	3fd287a7 	.word	0x3fd287a7
 800b780:	8b60c8b3 	.word	0x8b60c8b3
 800b784:	3fc68a28 	.word	0x3fc68a28
 800b788:	509f79fb 	.word	0x509f79fb
 800b78c:	3fd34413 	.word	0x3fd34413
 800b790:	0800d70d 	.word	0x0800d70d
 800b794:	0800d724 	.word	0x0800d724
 800b798:	7ff00000 	.word	0x7ff00000
 800b79c:	0800d709 	.word	0x0800d709
 800b7a0:	0800d700 	.word	0x0800d700
 800b7a4:	0800d6dd 	.word	0x0800d6dd
 800b7a8:	3ff80000 	.word	0x3ff80000
 800b7ac:	0800d820 	.word	0x0800d820
 800b7b0:	0800d783 	.word	0x0800d783
 800b7b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b6:	9a00      	ldr	r2, [sp, #0]
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	9b01      	ldr	r3, [sp, #4]
 800b7bc:	2b0e      	cmp	r3, #14
 800b7be:	f200 80ad 	bhi.w	800b91c <_dtoa_r+0x484>
 800b7c2:	2d00      	cmp	r5, #0
 800b7c4:	f000 80aa 	beq.w	800b91c <_dtoa_r+0x484>
 800b7c8:	f1ba 0f00 	cmp.w	sl, #0
 800b7cc:	dd36      	ble.n	800b83c <_dtoa_r+0x3a4>
 800b7ce:	4ac3      	ldr	r2, [pc, #780]	; (800badc <_dtoa_r+0x644>)
 800b7d0:	f00a 030f 	and.w	r3, sl, #15
 800b7d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b7d8:	ed93 7b00 	vldr	d7, [r3]
 800b7dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b7e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b7e4:	eeb0 8a47 	vmov.f32	s16, s14
 800b7e8:	eef0 8a67 	vmov.f32	s17, s15
 800b7ec:	d016      	beq.n	800b81c <_dtoa_r+0x384>
 800b7ee:	4bbc      	ldr	r3, [pc, #752]	; (800bae0 <_dtoa_r+0x648>)
 800b7f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7f8:	f7f5 f828 	bl	800084c <__aeabi_ddiv>
 800b7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b800:	f007 070f 	and.w	r7, r7, #15
 800b804:	2503      	movs	r5, #3
 800b806:	4eb6      	ldr	r6, [pc, #728]	; (800bae0 <_dtoa_r+0x648>)
 800b808:	b957      	cbnz	r7, 800b820 <_dtoa_r+0x388>
 800b80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80e:	ec53 2b18 	vmov	r2, r3, d8
 800b812:	f7f5 f81b 	bl	800084c <__aeabi_ddiv>
 800b816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b81a:	e029      	b.n	800b870 <_dtoa_r+0x3d8>
 800b81c:	2502      	movs	r5, #2
 800b81e:	e7f2      	b.n	800b806 <_dtoa_r+0x36e>
 800b820:	07f9      	lsls	r1, r7, #31
 800b822:	d508      	bpl.n	800b836 <_dtoa_r+0x39e>
 800b824:	ec51 0b18 	vmov	r0, r1, d8
 800b828:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	ec41 0b18 	vmov	d8, r0, r1
 800b834:	3501      	adds	r5, #1
 800b836:	107f      	asrs	r7, r7, #1
 800b838:	3608      	adds	r6, #8
 800b83a:	e7e5      	b.n	800b808 <_dtoa_r+0x370>
 800b83c:	f000 80a6 	beq.w	800b98c <_dtoa_r+0x4f4>
 800b840:	f1ca 0600 	rsb	r6, sl, #0
 800b844:	4ba5      	ldr	r3, [pc, #660]	; (800badc <_dtoa_r+0x644>)
 800b846:	4fa6      	ldr	r7, [pc, #664]	; (800bae0 <_dtoa_r+0x648>)
 800b848:	f006 020f 	and.w	r2, r6, #15
 800b84c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b860:	1136      	asrs	r6, r6, #4
 800b862:	2300      	movs	r3, #0
 800b864:	2502      	movs	r5, #2
 800b866:	2e00      	cmp	r6, #0
 800b868:	f040 8085 	bne.w	800b976 <_dtoa_r+0x4de>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1d2      	bne.n	800b816 <_dtoa_r+0x37e>
 800b870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 808c 	beq.w	800b990 <_dtoa_r+0x4f8>
 800b878:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b87c:	4b99      	ldr	r3, [pc, #612]	; (800bae4 <_dtoa_r+0x64c>)
 800b87e:	2200      	movs	r2, #0
 800b880:	4630      	mov	r0, r6
 800b882:	4639      	mov	r1, r7
 800b884:	f7f5 f92a 	bl	8000adc <__aeabi_dcmplt>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f000 8081 	beq.w	800b990 <_dtoa_r+0x4f8>
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d07d      	beq.n	800b990 <_dtoa_r+0x4f8>
 800b894:	f1b9 0f00 	cmp.w	r9, #0
 800b898:	dd3c      	ble.n	800b914 <_dtoa_r+0x47c>
 800b89a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b89e:	9307      	str	r3, [sp, #28]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4b91      	ldr	r3, [pc, #580]	; (800bae8 <_dtoa_r+0x650>)
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b8b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f7f4 fe32 	bl	8000524 <__aeabi_i2d>
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	463b      	mov	r3, r7
 800b8c4:	f7f4 fe98 	bl	80005f8 <__aeabi_dmul>
 800b8c8:	4b88      	ldr	r3, [pc, #544]	; (800baec <_dtoa_r+0x654>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f7f4 fcde 	bl	800028c <__adddf3>
 800b8d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b8d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d15c      	bne.n	800b99a <_dtoa_r+0x502>
 800b8e0:	4b83      	ldr	r3, [pc, #524]	; (800baf0 <_dtoa_r+0x658>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	f7f4 fcce 	bl	8000288 <__aeabi_dsub>
 800b8ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	460f      	mov	r7, r1
 800b8f4:	f7f5 f910 	bl	8000b18 <__aeabi_dcmpgt>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f040 8296 	bne.w	800be2a <_dtoa_r+0x992>
 800b8fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b902:	4630      	mov	r0, r6
 800b904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f5 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f040 8288 	bne.w	800be24 <_dtoa_r+0x98c>
 800b914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b91c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f2c0 8158 	blt.w	800bbd4 <_dtoa_r+0x73c>
 800b924:	f1ba 0f0e 	cmp.w	sl, #14
 800b928:	f300 8154 	bgt.w	800bbd4 <_dtoa_r+0x73c>
 800b92c:	4b6b      	ldr	r3, [pc, #428]	; (800badc <_dtoa_r+0x644>)
 800b92e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b932:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f280 80e3 	bge.w	800bb04 <_dtoa_r+0x66c>
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	f300 80df 	bgt.w	800bb04 <_dtoa_r+0x66c>
 800b946:	f040 826d 	bne.w	800be24 <_dtoa_r+0x98c>
 800b94a:	4b69      	ldr	r3, [pc, #420]	; (800baf0 <_dtoa_r+0x658>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	4640      	mov	r0, r8
 800b950:	4649      	mov	r1, r9
 800b952:	f7f4 fe51 	bl	80005f8 <__aeabi_dmul>
 800b956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b95a:	f7f5 f8d3 	bl	8000b04 <__aeabi_dcmpge>
 800b95e:	9e01      	ldr	r6, [sp, #4]
 800b960:	4637      	mov	r7, r6
 800b962:	2800      	cmp	r0, #0
 800b964:	f040 8243 	bne.w	800bdee <_dtoa_r+0x956>
 800b968:	9d00      	ldr	r5, [sp, #0]
 800b96a:	2331      	movs	r3, #49	; 0x31
 800b96c:	f805 3b01 	strb.w	r3, [r5], #1
 800b970:	f10a 0a01 	add.w	sl, sl, #1
 800b974:	e23f      	b.n	800bdf6 <_dtoa_r+0x95e>
 800b976:	07f2      	lsls	r2, r6, #31
 800b978:	d505      	bpl.n	800b986 <_dtoa_r+0x4ee>
 800b97a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	3501      	adds	r5, #1
 800b984:	2301      	movs	r3, #1
 800b986:	1076      	asrs	r6, r6, #1
 800b988:	3708      	adds	r7, #8
 800b98a:	e76c      	b.n	800b866 <_dtoa_r+0x3ce>
 800b98c:	2502      	movs	r5, #2
 800b98e:	e76f      	b.n	800b870 <_dtoa_r+0x3d8>
 800b990:	9b01      	ldr	r3, [sp, #4]
 800b992:	f8cd a01c 	str.w	sl, [sp, #28]
 800b996:	930c      	str	r3, [sp, #48]	; 0x30
 800b998:	e78d      	b.n	800b8b6 <_dtoa_r+0x41e>
 800b99a:	9900      	ldr	r1, [sp, #0]
 800b99c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9a0:	4b4e      	ldr	r3, [pc, #312]	; (800badc <_dtoa_r+0x644>)
 800b9a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9a6:	4401      	add	r1, r0
 800b9a8:	9102      	str	r1, [sp, #8]
 800b9aa:	9908      	ldr	r1, [sp, #32]
 800b9ac:	eeb0 8a47 	vmov.f32	s16, s14
 800b9b0:	eef0 8a67 	vmov.f32	s17, s15
 800b9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	d045      	beq.n	800ba4c <_dtoa_r+0x5b4>
 800b9c0:	494c      	ldr	r1, [pc, #304]	; (800baf4 <_dtoa_r+0x65c>)
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f7f4 ff42 	bl	800084c <__aeabi_ddiv>
 800b9c8:	ec53 2b18 	vmov	r2, r3, d8
 800b9cc:	f7f4 fc5c 	bl	8000288 <__aeabi_dsub>
 800b9d0:	9d00      	ldr	r5, [sp, #0]
 800b9d2:	ec41 0b18 	vmov	d8, r0, r1
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7f5 f8bd 	bl	8000b58 <__aeabi_d2iz>
 800b9de:	900c      	str	r0, [sp, #48]	; 0x30
 800b9e0:	f7f4 fda0 	bl	8000524 <__aeabi_i2d>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	4639      	mov	r1, r7
 800b9ec:	f7f4 fc4c 	bl	8000288 <__aeabi_dsub>
 800b9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f2:	3330      	adds	r3, #48	; 0x30
 800b9f4:	f805 3b01 	strb.w	r3, [r5], #1
 800b9f8:	ec53 2b18 	vmov	r2, r3, d8
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	460f      	mov	r7, r1
 800ba00:	f7f5 f86c 	bl	8000adc <__aeabi_dcmplt>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d165      	bne.n	800bad4 <_dtoa_r+0x63c>
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	4935      	ldr	r1, [pc, #212]	; (800bae4 <_dtoa_r+0x64c>)
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f7f4 fc3a 	bl	8000288 <__aeabi_dsub>
 800ba14:	ec53 2b18 	vmov	r2, r3, d8
 800ba18:	f7f5 f860 	bl	8000adc <__aeabi_dcmplt>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	f040 80b9 	bne.w	800bb94 <_dtoa_r+0x6fc>
 800ba22:	9b02      	ldr	r3, [sp, #8]
 800ba24:	429d      	cmp	r5, r3
 800ba26:	f43f af75 	beq.w	800b914 <_dtoa_r+0x47c>
 800ba2a:	4b2f      	ldr	r3, [pc, #188]	; (800bae8 <_dtoa_r+0x650>)
 800ba2c:	ec51 0b18 	vmov	r0, r1, d8
 800ba30:	2200      	movs	r2, #0
 800ba32:	f7f4 fde1 	bl	80005f8 <__aeabi_dmul>
 800ba36:	4b2c      	ldr	r3, [pc, #176]	; (800bae8 <_dtoa_r+0x650>)
 800ba38:	ec41 0b18 	vmov	d8, r0, r1
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4630      	mov	r0, r6
 800ba40:	4639      	mov	r1, r7
 800ba42:	f7f4 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ba46:	4606      	mov	r6, r0
 800ba48:	460f      	mov	r7, r1
 800ba4a:	e7c4      	b.n	800b9d6 <_dtoa_r+0x53e>
 800ba4c:	ec51 0b17 	vmov	r0, r1, d7
 800ba50:	f7f4 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ba54:	9b02      	ldr	r3, [sp, #8]
 800ba56:	9d00      	ldr	r5, [sp, #0]
 800ba58:	930c      	str	r3, [sp, #48]	; 0x30
 800ba5a:	ec41 0b18 	vmov	d8, r0, r1
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7f5 f879 	bl	8000b58 <__aeabi_d2iz>
 800ba66:	9011      	str	r0, [sp, #68]	; 0x44
 800ba68:	f7f4 fd5c 	bl	8000524 <__aeabi_i2d>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4630      	mov	r0, r6
 800ba72:	4639      	mov	r1, r7
 800ba74:	f7f4 fc08 	bl	8000288 <__aeabi_dsub>
 800ba78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba7a:	3330      	adds	r3, #48	; 0x30
 800ba7c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba80:	9b02      	ldr	r3, [sp, #8]
 800ba82:	429d      	cmp	r5, r3
 800ba84:	4606      	mov	r6, r0
 800ba86:	460f      	mov	r7, r1
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	d134      	bne.n	800baf8 <_dtoa_r+0x660>
 800ba8e:	4b19      	ldr	r3, [pc, #100]	; (800baf4 <_dtoa_r+0x65c>)
 800ba90:	ec51 0b18 	vmov	r0, r1, d8
 800ba94:	f7f4 fbfa 	bl	800028c <__adddf3>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	f7f5 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d175      	bne.n	800bb94 <_dtoa_r+0x6fc>
 800baa8:	ec53 2b18 	vmov	r2, r3, d8
 800baac:	4911      	ldr	r1, [pc, #68]	; (800baf4 <_dtoa_r+0x65c>)
 800baae:	2000      	movs	r0, #0
 800bab0:	f7f4 fbea 	bl	8000288 <__aeabi_dsub>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	4630      	mov	r0, r6
 800baba:	4639      	mov	r1, r7
 800babc:	f7f5 f80e 	bl	8000adc <__aeabi_dcmplt>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	f43f af27 	beq.w	800b914 <_dtoa_r+0x47c>
 800bac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bac8:	1e6b      	subs	r3, r5, #1
 800baca:	930c      	str	r3, [sp, #48]	; 0x30
 800bacc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bad0:	2b30      	cmp	r3, #48	; 0x30
 800bad2:	d0f8      	beq.n	800bac6 <_dtoa_r+0x62e>
 800bad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bad8:	e04a      	b.n	800bb70 <_dtoa_r+0x6d8>
 800bada:	bf00      	nop
 800badc:	0800d820 	.word	0x0800d820
 800bae0:	0800d7f8 	.word	0x0800d7f8
 800bae4:	3ff00000 	.word	0x3ff00000
 800bae8:	40240000 	.word	0x40240000
 800baec:	401c0000 	.word	0x401c0000
 800baf0:	40140000 	.word	0x40140000
 800baf4:	3fe00000 	.word	0x3fe00000
 800baf8:	4baf      	ldr	r3, [pc, #700]	; (800bdb8 <_dtoa_r+0x920>)
 800bafa:	f7f4 fd7d 	bl	80005f8 <__aeabi_dmul>
 800bafe:	4606      	mov	r6, r0
 800bb00:	460f      	mov	r7, r1
 800bb02:	e7ac      	b.n	800ba5e <_dtoa_r+0x5c6>
 800bb04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb08:	9d00      	ldr	r5, [sp, #0]
 800bb0a:	4642      	mov	r2, r8
 800bb0c:	464b      	mov	r3, r9
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 fe9b 	bl	800084c <__aeabi_ddiv>
 800bb16:	f7f5 f81f 	bl	8000b58 <__aeabi_d2iz>
 800bb1a:	9002      	str	r0, [sp, #8]
 800bb1c:	f7f4 fd02 	bl	8000524 <__aeabi_i2d>
 800bb20:	4642      	mov	r2, r8
 800bb22:	464b      	mov	r3, r9
 800bb24:	f7f4 fd68 	bl	80005f8 <__aeabi_dmul>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	4639      	mov	r1, r7
 800bb30:	f7f4 fbaa 	bl	8000288 <__aeabi_dsub>
 800bb34:	9e02      	ldr	r6, [sp, #8]
 800bb36:	9f01      	ldr	r7, [sp, #4]
 800bb38:	3630      	adds	r6, #48	; 0x30
 800bb3a:	f805 6b01 	strb.w	r6, [r5], #1
 800bb3e:	9e00      	ldr	r6, [sp, #0]
 800bb40:	1bae      	subs	r6, r5, r6
 800bb42:	42b7      	cmp	r7, r6
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	d137      	bne.n	800bbba <_dtoa_r+0x722>
 800bb4a:	f7f4 fb9f 	bl	800028c <__adddf3>
 800bb4e:	4642      	mov	r2, r8
 800bb50:	464b      	mov	r3, r9
 800bb52:	4606      	mov	r6, r0
 800bb54:	460f      	mov	r7, r1
 800bb56:	f7f4 ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 800bb5a:	b9c8      	cbnz	r0, 800bb90 <_dtoa_r+0x6f8>
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	464b      	mov	r3, r9
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb68:	b110      	cbz	r0, 800bb70 <_dtoa_r+0x6d8>
 800bb6a:	9b02      	ldr	r3, [sp, #8]
 800bb6c:	07d9      	lsls	r1, r3, #31
 800bb6e:	d40f      	bmi.n	800bb90 <_dtoa_r+0x6f8>
 800bb70:	4620      	mov	r0, r4
 800bb72:	4659      	mov	r1, fp
 800bb74:	f000 facc 	bl	800c110 <_Bfree>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	702b      	strb	r3, [r5, #0]
 800bb7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb7e:	f10a 0001 	add.w	r0, sl, #1
 800bb82:	6018      	str	r0, [r3, #0]
 800bb84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f43f acd8 	beq.w	800b53c <_dtoa_r+0xa4>
 800bb8c:	601d      	str	r5, [r3, #0]
 800bb8e:	e4d5      	b.n	800b53c <_dtoa_r+0xa4>
 800bb90:	f8cd a01c 	str.w	sl, [sp, #28]
 800bb94:	462b      	mov	r3, r5
 800bb96:	461d      	mov	r5, r3
 800bb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb9c:	2a39      	cmp	r2, #57	; 0x39
 800bb9e:	d108      	bne.n	800bbb2 <_dtoa_r+0x71a>
 800bba0:	9a00      	ldr	r2, [sp, #0]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d1f7      	bne.n	800bb96 <_dtoa_r+0x6fe>
 800bba6:	9a07      	ldr	r2, [sp, #28]
 800bba8:	9900      	ldr	r1, [sp, #0]
 800bbaa:	3201      	adds	r2, #1
 800bbac:	9207      	str	r2, [sp, #28]
 800bbae:	2230      	movs	r2, #48	; 0x30
 800bbb0:	700a      	strb	r2, [r1, #0]
 800bbb2:	781a      	ldrb	r2, [r3, #0]
 800bbb4:	3201      	adds	r2, #1
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	e78c      	b.n	800bad4 <_dtoa_r+0x63c>
 800bbba:	4b7f      	ldr	r3, [pc, #508]	; (800bdb8 <_dtoa_r+0x920>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f7f4 fd1b 	bl	80005f8 <__aeabi_dmul>
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	460f      	mov	r7, r1
 800bbca:	f7f4 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d09b      	beq.n	800bb0a <_dtoa_r+0x672>
 800bbd2:	e7cd      	b.n	800bb70 <_dtoa_r+0x6d8>
 800bbd4:	9a08      	ldr	r2, [sp, #32]
 800bbd6:	2a00      	cmp	r2, #0
 800bbd8:	f000 80c4 	beq.w	800bd64 <_dtoa_r+0x8cc>
 800bbdc:	9a05      	ldr	r2, [sp, #20]
 800bbde:	2a01      	cmp	r2, #1
 800bbe0:	f300 80a8 	bgt.w	800bd34 <_dtoa_r+0x89c>
 800bbe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	f000 80a0 	beq.w	800bd2c <_dtoa_r+0x894>
 800bbec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbf0:	9e06      	ldr	r6, [sp, #24]
 800bbf2:	4645      	mov	r5, r8
 800bbf4:	9a04      	ldr	r2, [sp, #16]
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	441a      	add	r2, r3
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	4498      	add	r8, r3
 800bbfe:	9204      	str	r2, [sp, #16]
 800bc00:	f000 fb42 	bl	800c288 <__i2b>
 800bc04:	4607      	mov	r7, r0
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	dd0b      	ble.n	800bc22 <_dtoa_r+0x78a>
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dd08      	ble.n	800bc22 <_dtoa_r+0x78a>
 800bc10:	42ab      	cmp	r3, r5
 800bc12:	9a04      	ldr	r2, [sp, #16]
 800bc14:	bfa8      	it	ge
 800bc16:	462b      	movge	r3, r5
 800bc18:	eba8 0803 	sub.w	r8, r8, r3
 800bc1c:	1aed      	subs	r5, r5, r3
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	9b06      	ldr	r3, [sp, #24]
 800bc24:	b1fb      	cbz	r3, 800bc66 <_dtoa_r+0x7ce>
 800bc26:	9b08      	ldr	r3, [sp, #32]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 809f 	beq.w	800bd6c <_dtoa_r+0x8d4>
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	dd11      	ble.n	800bc56 <_dtoa_r+0x7be>
 800bc32:	4639      	mov	r1, r7
 800bc34:	4632      	mov	r2, r6
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 fbe2 	bl	800c400 <__pow5mult>
 800bc3c:	465a      	mov	r2, fp
 800bc3e:	4601      	mov	r1, r0
 800bc40:	4607      	mov	r7, r0
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 fb36 	bl	800c2b4 <__multiply>
 800bc48:	4659      	mov	r1, fp
 800bc4a:	9007      	str	r0, [sp, #28]
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 fa5f 	bl	800c110 <_Bfree>
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	469b      	mov	fp, r3
 800bc56:	9b06      	ldr	r3, [sp, #24]
 800bc58:	1b9a      	subs	r2, r3, r6
 800bc5a:	d004      	beq.n	800bc66 <_dtoa_r+0x7ce>
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f000 fbce 	bl	800c400 <__pow5mult>
 800bc64:	4683      	mov	fp, r0
 800bc66:	2101      	movs	r1, #1
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fb0d 	bl	800c288 <__i2b>
 800bc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	4606      	mov	r6, r0
 800bc74:	dd7c      	ble.n	800bd70 <_dtoa_r+0x8d8>
 800bc76:	461a      	mov	r2, r3
 800bc78:	4601      	mov	r1, r0
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 fbc0 	bl	800c400 <__pow5mult>
 800bc80:	9b05      	ldr	r3, [sp, #20]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	4606      	mov	r6, r0
 800bc86:	dd76      	ble.n	800bd76 <_dtoa_r+0x8de>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9306      	str	r3, [sp, #24]
 800bc8c:	6933      	ldr	r3, [r6, #16]
 800bc8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc92:	6918      	ldr	r0, [r3, #16]
 800bc94:	f000 faa8 	bl	800c1e8 <__hi0bits>
 800bc98:	f1c0 0020 	rsb	r0, r0, #32
 800bc9c:	9b04      	ldr	r3, [sp, #16]
 800bc9e:	4418      	add	r0, r3
 800bca0:	f010 001f 	ands.w	r0, r0, #31
 800bca4:	f000 8086 	beq.w	800bdb4 <_dtoa_r+0x91c>
 800bca8:	f1c0 0320 	rsb	r3, r0, #32
 800bcac:	2b04      	cmp	r3, #4
 800bcae:	dd7f      	ble.n	800bdb0 <_dtoa_r+0x918>
 800bcb0:	f1c0 001c 	rsb	r0, r0, #28
 800bcb4:	9b04      	ldr	r3, [sp, #16]
 800bcb6:	4403      	add	r3, r0
 800bcb8:	4480      	add	r8, r0
 800bcba:	4405      	add	r5, r0
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	f1b8 0f00 	cmp.w	r8, #0
 800bcc2:	dd05      	ble.n	800bcd0 <_dtoa_r+0x838>
 800bcc4:	4659      	mov	r1, fp
 800bcc6:	4642      	mov	r2, r8
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fbf3 	bl	800c4b4 <__lshift>
 800bcce:	4683      	mov	fp, r0
 800bcd0:	9b04      	ldr	r3, [sp, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	dd05      	ble.n	800bce2 <_dtoa_r+0x84a>
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	461a      	mov	r2, r3
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 fbea 	bl	800c4b4 <__lshift>
 800bce0:	4606      	mov	r6, r0
 800bce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d069      	beq.n	800bdbc <_dtoa_r+0x924>
 800bce8:	4631      	mov	r1, r6
 800bcea:	4658      	mov	r0, fp
 800bcec:	f000 fc4e 	bl	800c58c <__mcmp>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	da63      	bge.n	800bdbc <_dtoa_r+0x924>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4659      	mov	r1, fp
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 fa2a 	bl	800c154 <__multadd>
 800bd00:	9b08      	ldr	r3, [sp, #32]
 800bd02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd06:	4683      	mov	fp, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 818f 	beq.w	800c02c <_dtoa_r+0xb94>
 800bd0e:	4639      	mov	r1, r7
 800bd10:	2300      	movs	r3, #0
 800bd12:	220a      	movs	r2, #10
 800bd14:	4620      	mov	r0, r4
 800bd16:	f000 fa1d 	bl	800c154 <__multadd>
 800bd1a:	f1b9 0f00 	cmp.w	r9, #0
 800bd1e:	4607      	mov	r7, r0
 800bd20:	f300 808e 	bgt.w	800be40 <_dtoa_r+0x9a8>
 800bd24:	9b05      	ldr	r3, [sp, #20]
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	dc50      	bgt.n	800bdcc <_dtoa_r+0x934>
 800bd2a:	e089      	b.n	800be40 <_dtoa_r+0x9a8>
 800bd2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd32:	e75d      	b.n	800bbf0 <_dtoa_r+0x758>
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	1e5e      	subs	r6, r3, #1
 800bd38:	9b06      	ldr	r3, [sp, #24]
 800bd3a:	42b3      	cmp	r3, r6
 800bd3c:	bfbf      	itttt	lt
 800bd3e:	9b06      	ldrlt	r3, [sp, #24]
 800bd40:	9606      	strlt	r6, [sp, #24]
 800bd42:	1af2      	sublt	r2, r6, r3
 800bd44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bd46:	bfb6      	itet	lt
 800bd48:	189b      	addlt	r3, r3, r2
 800bd4a:	1b9e      	subge	r6, r3, r6
 800bd4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	bfb8      	it	lt
 800bd52:	2600      	movlt	r6, #0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	bfb5      	itete	lt
 800bd58:	eba8 0503 	sublt.w	r5, r8, r3
 800bd5c:	9b01      	ldrge	r3, [sp, #4]
 800bd5e:	2300      	movlt	r3, #0
 800bd60:	4645      	movge	r5, r8
 800bd62:	e747      	b.n	800bbf4 <_dtoa_r+0x75c>
 800bd64:	9e06      	ldr	r6, [sp, #24]
 800bd66:	9f08      	ldr	r7, [sp, #32]
 800bd68:	4645      	mov	r5, r8
 800bd6a:	e74c      	b.n	800bc06 <_dtoa_r+0x76e>
 800bd6c:	9a06      	ldr	r2, [sp, #24]
 800bd6e:	e775      	b.n	800bc5c <_dtoa_r+0x7c4>
 800bd70:	9b05      	ldr	r3, [sp, #20]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	dc18      	bgt.n	800bda8 <_dtoa_r+0x910>
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	b9b3      	cbnz	r3, 800bda8 <_dtoa_r+0x910>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd80:	b9a3      	cbnz	r3, 800bdac <_dtoa_r+0x914>
 800bd82:	9b03      	ldr	r3, [sp, #12]
 800bd84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd88:	0d1b      	lsrs	r3, r3, #20
 800bd8a:	051b      	lsls	r3, r3, #20
 800bd8c:	b12b      	cbz	r3, 800bd9a <_dtoa_r+0x902>
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	3301      	adds	r3, #1
 800bd92:	9304      	str	r3, [sp, #16]
 800bd94:	f108 0801 	add.w	r8, r8, #1
 800bd98:	2301      	movs	r3, #1
 800bd9a:	9306      	str	r3, [sp, #24]
 800bd9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f47f af74 	bne.w	800bc8c <_dtoa_r+0x7f4>
 800bda4:	2001      	movs	r0, #1
 800bda6:	e779      	b.n	800bc9c <_dtoa_r+0x804>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	e7f6      	b.n	800bd9a <_dtoa_r+0x902>
 800bdac:	9b02      	ldr	r3, [sp, #8]
 800bdae:	e7f4      	b.n	800bd9a <_dtoa_r+0x902>
 800bdb0:	d085      	beq.n	800bcbe <_dtoa_r+0x826>
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	301c      	adds	r0, #28
 800bdb6:	e77d      	b.n	800bcb4 <_dtoa_r+0x81c>
 800bdb8:	40240000 	.word	0x40240000
 800bdbc:	9b01      	ldr	r3, [sp, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	dc38      	bgt.n	800be34 <_dtoa_r+0x99c>
 800bdc2:	9b05      	ldr	r3, [sp, #20]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	dd35      	ble.n	800be34 <_dtoa_r+0x99c>
 800bdc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bdcc:	f1b9 0f00 	cmp.w	r9, #0
 800bdd0:	d10d      	bne.n	800bdee <_dtoa_r+0x956>
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	2205      	movs	r2, #5
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 f9bb 	bl	800c154 <__multadd>
 800bdde:	4601      	mov	r1, r0
 800bde0:	4606      	mov	r6, r0
 800bde2:	4658      	mov	r0, fp
 800bde4:	f000 fbd2 	bl	800c58c <__mcmp>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	f73f adbd 	bgt.w	800b968 <_dtoa_r+0x4d0>
 800bdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf0:	9d00      	ldr	r5, [sp, #0]
 800bdf2:	ea6f 0a03 	mvn.w	sl, r3
 800bdf6:	f04f 0800 	mov.w	r8, #0
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f000 f987 	bl	800c110 <_Bfree>
 800be02:	2f00      	cmp	r7, #0
 800be04:	f43f aeb4 	beq.w	800bb70 <_dtoa_r+0x6d8>
 800be08:	f1b8 0f00 	cmp.w	r8, #0
 800be0c:	d005      	beq.n	800be1a <_dtoa_r+0x982>
 800be0e:	45b8      	cmp	r8, r7
 800be10:	d003      	beq.n	800be1a <_dtoa_r+0x982>
 800be12:	4641      	mov	r1, r8
 800be14:	4620      	mov	r0, r4
 800be16:	f000 f97b 	bl	800c110 <_Bfree>
 800be1a:	4639      	mov	r1, r7
 800be1c:	4620      	mov	r0, r4
 800be1e:	f000 f977 	bl	800c110 <_Bfree>
 800be22:	e6a5      	b.n	800bb70 <_dtoa_r+0x6d8>
 800be24:	2600      	movs	r6, #0
 800be26:	4637      	mov	r7, r6
 800be28:	e7e1      	b.n	800bdee <_dtoa_r+0x956>
 800be2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800be2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800be30:	4637      	mov	r7, r6
 800be32:	e599      	b.n	800b968 <_dtoa_r+0x4d0>
 800be34:	9b08      	ldr	r3, [sp, #32]
 800be36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 80fd 	beq.w	800c03a <_dtoa_r+0xba2>
 800be40:	2d00      	cmp	r5, #0
 800be42:	dd05      	ble.n	800be50 <_dtoa_r+0x9b8>
 800be44:	4639      	mov	r1, r7
 800be46:	462a      	mov	r2, r5
 800be48:	4620      	mov	r0, r4
 800be4a:	f000 fb33 	bl	800c4b4 <__lshift>
 800be4e:	4607      	mov	r7, r0
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d05c      	beq.n	800bf10 <_dtoa_r+0xa78>
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 f919 	bl	800c090 <_Balloc>
 800be5e:	4605      	mov	r5, r0
 800be60:	b928      	cbnz	r0, 800be6e <_dtoa_r+0x9d6>
 800be62:	4b80      	ldr	r3, [pc, #512]	; (800c064 <_dtoa_r+0xbcc>)
 800be64:	4602      	mov	r2, r0
 800be66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be6a:	f7ff bb2e 	b.w	800b4ca <_dtoa_r+0x32>
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	3202      	adds	r2, #2
 800be72:	0092      	lsls	r2, r2, #2
 800be74:	f107 010c 	add.w	r1, r7, #12
 800be78:	300c      	adds	r0, #12
 800be7a:	f7fe fd27 	bl	800a8cc <memcpy>
 800be7e:	2201      	movs	r2, #1
 800be80:	4629      	mov	r1, r5
 800be82:	4620      	mov	r0, r4
 800be84:	f000 fb16 	bl	800c4b4 <__lshift>
 800be88:	9b00      	ldr	r3, [sp, #0]
 800be8a:	3301      	adds	r3, #1
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	9b00      	ldr	r3, [sp, #0]
 800be90:	444b      	add	r3, r9
 800be92:	9307      	str	r3, [sp, #28]
 800be94:	9b02      	ldr	r3, [sp, #8]
 800be96:	f003 0301 	and.w	r3, r3, #1
 800be9a:	46b8      	mov	r8, r7
 800be9c:	9306      	str	r3, [sp, #24]
 800be9e:	4607      	mov	r7, r0
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	4631      	mov	r1, r6
 800bea4:	3b01      	subs	r3, #1
 800bea6:	4658      	mov	r0, fp
 800bea8:	9302      	str	r3, [sp, #8]
 800beaa:	f7ff fa69 	bl	800b380 <quorem>
 800beae:	4603      	mov	r3, r0
 800beb0:	3330      	adds	r3, #48	; 0x30
 800beb2:	9004      	str	r0, [sp, #16]
 800beb4:	4641      	mov	r1, r8
 800beb6:	4658      	mov	r0, fp
 800beb8:	9308      	str	r3, [sp, #32]
 800beba:	f000 fb67 	bl	800c58c <__mcmp>
 800bebe:	463a      	mov	r2, r7
 800bec0:	4681      	mov	r9, r0
 800bec2:	4631      	mov	r1, r6
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 fb7d 	bl	800c5c4 <__mdiff>
 800beca:	68c2      	ldr	r2, [r0, #12]
 800becc:	9b08      	ldr	r3, [sp, #32]
 800bece:	4605      	mov	r5, r0
 800bed0:	bb02      	cbnz	r2, 800bf14 <_dtoa_r+0xa7c>
 800bed2:	4601      	mov	r1, r0
 800bed4:	4658      	mov	r0, fp
 800bed6:	f000 fb59 	bl	800c58c <__mcmp>
 800beda:	9b08      	ldr	r3, [sp, #32]
 800bedc:	4602      	mov	r2, r0
 800bede:	4629      	mov	r1, r5
 800bee0:	4620      	mov	r0, r4
 800bee2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bee6:	f000 f913 	bl	800c110 <_Bfree>
 800beea:	9b05      	ldr	r3, [sp, #20]
 800beec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beee:	9d01      	ldr	r5, [sp, #4]
 800bef0:	ea43 0102 	orr.w	r1, r3, r2
 800bef4:	9b06      	ldr	r3, [sp, #24]
 800bef6:	430b      	orrs	r3, r1
 800bef8:	9b08      	ldr	r3, [sp, #32]
 800befa:	d10d      	bne.n	800bf18 <_dtoa_r+0xa80>
 800befc:	2b39      	cmp	r3, #57	; 0x39
 800befe:	d029      	beq.n	800bf54 <_dtoa_r+0xabc>
 800bf00:	f1b9 0f00 	cmp.w	r9, #0
 800bf04:	dd01      	ble.n	800bf0a <_dtoa_r+0xa72>
 800bf06:	9b04      	ldr	r3, [sp, #16]
 800bf08:	3331      	adds	r3, #49	; 0x31
 800bf0a:	9a02      	ldr	r2, [sp, #8]
 800bf0c:	7013      	strb	r3, [r2, #0]
 800bf0e:	e774      	b.n	800bdfa <_dtoa_r+0x962>
 800bf10:	4638      	mov	r0, r7
 800bf12:	e7b9      	b.n	800be88 <_dtoa_r+0x9f0>
 800bf14:	2201      	movs	r2, #1
 800bf16:	e7e2      	b.n	800bede <_dtoa_r+0xa46>
 800bf18:	f1b9 0f00 	cmp.w	r9, #0
 800bf1c:	db06      	blt.n	800bf2c <_dtoa_r+0xa94>
 800bf1e:	9905      	ldr	r1, [sp, #20]
 800bf20:	ea41 0909 	orr.w	r9, r1, r9
 800bf24:	9906      	ldr	r1, [sp, #24]
 800bf26:	ea59 0101 	orrs.w	r1, r9, r1
 800bf2a:	d120      	bne.n	800bf6e <_dtoa_r+0xad6>
 800bf2c:	2a00      	cmp	r2, #0
 800bf2e:	ddec      	ble.n	800bf0a <_dtoa_r+0xa72>
 800bf30:	4659      	mov	r1, fp
 800bf32:	2201      	movs	r2, #1
 800bf34:	4620      	mov	r0, r4
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	f000 fabc 	bl	800c4b4 <__lshift>
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4683      	mov	fp, r0
 800bf40:	f000 fb24 	bl	800c58c <__mcmp>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	dc02      	bgt.n	800bf50 <_dtoa_r+0xab8>
 800bf4a:	d1de      	bne.n	800bf0a <_dtoa_r+0xa72>
 800bf4c:	07da      	lsls	r2, r3, #31
 800bf4e:	d5dc      	bpl.n	800bf0a <_dtoa_r+0xa72>
 800bf50:	2b39      	cmp	r3, #57	; 0x39
 800bf52:	d1d8      	bne.n	800bf06 <_dtoa_r+0xa6e>
 800bf54:	9a02      	ldr	r2, [sp, #8]
 800bf56:	2339      	movs	r3, #57	; 0x39
 800bf58:	7013      	strb	r3, [r2, #0]
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	461d      	mov	r5, r3
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf64:	2a39      	cmp	r2, #57	; 0x39
 800bf66:	d050      	beq.n	800c00a <_dtoa_r+0xb72>
 800bf68:	3201      	adds	r2, #1
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	e745      	b.n	800bdfa <_dtoa_r+0x962>
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	dd03      	ble.n	800bf7a <_dtoa_r+0xae2>
 800bf72:	2b39      	cmp	r3, #57	; 0x39
 800bf74:	d0ee      	beq.n	800bf54 <_dtoa_r+0xabc>
 800bf76:	3301      	adds	r3, #1
 800bf78:	e7c7      	b.n	800bf0a <_dtoa_r+0xa72>
 800bf7a:	9a01      	ldr	r2, [sp, #4]
 800bf7c:	9907      	ldr	r1, [sp, #28]
 800bf7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf82:	428a      	cmp	r2, r1
 800bf84:	d02a      	beq.n	800bfdc <_dtoa_r+0xb44>
 800bf86:	4659      	mov	r1, fp
 800bf88:	2300      	movs	r3, #0
 800bf8a:	220a      	movs	r2, #10
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 f8e1 	bl	800c154 <__multadd>
 800bf92:	45b8      	cmp	r8, r7
 800bf94:	4683      	mov	fp, r0
 800bf96:	f04f 0300 	mov.w	r3, #0
 800bf9a:	f04f 020a 	mov.w	r2, #10
 800bf9e:	4641      	mov	r1, r8
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	d107      	bne.n	800bfb4 <_dtoa_r+0xb1c>
 800bfa4:	f000 f8d6 	bl	800c154 <__multadd>
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	4607      	mov	r7, r0
 800bfac:	9b01      	ldr	r3, [sp, #4]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9301      	str	r3, [sp, #4]
 800bfb2:	e775      	b.n	800bea0 <_dtoa_r+0xa08>
 800bfb4:	f000 f8ce 	bl	800c154 <__multadd>
 800bfb8:	4639      	mov	r1, r7
 800bfba:	4680      	mov	r8, r0
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	220a      	movs	r2, #10
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 f8c7 	bl	800c154 <__multadd>
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	e7f0      	b.n	800bfac <_dtoa_r+0xb14>
 800bfca:	f1b9 0f00 	cmp.w	r9, #0
 800bfce:	9a00      	ldr	r2, [sp, #0]
 800bfd0:	bfcc      	ite	gt
 800bfd2:	464d      	movgt	r5, r9
 800bfd4:	2501      	movle	r5, #1
 800bfd6:	4415      	add	r5, r2
 800bfd8:	f04f 0800 	mov.w	r8, #0
 800bfdc:	4659      	mov	r1, fp
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	f000 fa66 	bl	800c4b4 <__lshift>
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4683      	mov	fp, r0
 800bfec:	f000 face 	bl	800c58c <__mcmp>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	dcb2      	bgt.n	800bf5a <_dtoa_r+0xac2>
 800bff4:	d102      	bne.n	800bffc <_dtoa_r+0xb64>
 800bff6:	9b01      	ldr	r3, [sp, #4]
 800bff8:	07db      	lsls	r3, r3, #31
 800bffa:	d4ae      	bmi.n	800bf5a <_dtoa_r+0xac2>
 800bffc:	462b      	mov	r3, r5
 800bffe:	461d      	mov	r5, r3
 800c000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c004:	2a30      	cmp	r2, #48	; 0x30
 800c006:	d0fa      	beq.n	800bffe <_dtoa_r+0xb66>
 800c008:	e6f7      	b.n	800bdfa <_dtoa_r+0x962>
 800c00a:	9a00      	ldr	r2, [sp, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d1a5      	bne.n	800bf5c <_dtoa_r+0xac4>
 800c010:	f10a 0a01 	add.w	sl, sl, #1
 800c014:	2331      	movs	r3, #49	; 0x31
 800c016:	e779      	b.n	800bf0c <_dtoa_r+0xa74>
 800c018:	4b13      	ldr	r3, [pc, #76]	; (800c068 <_dtoa_r+0xbd0>)
 800c01a:	f7ff baaf 	b.w	800b57c <_dtoa_r+0xe4>
 800c01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c020:	2b00      	cmp	r3, #0
 800c022:	f47f aa86 	bne.w	800b532 <_dtoa_r+0x9a>
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <_dtoa_r+0xbd4>)
 800c028:	f7ff baa8 	b.w	800b57c <_dtoa_r+0xe4>
 800c02c:	f1b9 0f00 	cmp.w	r9, #0
 800c030:	dc03      	bgt.n	800c03a <_dtoa_r+0xba2>
 800c032:	9b05      	ldr	r3, [sp, #20]
 800c034:	2b02      	cmp	r3, #2
 800c036:	f73f aec9 	bgt.w	800bdcc <_dtoa_r+0x934>
 800c03a:	9d00      	ldr	r5, [sp, #0]
 800c03c:	4631      	mov	r1, r6
 800c03e:	4658      	mov	r0, fp
 800c040:	f7ff f99e 	bl	800b380 <quorem>
 800c044:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c048:	f805 3b01 	strb.w	r3, [r5], #1
 800c04c:	9a00      	ldr	r2, [sp, #0]
 800c04e:	1aaa      	subs	r2, r5, r2
 800c050:	4591      	cmp	r9, r2
 800c052:	ddba      	ble.n	800bfca <_dtoa_r+0xb32>
 800c054:	4659      	mov	r1, fp
 800c056:	2300      	movs	r3, #0
 800c058:	220a      	movs	r2, #10
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f87a 	bl	800c154 <__multadd>
 800c060:	4683      	mov	fp, r0
 800c062:	e7eb      	b.n	800c03c <_dtoa_r+0xba4>
 800c064:	0800d783 	.word	0x0800d783
 800c068:	0800d6dc 	.word	0x0800d6dc
 800c06c:	0800d700 	.word	0x0800d700

0800c070 <_localeconv_r>:
 800c070:	4800      	ldr	r0, [pc, #0]	; (800c074 <_localeconv_r+0x4>)
 800c072:	4770      	bx	lr
 800c074:	20000190 	.word	0x20000190

0800c078 <__malloc_lock>:
 800c078:	4801      	ldr	r0, [pc, #4]	; (800c080 <__malloc_lock+0x8>)
 800c07a:	f000 bd22 	b.w	800cac2 <__retarget_lock_acquire_recursive>
 800c07e:	bf00      	nop
 800c080:	20000b14 	.word	0x20000b14

0800c084 <__malloc_unlock>:
 800c084:	4801      	ldr	r0, [pc, #4]	; (800c08c <__malloc_unlock+0x8>)
 800c086:	f000 bd1d 	b.w	800cac4 <__retarget_lock_release_recursive>
 800c08a:	bf00      	nop
 800c08c:	20000b14 	.word	0x20000b14

0800c090 <_Balloc>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c094:	4604      	mov	r4, r0
 800c096:	460d      	mov	r5, r1
 800c098:	b976      	cbnz	r6, 800c0b8 <_Balloc+0x28>
 800c09a:	2010      	movs	r0, #16
 800c09c:	f7fe fc06 	bl	800a8ac <malloc>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	6260      	str	r0, [r4, #36]	; 0x24
 800c0a4:	b920      	cbnz	r0, 800c0b0 <_Balloc+0x20>
 800c0a6:	4b18      	ldr	r3, [pc, #96]	; (800c108 <_Balloc+0x78>)
 800c0a8:	4818      	ldr	r0, [pc, #96]	; (800c10c <_Balloc+0x7c>)
 800c0aa:	2166      	movs	r1, #102	; 0x66
 800c0ac:	f000 fcd8 	bl	800ca60 <__assert_func>
 800c0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b4:	6006      	str	r6, [r0, #0]
 800c0b6:	60c6      	str	r6, [r0, #12]
 800c0b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0ba:	68f3      	ldr	r3, [r6, #12]
 800c0bc:	b183      	cbz	r3, 800c0e0 <_Balloc+0x50>
 800c0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c6:	b9b8      	cbnz	r0, 800c0f8 <_Balloc+0x68>
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ce:	1d72      	adds	r2, r6, #5
 800c0d0:	0092      	lsls	r2, r2, #2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fb5a 	bl	800c78c <_calloc_r>
 800c0d8:	b160      	cbz	r0, 800c0f4 <_Balloc+0x64>
 800c0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0de:	e00e      	b.n	800c0fe <_Balloc+0x6e>
 800c0e0:	2221      	movs	r2, #33	; 0x21
 800c0e2:	2104      	movs	r1, #4
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fb51 	bl	800c78c <_calloc_r>
 800c0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ec:	60f0      	str	r0, [r6, #12]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1e4      	bne.n	800c0be <_Balloc+0x2e>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	6802      	ldr	r2, [r0, #0]
 800c0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0fe:	2300      	movs	r3, #0
 800c100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c104:	e7f7      	b.n	800c0f6 <_Balloc+0x66>
 800c106:	bf00      	nop
 800c108:	0800d70d 	.word	0x0800d70d
 800c10c:	0800d794 	.word	0x0800d794

0800c110 <_Bfree>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	b976      	cbnz	r6, 800c138 <_Bfree+0x28>
 800c11a:	2010      	movs	r0, #16
 800c11c:	f7fe fbc6 	bl	800a8ac <malloc>
 800c120:	4602      	mov	r2, r0
 800c122:	6268      	str	r0, [r5, #36]	; 0x24
 800c124:	b920      	cbnz	r0, 800c130 <_Bfree+0x20>
 800c126:	4b09      	ldr	r3, [pc, #36]	; (800c14c <_Bfree+0x3c>)
 800c128:	4809      	ldr	r0, [pc, #36]	; (800c150 <_Bfree+0x40>)
 800c12a:	218a      	movs	r1, #138	; 0x8a
 800c12c:	f000 fc98 	bl	800ca60 <__assert_func>
 800c130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c134:	6006      	str	r6, [r0, #0]
 800c136:	60c6      	str	r6, [r0, #12]
 800c138:	b13c      	cbz	r4, 800c14a <_Bfree+0x3a>
 800c13a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c13c:	6862      	ldr	r2, [r4, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c144:	6021      	str	r1, [r4, #0]
 800c146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	0800d70d 	.word	0x0800d70d
 800c150:	0800d794 	.word	0x0800d794

0800c154 <__multadd>:
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	690e      	ldr	r6, [r1, #16]
 800c15a:	4607      	mov	r7, r0
 800c15c:	4698      	mov	r8, r3
 800c15e:	460c      	mov	r4, r1
 800c160:	f101 0014 	add.w	r0, r1, #20
 800c164:	2300      	movs	r3, #0
 800c166:	6805      	ldr	r5, [r0, #0]
 800c168:	b2a9      	uxth	r1, r5
 800c16a:	fb02 8101 	mla	r1, r2, r1, r8
 800c16e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c172:	0c2d      	lsrs	r5, r5, #16
 800c174:	fb02 c505 	mla	r5, r2, r5, ip
 800c178:	b289      	uxth	r1, r1
 800c17a:	3301      	adds	r3, #1
 800c17c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c180:	429e      	cmp	r6, r3
 800c182:	f840 1b04 	str.w	r1, [r0], #4
 800c186:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c18a:	dcec      	bgt.n	800c166 <__multadd+0x12>
 800c18c:	f1b8 0f00 	cmp.w	r8, #0
 800c190:	d022      	beq.n	800c1d8 <__multadd+0x84>
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	42b3      	cmp	r3, r6
 800c196:	dc19      	bgt.n	800c1cc <__multadd+0x78>
 800c198:	6861      	ldr	r1, [r4, #4]
 800c19a:	4638      	mov	r0, r7
 800c19c:	3101      	adds	r1, #1
 800c19e:	f7ff ff77 	bl	800c090 <_Balloc>
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	b928      	cbnz	r0, 800c1b2 <__multadd+0x5e>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <__multadd+0x8c>)
 800c1aa:	480e      	ldr	r0, [pc, #56]	; (800c1e4 <__multadd+0x90>)
 800c1ac:	21b5      	movs	r1, #181	; 0xb5
 800c1ae:	f000 fc57 	bl	800ca60 <__assert_func>
 800c1b2:	6922      	ldr	r2, [r4, #16]
 800c1b4:	3202      	adds	r2, #2
 800c1b6:	f104 010c 	add.w	r1, r4, #12
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	300c      	adds	r0, #12
 800c1be:	f7fe fb85 	bl	800a8cc <memcpy>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f7ff ffa3 	bl	800c110 <_Bfree>
 800c1ca:	462c      	mov	r4, r5
 800c1cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c1d0:	3601      	adds	r6, #1
 800c1d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800c1d6:	6126      	str	r6, [r4, #16]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800d783 	.word	0x0800d783
 800c1e4:	0800d794 	.word	0x0800d794

0800c1e8 <__hi0bits>:
 800c1e8:	0c03      	lsrs	r3, r0, #16
 800c1ea:	041b      	lsls	r3, r3, #16
 800c1ec:	b9d3      	cbnz	r3, 800c224 <__hi0bits+0x3c>
 800c1ee:	0400      	lsls	r0, r0, #16
 800c1f0:	2310      	movs	r3, #16
 800c1f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1f6:	bf04      	itt	eq
 800c1f8:	0200      	lsleq	r0, r0, #8
 800c1fa:	3308      	addeq	r3, #8
 800c1fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c200:	bf04      	itt	eq
 800c202:	0100      	lsleq	r0, r0, #4
 800c204:	3304      	addeq	r3, #4
 800c206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c20a:	bf04      	itt	eq
 800c20c:	0080      	lsleq	r0, r0, #2
 800c20e:	3302      	addeq	r3, #2
 800c210:	2800      	cmp	r0, #0
 800c212:	db05      	blt.n	800c220 <__hi0bits+0x38>
 800c214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c218:	f103 0301 	add.w	r3, r3, #1
 800c21c:	bf08      	it	eq
 800c21e:	2320      	moveq	r3, #32
 800c220:	4618      	mov	r0, r3
 800c222:	4770      	bx	lr
 800c224:	2300      	movs	r3, #0
 800c226:	e7e4      	b.n	800c1f2 <__hi0bits+0xa>

0800c228 <__lo0bits>:
 800c228:	6803      	ldr	r3, [r0, #0]
 800c22a:	f013 0207 	ands.w	r2, r3, #7
 800c22e:	4601      	mov	r1, r0
 800c230:	d00b      	beq.n	800c24a <__lo0bits+0x22>
 800c232:	07da      	lsls	r2, r3, #31
 800c234:	d424      	bmi.n	800c280 <__lo0bits+0x58>
 800c236:	0798      	lsls	r0, r3, #30
 800c238:	bf49      	itett	mi
 800c23a:	085b      	lsrmi	r3, r3, #1
 800c23c:	089b      	lsrpl	r3, r3, #2
 800c23e:	2001      	movmi	r0, #1
 800c240:	600b      	strmi	r3, [r1, #0]
 800c242:	bf5c      	itt	pl
 800c244:	600b      	strpl	r3, [r1, #0]
 800c246:	2002      	movpl	r0, #2
 800c248:	4770      	bx	lr
 800c24a:	b298      	uxth	r0, r3
 800c24c:	b9b0      	cbnz	r0, 800c27c <__lo0bits+0x54>
 800c24e:	0c1b      	lsrs	r3, r3, #16
 800c250:	2010      	movs	r0, #16
 800c252:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c256:	bf04      	itt	eq
 800c258:	0a1b      	lsreq	r3, r3, #8
 800c25a:	3008      	addeq	r0, #8
 800c25c:	071a      	lsls	r2, r3, #28
 800c25e:	bf04      	itt	eq
 800c260:	091b      	lsreq	r3, r3, #4
 800c262:	3004      	addeq	r0, #4
 800c264:	079a      	lsls	r2, r3, #30
 800c266:	bf04      	itt	eq
 800c268:	089b      	lsreq	r3, r3, #2
 800c26a:	3002      	addeq	r0, #2
 800c26c:	07da      	lsls	r2, r3, #31
 800c26e:	d403      	bmi.n	800c278 <__lo0bits+0x50>
 800c270:	085b      	lsrs	r3, r3, #1
 800c272:	f100 0001 	add.w	r0, r0, #1
 800c276:	d005      	beq.n	800c284 <__lo0bits+0x5c>
 800c278:	600b      	str	r3, [r1, #0]
 800c27a:	4770      	bx	lr
 800c27c:	4610      	mov	r0, r2
 800c27e:	e7e8      	b.n	800c252 <__lo0bits+0x2a>
 800c280:	2000      	movs	r0, #0
 800c282:	4770      	bx	lr
 800c284:	2020      	movs	r0, #32
 800c286:	4770      	bx	lr

0800c288 <__i2b>:
 800c288:	b510      	push	{r4, lr}
 800c28a:	460c      	mov	r4, r1
 800c28c:	2101      	movs	r1, #1
 800c28e:	f7ff feff 	bl	800c090 <_Balloc>
 800c292:	4602      	mov	r2, r0
 800c294:	b928      	cbnz	r0, 800c2a2 <__i2b+0x1a>
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <__i2b+0x24>)
 800c298:	4805      	ldr	r0, [pc, #20]	; (800c2b0 <__i2b+0x28>)
 800c29a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c29e:	f000 fbdf 	bl	800ca60 <__assert_func>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	6144      	str	r4, [r0, #20]
 800c2a6:	6103      	str	r3, [r0, #16]
 800c2a8:	bd10      	pop	{r4, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800d783 	.word	0x0800d783
 800c2b0:	0800d794 	.word	0x0800d794

0800c2b4 <__multiply>:
 800c2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	690a      	ldr	r2, [r1, #16]
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	bfb8      	it	lt
 800c2c2:	460b      	movlt	r3, r1
 800c2c4:	460d      	mov	r5, r1
 800c2c6:	bfbc      	itt	lt
 800c2c8:	4625      	movlt	r5, r4
 800c2ca:	461c      	movlt	r4, r3
 800c2cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c2d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c2d4:	68ab      	ldr	r3, [r5, #8]
 800c2d6:	6869      	ldr	r1, [r5, #4]
 800c2d8:	eb0a 0709 	add.w	r7, sl, r9
 800c2dc:	42bb      	cmp	r3, r7
 800c2de:	b085      	sub	sp, #20
 800c2e0:	bfb8      	it	lt
 800c2e2:	3101      	addlt	r1, #1
 800c2e4:	f7ff fed4 	bl	800c090 <_Balloc>
 800c2e8:	b930      	cbnz	r0, 800c2f8 <__multiply+0x44>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	4b42      	ldr	r3, [pc, #264]	; (800c3f8 <__multiply+0x144>)
 800c2ee:	4843      	ldr	r0, [pc, #268]	; (800c3fc <__multiply+0x148>)
 800c2f0:	f240 115d 	movw	r1, #349	; 0x15d
 800c2f4:	f000 fbb4 	bl	800ca60 <__assert_func>
 800c2f8:	f100 0614 	add.w	r6, r0, #20
 800c2fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c300:	4633      	mov	r3, r6
 800c302:	2200      	movs	r2, #0
 800c304:	4543      	cmp	r3, r8
 800c306:	d31e      	bcc.n	800c346 <__multiply+0x92>
 800c308:	f105 0c14 	add.w	ip, r5, #20
 800c30c:	f104 0314 	add.w	r3, r4, #20
 800c310:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c314:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c318:	9202      	str	r2, [sp, #8]
 800c31a:	ebac 0205 	sub.w	r2, ip, r5
 800c31e:	3a15      	subs	r2, #21
 800c320:	f022 0203 	bic.w	r2, r2, #3
 800c324:	3204      	adds	r2, #4
 800c326:	f105 0115 	add.w	r1, r5, #21
 800c32a:	458c      	cmp	ip, r1
 800c32c:	bf38      	it	cc
 800c32e:	2204      	movcc	r2, #4
 800c330:	9201      	str	r2, [sp, #4]
 800c332:	9a02      	ldr	r2, [sp, #8]
 800c334:	9303      	str	r3, [sp, #12]
 800c336:	429a      	cmp	r2, r3
 800c338:	d808      	bhi.n	800c34c <__multiply+0x98>
 800c33a:	2f00      	cmp	r7, #0
 800c33c:	dc55      	bgt.n	800c3ea <__multiply+0x136>
 800c33e:	6107      	str	r7, [r0, #16]
 800c340:	b005      	add	sp, #20
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c346:	f843 2b04 	str.w	r2, [r3], #4
 800c34a:	e7db      	b.n	800c304 <__multiply+0x50>
 800c34c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c350:	f1ba 0f00 	cmp.w	sl, #0
 800c354:	d020      	beq.n	800c398 <__multiply+0xe4>
 800c356:	f105 0e14 	add.w	lr, r5, #20
 800c35a:	46b1      	mov	r9, r6
 800c35c:	2200      	movs	r2, #0
 800c35e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c362:	f8d9 b000 	ldr.w	fp, [r9]
 800c366:	b2a1      	uxth	r1, r4
 800c368:	fa1f fb8b 	uxth.w	fp, fp
 800c36c:	fb0a b101 	mla	r1, sl, r1, fp
 800c370:	4411      	add	r1, r2
 800c372:	f8d9 2000 	ldr.w	r2, [r9]
 800c376:	0c24      	lsrs	r4, r4, #16
 800c378:	0c12      	lsrs	r2, r2, #16
 800c37a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c37e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c382:	b289      	uxth	r1, r1
 800c384:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c388:	45f4      	cmp	ip, lr
 800c38a:	f849 1b04 	str.w	r1, [r9], #4
 800c38e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c392:	d8e4      	bhi.n	800c35e <__multiply+0xaa>
 800c394:	9901      	ldr	r1, [sp, #4]
 800c396:	5072      	str	r2, [r6, r1]
 800c398:	9a03      	ldr	r2, [sp, #12]
 800c39a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	f1b9 0f00 	cmp.w	r9, #0
 800c3a4:	d01f      	beq.n	800c3e6 <__multiply+0x132>
 800c3a6:	6834      	ldr	r4, [r6, #0]
 800c3a8:	f105 0114 	add.w	r1, r5, #20
 800c3ac:	46b6      	mov	lr, r6
 800c3ae:	f04f 0a00 	mov.w	sl, #0
 800c3b2:	880a      	ldrh	r2, [r1, #0]
 800c3b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c3b8:	fb09 b202 	mla	r2, r9, r2, fp
 800c3bc:	4492      	add	sl, r2
 800c3be:	b2a4      	uxth	r4, r4
 800c3c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c3c4:	f84e 4b04 	str.w	r4, [lr], #4
 800c3c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c3cc:	f8be 2000 	ldrh.w	r2, [lr]
 800c3d0:	0c24      	lsrs	r4, r4, #16
 800c3d2:	fb09 2404 	mla	r4, r9, r4, r2
 800c3d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c3da:	458c      	cmp	ip, r1
 800c3dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c3e0:	d8e7      	bhi.n	800c3b2 <__multiply+0xfe>
 800c3e2:	9a01      	ldr	r2, [sp, #4]
 800c3e4:	50b4      	str	r4, [r6, r2]
 800c3e6:	3604      	adds	r6, #4
 800c3e8:	e7a3      	b.n	800c332 <__multiply+0x7e>
 800c3ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1a5      	bne.n	800c33e <__multiply+0x8a>
 800c3f2:	3f01      	subs	r7, #1
 800c3f4:	e7a1      	b.n	800c33a <__multiply+0x86>
 800c3f6:	bf00      	nop
 800c3f8:	0800d783 	.word	0x0800d783
 800c3fc:	0800d794 	.word	0x0800d794

0800c400 <__pow5mult>:
 800c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c404:	4615      	mov	r5, r2
 800c406:	f012 0203 	ands.w	r2, r2, #3
 800c40a:	4606      	mov	r6, r0
 800c40c:	460f      	mov	r7, r1
 800c40e:	d007      	beq.n	800c420 <__pow5mult+0x20>
 800c410:	4c25      	ldr	r4, [pc, #148]	; (800c4a8 <__pow5mult+0xa8>)
 800c412:	3a01      	subs	r2, #1
 800c414:	2300      	movs	r3, #0
 800c416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c41a:	f7ff fe9b 	bl	800c154 <__multadd>
 800c41e:	4607      	mov	r7, r0
 800c420:	10ad      	asrs	r5, r5, #2
 800c422:	d03d      	beq.n	800c4a0 <__pow5mult+0xa0>
 800c424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c426:	b97c      	cbnz	r4, 800c448 <__pow5mult+0x48>
 800c428:	2010      	movs	r0, #16
 800c42a:	f7fe fa3f 	bl	800a8ac <malloc>
 800c42e:	4602      	mov	r2, r0
 800c430:	6270      	str	r0, [r6, #36]	; 0x24
 800c432:	b928      	cbnz	r0, 800c440 <__pow5mult+0x40>
 800c434:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <__pow5mult+0xac>)
 800c436:	481e      	ldr	r0, [pc, #120]	; (800c4b0 <__pow5mult+0xb0>)
 800c438:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c43c:	f000 fb10 	bl	800ca60 <__assert_func>
 800c440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c444:	6004      	str	r4, [r0, #0]
 800c446:	60c4      	str	r4, [r0, #12]
 800c448:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c44c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c450:	b94c      	cbnz	r4, 800c466 <__pow5mult+0x66>
 800c452:	f240 2171 	movw	r1, #625	; 0x271
 800c456:	4630      	mov	r0, r6
 800c458:	f7ff ff16 	bl	800c288 <__i2b>
 800c45c:	2300      	movs	r3, #0
 800c45e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c462:	4604      	mov	r4, r0
 800c464:	6003      	str	r3, [r0, #0]
 800c466:	f04f 0900 	mov.w	r9, #0
 800c46a:	07eb      	lsls	r3, r5, #31
 800c46c:	d50a      	bpl.n	800c484 <__pow5mult+0x84>
 800c46e:	4639      	mov	r1, r7
 800c470:	4622      	mov	r2, r4
 800c472:	4630      	mov	r0, r6
 800c474:	f7ff ff1e 	bl	800c2b4 <__multiply>
 800c478:	4639      	mov	r1, r7
 800c47a:	4680      	mov	r8, r0
 800c47c:	4630      	mov	r0, r6
 800c47e:	f7ff fe47 	bl	800c110 <_Bfree>
 800c482:	4647      	mov	r7, r8
 800c484:	106d      	asrs	r5, r5, #1
 800c486:	d00b      	beq.n	800c4a0 <__pow5mult+0xa0>
 800c488:	6820      	ldr	r0, [r4, #0]
 800c48a:	b938      	cbnz	r0, 800c49c <__pow5mult+0x9c>
 800c48c:	4622      	mov	r2, r4
 800c48e:	4621      	mov	r1, r4
 800c490:	4630      	mov	r0, r6
 800c492:	f7ff ff0f 	bl	800c2b4 <__multiply>
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	f8c0 9000 	str.w	r9, [r0]
 800c49c:	4604      	mov	r4, r0
 800c49e:	e7e4      	b.n	800c46a <__pow5mult+0x6a>
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800d8e8 	.word	0x0800d8e8
 800c4ac:	0800d70d 	.word	0x0800d70d
 800c4b0:	0800d794 	.word	0x0800d794

0800c4b4 <__lshift>:
 800c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	6849      	ldr	r1, [r1, #4]
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4c2:	68a3      	ldr	r3, [r4, #8]
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	4691      	mov	r9, r2
 800c4c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4cc:	f108 0601 	add.w	r6, r8, #1
 800c4d0:	42b3      	cmp	r3, r6
 800c4d2:	db0b      	blt.n	800c4ec <__lshift+0x38>
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f7ff fddb 	bl	800c090 <_Balloc>
 800c4da:	4605      	mov	r5, r0
 800c4dc:	b948      	cbnz	r0, 800c4f2 <__lshift+0x3e>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	4b28      	ldr	r3, [pc, #160]	; (800c584 <__lshift+0xd0>)
 800c4e2:	4829      	ldr	r0, [pc, #164]	; (800c588 <__lshift+0xd4>)
 800c4e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4e8:	f000 faba 	bl	800ca60 <__assert_func>
 800c4ec:	3101      	adds	r1, #1
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	e7ee      	b.n	800c4d0 <__lshift+0x1c>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f100 0114 	add.w	r1, r0, #20
 800c4f8:	f100 0210 	add.w	r2, r0, #16
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	4553      	cmp	r3, sl
 800c500:	db33      	blt.n	800c56a <__lshift+0xb6>
 800c502:	6920      	ldr	r0, [r4, #16]
 800c504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c508:	f104 0314 	add.w	r3, r4, #20
 800c50c:	f019 091f 	ands.w	r9, r9, #31
 800c510:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c514:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c518:	d02b      	beq.n	800c572 <__lshift+0xbe>
 800c51a:	f1c9 0e20 	rsb	lr, r9, #32
 800c51e:	468a      	mov	sl, r1
 800c520:	2200      	movs	r2, #0
 800c522:	6818      	ldr	r0, [r3, #0]
 800c524:	fa00 f009 	lsl.w	r0, r0, r9
 800c528:	4302      	orrs	r2, r0
 800c52a:	f84a 2b04 	str.w	r2, [sl], #4
 800c52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c532:	459c      	cmp	ip, r3
 800c534:	fa22 f20e 	lsr.w	r2, r2, lr
 800c538:	d8f3      	bhi.n	800c522 <__lshift+0x6e>
 800c53a:	ebac 0304 	sub.w	r3, ip, r4
 800c53e:	3b15      	subs	r3, #21
 800c540:	f023 0303 	bic.w	r3, r3, #3
 800c544:	3304      	adds	r3, #4
 800c546:	f104 0015 	add.w	r0, r4, #21
 800c54a:	4584      	cmp	ip, r0
 800c54c:	bf38      	it	cc
 800c54e:	2304      	movcc	r3, #4
 800c550:	50ca      	str	r2, [r1, r3]
 800c552:	b10a      	cbz	r2, 800c558 <__lshift+0xa4>
 800c554:	f108 0602 	add.w	r6, r8, #2
 800c558:	3e01      	subs	r6, #1
 800c55a:	4638      	mov	r0, r7
 800c55c:	612e      	str	r6, [r5, #16]
 800c55e:	4621      	mov	r1, r4
 800c560:	f7ff fdd6 	bl	800c110 <_Bfree>
 800c564:	4628      	mov	r0, r5
 800c566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c56e:	3301      	adds	r3, #1
 800c570:	e7c5      	b.n	800c4fe <__lshift+0x4a>
 800c572:	3904      	subs	r1, #4
 800c574:	f853 2b04 	ldr.w	r2, [r3], #4
 800c578:	f841 2f04 	str.w	r2, [r1, #4]!
 800c57c:	459c      	cmp	ip, r3
 800c57e:	d8f9      	bhi.n	800c574 <__lshift+0xc0>
 800c580:	e7ea      	b.n	800c558 <__lshift+0xa4>
 800c582:	bf00      	nop
 800c584:	0800d783 	.word	0x0800d783
 800c588:	0800d794 	.word	0x0800d794

0800c58c <__mcmp>:
 800c58c:	b530      	push	{r4, r5, lr}
 800c58e:	6902      	ldr	r2, [r0, #16]
 800c590:	690c      	ldr	r4, [r1, #16]
 800c592:	1b12      	subs	r2, r2, r4
 800c594:	d10e      	bne.n	800c5b4 <__mcmp+0x28>
 800c596:	f100 0314 	add.w	r3, r0, #20
 800c59a:	3114      	adds	r1, #20
 800c59c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c5a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c5a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c5a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c5ac:	42a5      	cmp	r5, r4
 800c5ae:	d003      	beq.n	800c5b8 <__mcmp+0x2c>
 800c5b0:	d305      	bcc.n	800c5be <__mcmp+0x32>
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	bd30      	pop	{r4, r5, pc}
 800c5b8:	4283      	cmp	r3, r0
 800c5ba:	d3f3      	bcc.n	800c5a4 <__mcmp+0x18>
 800c5bc:	e7fa      	b.n	800c5b4 <__mcmp+0x28>
 800c5be:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c2:	e7f7      	b.n	800c5b4 <__mcmp+0x28>

0800c5c4 <__mdiff>:
 800c5c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	4617      	mov	r7, r2
 800c5d2:	f7ff ffdb 	bl	800c58c <__mcmp>
 800c5d6:	1e05      	subs	r5, r0, #0
 800c5d8:	d110      	bne.n	800c5fc <__mdiff+0x38>
 800c5da:	4629      	mov	r1, r5
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f7ff fd57 	bl	800c090 <_Balloc>
 800c5e2:	b930      	cbnz	r0, 800c5f2 <__mdiff+0x2e>
 800c5e4:	4b39      	ldr	r3, [pc, #228]	; (800c6cc <__mdiff+0x108>)
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	f240 2132 	movw	r1, #562	; 0x232
 800c5ec:	4838      	ldr	r0, [pc, #224]	; (800c6d0 <__mdiff+0x10c>)
 800c5ee:	f000 fa37 	bl	800ca60 <__assert_func>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	bfa4      	itt	ge
 800c5fe:	463b      	movge	r3, r7
 800c600:	4627      	movge	r7, r4
 800c602:	4630      	mov	r0, r6
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	bfa6      	itte	ge
 800c608:	461c      	movge	r4, r3
 800c60a:	2500      	movge	r5, #0
 800c60c:	2501      	movlt	r5, #1
 800c60e:	f7ff fd3f 	bl	800c090 <_Balloc>
 800c612:	b920      	cbnz	r0, 800c61e <__mdiff+0x5a>
 800c614:	4b2d      	ldr	r3, [pc, #180]	; (800c6cc <__mdiff+0x108>)
 800c616:	4602      	mov	r2, r0
 800c618:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c61c:	e7e6      	b.n	800c5ec <__mdiff+0x28>
 800c61e:	693e      	ldr	r6, [r7, #16]
 800c620:	60c5      	str	r5, [r0, #12]
 800c622:	6925      	ldr	r5, [r4, #16]
 800c624:	f107 0114 	add.w	r1, r7, #20
 800c628:	f104 0914 	add.w	r9, r4, #20
 800c62c:	f100 0e14 	add.w	lr, r0, #20
 800c630:	f107 0210 	add.w	r2, r7, #16
 800c634:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c638:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c63c:	46f2      	mov	sl, lr
 800c63e:	2700      	movs	r7, #0
 800c640:	f859 3b04 	ldr.w	r3, [r9], #4
 800c644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c648:	fa1f f883 	uxth.w	r8, r3
 800c64c:	fa17 f78b 	uxtah	r7, r7, fp
 800c650:	0c1b      	lsrs	r3, r3, #16
 800c652:	eba7 0808 	sub.w	r8, r7, r8
 800c656:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c65a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c65e:	fa1f f888 	uxth.w	r8, r8
 800c662:	141f      	asrs	r7, r3, #16
 800c664:	454d      	cmp	r5, r9
 800c666:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c66a:	f84a 3b04 	str.w	r3, [sl], #4
 800c66e:	d8e7      	bhi.n	800c640 <__mdiff+0x7c>
 800c670:	1b2b      	subs	r3, r5, r4
 800c672:	3b15      	subs	r3, #21
 800c674:	f023 0303 	bic.w	r3, r3, #3
 800c678:	3304      	adds	r3, #4
 800c67a:	3415      	adds	r4, #21
 800c67c:	42a5      	cmp	r5, r4
 800c67e:	bf38      	it	cc
 800c680:	2304      	movcc	r3, #4
 800c682:	4419      	add	r1, r3
 800c684:	4473      	add	r3, lr
 800c686:	469e      	mov	lr, r3
 800c688:	460d      	mov	r5, r1
 800c68a:	4565      	cmp	r5, ip
 800c68c:	d30e      	bcc.n	800c6ac <__mdiff+0xe8>
 800c68e:	f10c 0203 	add.w	r2, ip, #3
 800c692:	1a52      	subs	r2, r2, r1
 800c694:	f022 0203 	bic.w	r2, r2, #3
 800c698:	3903      	subs	r1, #3
 800c69a:	458c      	cmp	ip, r1
 800c69c:	bf38      	it	cc
 800c69e:	2200      	movcc	r2, #0
 800c6a0:	441a      	add	r2, r3
 800c6a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c6a6:	b17b      	cbz	r3, 800c6c8 <__mdiff+0x104>
 800c6a8:	6106      	str	r6, [r0, #16]
 800c6aa:	e7a5      	b.n	800c5f8 <__mdiff+0x34>
 800c6ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800c6b0:	fa17 f488 	uxtah	r4, r7, r8
 800c6b4:	1422      	asrs	r2, r4, #16
 800c6b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c6ba:	b2a4      	uxth	r4, r4
 800c6bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c6c0:	f84e 4b04 	str.w	r4, [lr], #4
 800c6c4:	1417      	asrs	r7, r2, #16
 800c6c6:	e7e0      	b.n	800c68a <__mdiff+0xc6>
 800c6c8:	3e01      	subs	r6, #1
 800c6ca:	e7ea      	b.n	800c6a2 <__mdiff+0xde>
 800c6cc:	0800d783 	.word	0x0800d783
 800c6d0:	0800d794 	.word	0x0800d794

0800c6d4 <__d2b>:
 800c6d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6d8:	4689      	mov	r9, r1
 800c6da:	2101      	movs	r1, #1
 800c6dc:	ec57 6b10 	vmov	r6, r7, d0
 800c6e0:	4690      	mov	r8, r2
 800c6e2:	f7ff fcd5 	bl	800c090 <_Balloc>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	b930      	cbnz	r0, 800c6f8 <__d2b+0x24>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	4b25      	ldr	r3, [pc, #148]	; (800c784 <__d2b+0xb0>)
 800c6ee:	4826      	ldr	r0, [pc, #152]	; (800c788 <__d2b+0xb4>)
 800c6f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c6f4:	f000 f9b4 	bl	800ca60 <__assert_func>
 800c6f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c700:	bb35      	cbnz	r5, 800c750 <__d2b+0x7c>
 800c702:	2e00      	cmp	r6, #0
 800c704:	9301      	str	r3, [sp, #4]
 800c706:	d028      	beq.n	800c75a <__d2b+0x86>
 800c708:	4668      	mov	r0, sp
 800c70a:	9600      	str	r6, [sp, #0]
 800c70c:	f7ff fd8c 	bl	800c228 <__lo0bits>
 800c710:	9900      	ldr	r1, [sp, #0]
 800c712:	b300      	cbz	r0, 800c756 <__d2b+0x82>
 800c714:	9a01      	ldr	r2, [sp, #4]
 800c716:	f1c0 0320 	rsb	r3, r0, #32
 800c71a:	fa02 f303 	lsl.w	r3, r2, r3
 800c71e:	430b      	orrs	r3, r1
 800c720:	40c2      	lsrs	r2, r0
 800c722:	6163      	str	r3, [r4, #20]
 800c724:	9201      	str	r2, [sp, #4]
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	61a3      	str	r3, [r4, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	bf14      	ite	ne
 800c72e:	2202      	movne	r2, #2
 800c730:	2201      	moveq	r2, #1
 800c732:	6122      	str	r2, [r4, #16]
 800c734:	b1d5      	cbz	r5, 800c76c <__d2b+0x98>
 800c736:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c73a:	4405      	add	r5, r0
 800c73c:	f8c9 5000 	str.w	r5, [r9]
 800c740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c744:	f8c8 0000 	str.w	r0, [r8]
 800c748:	4620      	mov	r0, r4
 800c74a:	b003      	add	sp, #12
 800c74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c754:	e7d5      	b.n	800c702 <__d2b+0x2e>
 800c756:	6161      	str	r1, [r4, #20]
 800c758:	e7e5      	b.n	800c726 <__d2b+0x52>
 800c75a:	a801      	add	r0, sp, #4
 800c75c:	f7ff fd64 	bl	800c228 <__lo0bits>
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	6163      	str	r3, [r4, #20]
 800c764:	2201      	movs	r2, #1
 800c766:	6122      	str	r2, [r4, #16]
 800c768:	3020      	adds	r0, #32
 800c76a:	e7e3      	b.n	800c734 <__d2b+0x60>
 800c76c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c770:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c774:	f8c9 0000 	str.w	r0, [r9]
 800c778:	6918      	ldr	r0, [r3, #16]
 800c77a:	f7ff fd35 	bl	800c1e8 <__hi0bits>
 800c77e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c782:	e7df      	b.n	800c744 <__d2b+0x70>
 800c784:	0800d783 	.word	0x0800d783
 800c788:	0800d794 	.word	0x0800d794

0800c78c <_calloc_r>:
 800c78c:	b513      	push	{r0, r1, r4, lr}
 800c78e:	434a      	muls	r2, r1
 800c790:	4611      	mov	r1, r2
 800c792:	9201      	str	r2, [sp, #4]
 800c794:	f7fe f900 	bl	800a998 <_malloc_r>
 800c798:	4604      	mov	r4, r0
 800c79a:	b118      	cbz	r0, 800c7a4 <_calloc_r+0x18>
 800c79c:	9a01      	ldr	r2, [sp, #4]
 800c79e:	2100      	movs	r1, #0
 800c7a0:	f7fe f8a2 	bl	800a8e8 <memset>
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	b002      	add	sp, #8
 800c7a8:	bd10      	pop	{r4, pc}

0800c7aa <__ssputs_r>:
 800c7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ae:	688e      	ldr	r6, [r1, #8]
 800c7b0:	429e      	cmp	r6, r3
 800c7b2:	4682      	mov	sl, r0
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	4690      	mov	r8, r2
 800c7b8:	461f      	mov	r7, r3
 800c7ba:	d838      	bhi.n	800c82e <__ssputs_r+0x84>
 800c7bc:	898a      	ldrh	r2, [r1, #12]
 800c7be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7c2:	d032      	beq.n	800c82a <__ssputs_r+0x80>
 800c7c4:	6825      	ldr	r5, [r4, #0]
 800c7c6:	6909      	ldr	r1, [r1, #16]
 800c7c8:	eba5 0901 	sub.w	r9, r5, r1
 800c7cc:	6965      	ldr	r5, [r4, #20]
 800c7ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	444b      	add	r3, r9
 800c7da:	106d      	asrs	r5, r5, #1
 800c7dc:	429d      	cmp	r5, r3
 800c7de:	bf38      	it	cc
 800c7e0:	461d      	movcc	r5, r3
 800c7e2:	0553      	lsls	r3, r2, #21
 800c7e4:	d531      	bpl.n	800c84a <__ssputs_r+0xa0>
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	f7fe f8d6 	bl	800a998 <_malloc_r>
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	b950      	cbnz	r0, 800c806 <__ssputs_r+0x5c>
 800c7f0:	230c      	movs	r3, #12
 800c7f2:	f8ca 3000 	str.w	r3, [sl]
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7fc:	81a3      	strh	r3, [r4, #12]
 800c7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c806:	6921      	ldr	r1, [r4, #16]
 800c808:	464a      	mov	r2, r9
 800c80a:	f7fe f85f 	bl	800a8cc <memcpy>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	6126      	str	r6, [r4, #16]
 800c81c:	6165      	str	r5, [r4, #20]
 800c81e:	444e      	add	r6, r9
 800c820:	eba5 0509 	sub.w	r5, r5, r9
 800c824:	6026      	str	r6, [r4, #0]
 800c826:	60a5      	str	r5, [r4, #8]
 800c828:	463e      	mov	r6, r7
 800c82a:	42be      	cmp	r6, r7
 800c82c:	d900      	bls.n	800c830 <__ssputs_r+0x86>
 800c82e:	463e      	mov	r6, r7
 800c830:	4632      	mov	r2, r6
 800c832:	6820      	ldr	r0, [r4, #0]
 800c834:	4641      	mov	r1, r8
 800c836:	f000 f958 	bl	800caea <memmove>
 800c83a:	68a3      	ldr	r3, [r4, #8]
 800c83c:	6822      	ldr	r2, [r4, #0]
 800c83e:	1b9b      	subs	r3, r3, r6
 800c840:	4432      	add	r2, r6
 800c842:	60a3      	str	r3, [r4, #8]
 800c844:	6022      	str	r2, [r4, #0]
 800c846:	2000      	movs	r0, #0
 800c848:	e7db      	b.n	800c802 <__ssputs_r+0x58>
 800c84a:	462a      	mov	r2, r5
 800c84c:	f000 f967 	bl	800cb1e <_realloc_r>
 800c850:	4606      	mov	r6, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	d1e1      	bne.n	800c81a <__ssputs_r+0x70>
 800c856:	6921      	ldr	r1, [r4, #16]
 800c858:	4650      	mov	r0, sl
 800c85a:	f7fe f84d 	bl	800a8f8 <_free_r>
 800c85e:	e7c7      	b.n	800c7f0 <__ssputs_r+0x46>

0800c860 <_svfiprintf_r>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	4698      	mov	r8, r3
 800c866:	898b      	ldrh	r3, [r1, #12]
 800c868:	061b      	lsls	r3, r3, #24
 800c86a:	b09d      	sub	sp, #116	; 0x74
 800c86c:	4607      	mov	r7, r0
 800c86e:	460d      	mov	r5, r1
 800c870:	4614      	mov	r4, r2
 800c872:	d50e      	bpl.n	800c892 <_svfiprintf_r+0x32>
 800c874:	690b      	ldr	r3, [r1, #16]
 800c876:	b963      	cbnz	r3, 800c892 <_svfiprintf_r+0x32>
 800c878:	2140      	movs	r1, #64	; 0x40
 800c87a:	f7fe f88d 	bl	800a998 <_malloc_r>
 800c87e:	6028      	str	r0, [r5, #0]
 800c880:	6128      	str	r0, [r5, #16]
 800c882:	b920      	cbnz	r0, 800c88e <_svfiprintf_r+0x2e>
 800c884:	230c      	movs	r3, #12
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	e0d1      	b.n	800ca32 <_svfiprintf_r+0x1d2>
 800c88e:	2340      	movs	r3, #64	; 0x40
 800c890:	616b      	str	r3, [r5, #20]
 800c892:	2300      	movs	r3, #0
 800c894:	9309      	str	r3, [sp, #36]	; 0x24
 800c896:	2320      	movs	r3, #32
 800c898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a0:	2330      	movs	r3, #48	; 0x30
 800c8a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca4c <_svfiprintf_r+0x1ec>
 800c8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8aa:	f04f 0901 	mov.w	r9, #1
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	469a      	mov	sl, r3
 800c8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b6:	b10a      	cbz	r2, 800c8bc <_svfiprintf_r+0x5c>
 800c8b8:	2a25      	cmp	r2, #37	; 0x25
 800c8ba:	d1f9      	bne.n	800c8b0 <_svfiprintf_r+0x50>
 800c8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c0:	d00b      	beq.n	800c8da <_svfiprintf_r+0x7a>
 800c8c2:	465b      	mov	r3, fp
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	f7ff ff6e 	bl	800c7aa <__ssputs_r>
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	f000 80aa 	beq.w	800ca28 <_svfiprintf_r+0x1c8>
 800c8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d6:	445a      	add	r2, fp
 800c8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c8da:	f89a 3000 	ldrb.w	r3, [sl]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f000 80a2 	beq.w	800ca28 <_svfiprintf_r+0x1c8>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ee:	f10a 0a01 	add.w	sl, sl, #1
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	9307      	str	r3, [sp, #28]
 800c8f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c8fc:	4654      	mov	r4, sl
 800c8fe:	2205      	movs	r2, #5
 800c900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c904:	4851      	ldr	r0, [pc, #324]	; (800ca4c <_svfiprintf_r+0x1ec>)
 800c906:	f7f3 fc6b 	bl	80001e0 <memchr>
 800c90a:	9a04      	ldr	r2, [sp, #16]
 800c90c:	b9d8      	cbnz	r0, 800c946 <_svfiprintf_r+0xe6>
 800c90e:	06d0      	lsls	r0, r2, #27
 800c910:	bf44      	itt	mi
 800c912:	2320      	movmi	r3, #32
 800c914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c918:	0711      	lsls	r1, r2, #28
 800c91a:	bf44      	itt	mi
 800c91c:	232b      	movmi	r3, #43	; 0x2b
 800c91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c922:	f89a 3000 	ldrb.w	r3, [sl]
 800c926:	2b2a      	cmp	r3, #42	; 0x2a
 800c928:	d015      	beq.n	800c956 <_svfiprintf_r+0xf6>
 800c92a:	9a07      	ldr	r2, [sp, #28]
 800c92c:	4654      	mov	r4, sl
 800c92e:	2000      	movs	r0, #0
 800c930:	f04f 0c0a 	mov.w	ip, #10
 800c934:	4621      	mov	r1, r4
 800c936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c93a:	3b30      	subs	r3, #48	; 0x30
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	d94e      	bls.n	800c9de <_svfiprintf_r+0x17e>
 800c940:	b1b0      	cbz	r0, 800c970 <_svfiprintf_r+0x110>
 800c942:	9207      	str	r2, [sp, #28]
 800c944:	e014      	b.n	800c970 <_svfiprintf_r+0x110>
 800c946:	eba0 0308 	sub.w	r3, r0, r8
 800c94a:	fa09 f303 	lsl.w	r3, r9, r3
 800c94e:	4313      	orrs	r3, r2
 800c950:	9304      	str	r3, [sp, #16]
 800c952:	46a2      	mov	sl, r4
 800c954:	e7d2      	b.n	800c8fc <_svfiprintf_r+0x9c>
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	1d19      	adds	r1, r3, #4
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	9103      	str	r1, [sp, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	bfbb      	ittet	lt
 800c962:	425b      	neglt	r3, r3
 800c964:	f042 0202 	orrlt.w	r2, r2, #2
 800c968:	9307      	strge	r3, [sp, #28]
 800c96a:	9307      	strlt	r3, [sp, #28]
 800c96c:	bfb8      	it	lt
 800c96e:	9204      	strlt	r2, [sp, #16]
 800c970:	7823      	ldrb	r3, [r4, #0]
 800c972:	2b2e      	cmp	r3, #46	; 0x2e
 800c974:	d10c      	bne.n	800c990 <_svfiprintf_r+0x130>
 800c976:	7863      	ldrb	r3, [r4, #1]
 800c978:	2b2a      	cmp	r3, #42	; 0x2a
 800c97a:	d135      	bne.n	800c9e8 <_svfiprintf_r+0x188>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	1d1a      	adds	r2, r3, #4
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	9203      	str	r2, [sp, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	bfb8      	it	lt
 800c988:	f04f 33ff 	movlt.w	r3, #4294967295
 800c98c:	3402      	adds	r4, #2
 800c98e:	9305      	str	r3, [sp, #20]
 800c990:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca5c <_svfiprintf_r+0x1fc>
 800c994:	7821      	ldrb	r1, [r4, #0]
 800c996:	2203      	movs	r2, #3
 800c998:	4650      	mov	r0, sl
 800c99a:	f7f3 fc21 	bl	80001e0 <memchr>
 800c99e:	b140      	cbz	r0, 800c9b2 <_svfiprintf_r+0x152>
 800c9a0:	2340      	movs	r3, #64	; 0x40
 800c9a2:	eba0 000a 	sub.w	r0, r0, sl
 800c9a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c9aa:	9b04      	ldr	r3, [sp, #16]
 800c9ac:	4303      	orrs	r3, r0
 800c9ae:	3401      	adds	r4, #1
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b6:	4826      	ldr	r0, [pc, #152]	; (800ca50 <_svfiprintf_r+0x1f0>)
 800c9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9bc:	2206      	movs	r2, #6
 800c9be:	f7f3 fc0f 	bl	80001e0 <memchr>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d038      	beq.n	800ca38 <_svfiprintf_r+0x1d8>
 800c9c6:	4b23      	ldr	r3, [pc, #140]	; (800ca54 <_svfiprintf_r+0x1f4>)
 800c9c8:	bb1b      	cbnz	r3, 800ca12 <_svfiprintf_r+0x1b2>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	3307      	adds	r3, #7
 800c9ce:	f023 0307 	bic.w	r3, r3, #7
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d8:	4433      	add	r3, r6
 800c9da:	9309      	str	r3, [sp, #36]	; 0x24
 800c9dc:	e767      	b.n	800c8ae <_svfiprintf_r+0x4e>
 800c9de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	e7a5      	b.n	800c934 <_svfiprintf_r+0xd4>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f04f 0c0a 	mov.w	ip, #10
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9fa:	3a30      	subs	r2, #48	; 0x30
 800c9fc:	2a09      	cmp	r2, #9
 800c9fe:	d903      	bls.n	800ca08 <_svfiprintf_r+0x1a8>
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d0c5      	beq.n	800c990 <_svfiprintf_r+0x130>
 800ca04:	9105      	str	r1, [sp, #20]
 800ca06:	e7c3      	b.n	800c990 <_svfiprintf_r+0x130>
 800ca08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e7f0      	b.n	800c9f4 <_svfiprintf_r+0x194>
 800ca12:	ab03      	add	r3, sp, #12
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	462a      	mov	r2, r5
 800ca18:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <_svfiprintf_r+0x1f8>)
 800ca1a:	a904      	add	r1, sp, #16
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f7fe f8b5 	bl	800ab8c <_printf_float>
 800ca22:	1c42      	adds	r2, r0, #1
 800ca24:	4606      	mov	r6, r0
 800ca26:	d1d6      	bne.n	800c9d6 <_svfiprintf_r+0x176>
 800ca28:	89ab      	ldrh	r3, [r5, #12]
 800ca2a:	065b      	lsls	r3, r3, #25
 800ca2c:	f53f af2c 	bmi.w	800c888 <_svfiprintf_r+0x28>
 800ca30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca32:	b01d      	add	sp, #116	; 0x74
 800ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	462a      	mov	r2, r5
 800ca3e:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <_svfiprintf_r+0x1f8>)
 800ca40:	a904      	add	r1, sp, #16
 800ca42:	4638      	mov	r0, r7
 800ca44:	f7fe fb46 	bl	800b0d4 <_printf_i>
 800ca48:	e7eb      	b.n	800ca22 <_svfiprintf_r+0x1c2>
 800ca4a:	bf00      	nop
 800ca4c:	0800d8f4 	.word	0x0800d8f4
 800ca50:	0800d8fe 	.word	0x0800d8fe
 800ca54:	0800ab8d 	.word	0x0800ab8d
 800ca58:	0800c7ab 	.word	0x0800c7ab
 800ca5c:	0800d8fa 	.word	0x0800d8fa

0800ca60 <__assert_func>:
 800ca60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca62:	4614      	mov	r4, r2
 800ca64:	461a      	mov	r2, r3
 800ca66:	4b09      	ldr	r3, [pc, #36]	; (800ca8c <__assert_func+0x2c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	68d8      	ldr	r0, [r3, #12]
 800ca6e:	b14c      	cbz	r4, 800ca84 <__assert_func+0x24>
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <__assert_func+0x30>)
 800ca72:	9100      	str	r1, [sp, #0]
 800ca74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca78:	4906      	ldr	r1, [pc, #24]	; (800ca94 <__assert_func+0x34>)
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	f000 f80e 	bl	800ca9c <fiprintf>
 800ca80:	f000 fa9a 	bl	800cfb8 <abort>
 800ca84:	4b04      	ldr	r3, [pc, #16]	; (800ca98 <__assert_func+0x38>)
 800ca86:	461c      	mov	r4, r3
 800ca88:	e7f3      	b.n	800ca72 <__assert_func+0x12>
 800ca8a:	bf00      	nop
 800ca8c:	2000003c 	.word	0x2000003c
 800ca90:	0800d905 	.word	0x0800d905
 800ca94:	0800d912 	.word	0x0800d912
 800ca98:	0800d940 	.word	0x0800d940

0800ca9c <fiprintf>:
 800ca9c:	b40e      	push	{r1, r2, r3}
 800ca9e:	b503      	push	{r0, r1, lr}
 800caa0:	4601      	mov	r1, r0
 800caa2:	ab03      	add	r3, sp, #12
 800caa4:	4805      	ldr	r0, [pc, #20]	; (800cabc <fiprintf+0x20>)
 800caa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caaa:	6800      	ldr	r0, [r0, #0]
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	f000 f885 	bl	800cbbc <_vfiprintf_r>
 800cab2:	b002      	add	sp, #8
 800cab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cab8:	b003      	add	sp, #12
 800caba:	4770      	bx	lr
 800cabc:	2000003c 	.word	0x2000003c

0800cac0 <__retarget_lock_init_recursive>:
 800cac0:	4770      	bx	lr

0800cac2 <__retarget_lock_acquire_recursive>:
 800cac2:	4770      	bx	lr

0800cac4 <__retarget_lock_release_recursive>:
 800cac4:	4770      	bx	lr

0800cac6 <__ascii_mbtowc>:
 800cac6:	b082      	sub	sp, #8
 800cac8:	b901      	cbnz	r1, 800cacc <__ascii_mbtowc+0x6>
 800caca:	a901      	add	r1, sp, #4
 800cacc:	b142      	cbz	r2, 800cae0 <__ascii_mbtowc+0x1a>
 800cace:	b14b      	cbz	r3, 800cae4 <__ascii_mbtowc+0x1e>
 800cad0:	7813      	ldrb	r3, [r2, #0]
 800cad2:	600b      	str	r3, [r1, #0]
 800cad4:	7812      	ldrb	r2, [r2, #0]
 800cad6:	1e10      	subs	r0, r2, #0
 800cad8:	bf18      	it	ne
 800cada:	2001      	movne	r0, #1
 800cadc:	b002      	add	sp, #8
 800cade:	4770      	bx	lr
 800cae0:	4610      	mov	r0, r2
 800cae2:	e7fb      	b.n	800cadc <__ascii_mbtowc+0x16>
 800cae4:	f06f 0001 	mvn.w	r0, #1
 800cae8:	e7f8      	b.n	800cadc <__ascii_mbtowc+0x16>

0800caea <memmove>:
 800caea:	4288      	cmp	r0, r1
 800caec:	b510      	push	{r4, lr}
 800caee:	eb01 0402 	add.w	r4, r1, r2
 800caf2:	d902      	bls.n	800cafa <memmove+0x10>
 800caf4:	4284      	cmp	r4, r0
 800caf6:	4623      	mov	r3, r4
 800caf8:	d807      	bhi.n	800cb0a <memmove+0x20>
 800cafa:	1e43      	subs	r3, r0, #1
 800cafc:	42a1      	cmp	r1, r4
 800cafe:	d008      	beq.n	800cb12 <memmove+0x28>
 800cb00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb08:	e7f8      	b.n	800cafc <memmove+0x12>
 800cb0a:	4402      	add	r2, r0
 800cb0c:	4601      	mov	r1, r0
 800cb0e:	428a      	cmp	r2, r1
 800cb10:	d100      	bne.n	800cb14 <memmove+0x2a>
 800cb12:	bd10      	pop	{r4, pc}
 800cb14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb1c:	e7f7      	b.n	800cb0e <memmove+0x24>

0800cb1e <_realloc_r>:
 800cb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb20:	4607      	mov	r7, r0
 800cb22:	4614      	mov	r4, r2
 800cb24:	460e      	mov	r6, r1
 800cb26:	b921      	cbnz	r1, 800cb32 <_realloc_r+0x14>
 800cb28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	f7fd bf33 	b.w	800a998 <_malloc_r>
 800cb32:	b922      	cbnz	r2, 800cb3e <_realloc_r+0x20>
 800cb34:	f7fd fee0 	bl	800a8f8 <_free_r>
 800cb38:	4625      	mov	r5, r4
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb3e:	f000 fc5f 	bl	800d400 <_malloc_usable_size_r>
 800cb42:	42a0      	cmp	r0, r4
 800cb44:	d20f      	bcs.n	800cb66 <_realloc_r+0x48>
 800cb46:	4621      	mov	r1, r4
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f7fd ff25 	bl	800a998 <_malloc_r>
 800cb4e:	4605      	mov	r5, r0
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d0f2      	beq.n	800cb3a <_realloc_r+0x1c>
 800cb54:	4631      	mov	r1, r6
 800cb56:	4622      	mov	r2, r4
 800cb58:	f7fd feb8 	bl	800a8cc <memcpy>
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f7fd feca 	bl	800a8f8 <_free_r>
 800cb64:	e7e9      	b.n	800cb3a <_realloc_r+0x1c>
 800cb66:	4635      	mov	r5, r6
 800cb68:	e7e7      	b.n	800cb3a <_realloc_r+0x1c>

0800cb6a <__sfputc_r>:
 800cb6a:	6893      	ldr	r3, [r2, #8]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	b410      	push	{r4}
 800cb72:	6093      	str	r3, [r2, #8]
 800cb74:	da08      	bge.n	800cb88 <__sfputc_r+0x1e>
 800cb76:	6994      	ldr	r4, [r2, #24]
 800cb78:	42a3      	cmp	r3, r4
 800cb7a:	db01      	blt.n	800cb80 <__sfputc_r+0x16>
 800cb7c:	290a      	cmp	r1, #10
 800cb7e:	d103      	bne.n	800cb88 <__sfputc_r+0x1e>
 800cb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb84:	f000 b94a 	b.w	800ce1c <__swbuf_r>
 800cb88:	6813      	ldr	r3, [r2, #0]
 800cb8a:	1c58      	adds	r0, r3, #1
 800cb8c:	6010      	str	r0, [r2, #0]
 800cb8e:	7019      	strb	r1, [r3, #0]
 800cb90:	4608      	mov	r0, r1
 800cb92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <__sfputs_r>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	4614      	mov	r4, r2
 800cba0:	18d5      	adds	r5, r2, r3
 800cba2:	42ac      	cmp	r4, r5
 800cba4:	d101      	bne.n	800cbaa <__sfputs_r+0x12>
 800cba6:	2000      	movs	r0, #0
 800cba8:	e007      	b.n	800cbba <__sfputs_r+0x22>
 800cbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbae:	463a      	mov	r2, r7
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f7ff ffda 	bl	800cb6a <__sfputc_r>
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	d1f3      	bne.n	800cba2 <__sfputs_r+0xa>
 800cbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbbc <_vfiprintf_r>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	b09d      	sub	sp, #116	; 0x74
 800cbc4:	4614      	mov	r4, r2
 800cbc6:	4698      	mov	r8, r3
 800cbc8:	4606      	mov	r6, r0
 800cbca:	b118      	cbz	r0, 800cbd4 <_vfiprintf_r+0x18>
 800cbcc:	6983      	ldr	r3, [r0, #24]
 800cbce:	b90b      	cbnz	r3, 800cbd4 <_vfiprintf_r+0x18>
 800cbd0:	f000 fb14 	bl	800d1fc <__sinit>
 800cbd4:	4b89      	ldr	r3, [pc, #548]	; (800cdfc <_vfiprintf_r+0x240>)
 800cbd6:	429d      	cmp	r5, r3
 800cbd8:	d11b      	bne.n	800cc12 <_vfiprintf_r+0x56>
 800cbda:	6875      	ldr	r5, [r6, #4]
 800cbdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbde:	07d9      	lsls	r1, r3, #31
 800cbe0:	d405      	bmi.n	800cbee <_vfiprintf_r+0x32>
 800cbe2:	89ab      	ldrh	r3, [r5, #12]
 800cbe4:	059a      	lsls	r2, r3, #22
 800cbe6:	d402      	bmi.n	800cbee <_vfiprintf_r+0x32>
 800cbe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbea:	f7ff ff6a 	bl	800cac2 <__retarget_lock_acquire_recursive>
 800cbee:	89ab      	ldrh	r3, [r5, #12]
 800cbf0:	071b      	lsls	r3, r3, #28
 800cbf2:	d501      	bpl.n	800cbf8 <_vfiprintf_r+0x3c>
 800cbf4:	692b      	ldr	r3, [r5, #16]
 800cbf6:	b9eb      	cbnz	r3, 800cc34 <_vfiprintf_r+0x78>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f000 f96e 	bl	800cedc <__swsetup_r>
 800cc00:	b1c0      	cbz	r0, 800cc34 <_vfiprintf_r+0x78>
 800cc02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc04:	07dc      	lsls	r4, r3, #31
 800cc06:	d50e      	bpl.n	800cc26 <_vfiprintf_r+0x6a>
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0c:	b01d      	add	sp, #116	; 0x74
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	4b7b      	ldr	r3, [pc, #492]	; (800ce00 <_vfiprintf_r+0x244>)
 800cc14:	429d      	cmp	r5, r3
 800cc16:	d101      	bne.n	800cc1c <_vfiprintf_r+0x60>
 800cc18:	68b5      	ldr	r5, [r6, #8]
 800cc1a:	e7df      	b.n	800cbdc <_vfiprintf_r+0x20>
 800cc1c:	4b79      	ldr	r3, [pc, #484]	; (800ce04 <_vfiprintf_r+0x248>)
 800cc1e:	429d      	cmp	r5, r3
 800cc20:	bf08      	it	eq
 800cc22:	68f5      	ldreq	r5, [r6, #12]
 800cc24:	e7da      	b.n	800cbdc <_vfiprintf_r+0x20>
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	0598      	lsls	r0, r3, #22
 800cc2a:	d4ed      	bmi.n	800cc08 <_vfiprintf_r+0x4c>
 800cc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc2e:	f7ff ff49 	bl	800cac4 <__retarget_lock_release_recursive>
 800cc32:	e7e9      	b.n	800cc08 <_vfiprintf_r+0x4c>
 800cc34:	2300      	movs	r3, #0
 800cc36:	9309      	str	r3, [sp, #36]	; 0x24
 800cc38:	2320      	movs	r3, #32
 800cc3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc42:	2330      	movs	r3, #48	; 0x30
 800cc44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce08 <_vfiprintf_r+0x24c>
 800cc48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc4c:	f04f 0901 	mov.w	r9, #1
 800cc50:	4623      	mov	r3, r4
 800cc52:	469a      	mov	sl, r3
 800cc54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc58:	b10a      	cbz	r2, 800cc5e <_vfiprintf_r+0xa2>
 800cc5a:	2a25      	cmp	r2, #37	; 0x25
 800cc5c:	d1f9      	bne.n	800cc52 <_vfiprintf_r+0x96>
 800cc5e:	ebba 0b04 	subs.w	fp, sl, r4
 800cc62:	d00b      	beq.n	800cc7c <_vfiprintf_r+0xc0>
 800cc64:	465b      	mov	r3, fp
 800cc66:	4622      	mov	r2, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ff94 	bl	800cb98 <__sfputs_r>
 800cc70:	3001      	adds	r0, #1
 800cc72:	f000 80aa 	beq.w	800cdca <_vfiprintf_r+0x20e>
 800cc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc78:	445a      	add	r2, fp
 800cc7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 80a2 	beq.w	800cdca <_vfiprintf_r+0x20e>
 800cc86:	2300      	movs	r3, #0
 800cc88:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc90:	f10a 0a01 	add.w	sl, sl, #1
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	9307      	str	r3, [sp, #28]
 800cc98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc9c:	931a      	str	r3, [sp, #104]	; 0x68
 800cc9e:	4654      	mov	r4, sl
 800cca0:	2205      	movs	r2, #5
 800cca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca6:	4858      	ldr	r0, [pc, #352]	; (800ce08 <_vfiprintf_r+0x24c>)
 800cca8:	f7f3 fa9a 	bl	80001e0 <memchr>
 800ccac:	9a04      	ldr	r2, [sp, #16]
 800ccae:	b9d8      	cbnz	r0, 800cce8 <_vfiprintf_r+0x12c>
 800ccb0:	06d1      	lsls	r1, r2, #27
 800ccb2:	bf44      	itt	mi
 800ccb4:	2320      	movmi	r3, #32
 800ccb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccba:	0713      	lsls	r3, r2, #28
 800ccbc:	bf44      	itt	mi
 800ccbe:	232b      	movmi	r3, #43	; 0x2b
 800ccc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccca:	d015      	beq.n	800ccf8 <_vfiprintf_r+0x13c>
 800cccc:	9a07      	ldr	r2, [sp, #28]
 800ccce:	4654      	mov	r4, sl
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	f04f 0c0a 	mov.w	ip, #10
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccdc:	3b30      	subs	r3, #48	; 0x30
 800ccde:	2b09      	cmp	r3, #9
 800cce0:	d94e      	bls.n	800cd80 <_vfiprintf_r+0x1c4>
 800cce2:	b1b0      	cbz	r0, 800cd12 <_vfiprintf_r+0x156>
 800cce4:	9207      	str	r2, [sp, #28]
 800cce6:	e014      	b.n	800cd12 <_vfiprintf_r+0x156>
 800cce8:	eba0 0308 	sub.w	r3, r0, r8
 800ccec:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	46a2      	mov	sl, r4
 800ccf6:	e7d2      	b.n	800cc9e <_vfiprintf_r+0xe2>
 800ccf8:	9b03      	ldr	r3, [sp, #12]
 800ccfa:	1d19      	adds	r1, r3, #4
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	9103      	str	r1, [sp, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	bfbb      	ittet	lt
 800cd04:	425b      	neglt	r3, r3
 800cd06:	f042 0202 	orrlt.w	r2, r2, #2
 800cd0a:	9307      	strge	r3, [sp, #28]
 800cd0c:	9307      	strlt	r3, [sp, #28]
 800cd0e:	bfb8      	it	lt
 800cd10:	9204      	strlt	r2, [sp, #16]
 800cd12:	7823      	ldrb	r3, [r4, #0]
 800cd14:	2b2e      	cmp	r3, #46	; 0x2e
 800cd16:	d10c      	bne.n	800cd32 <_vfiprintf_r+0x176>
 800cd18:	7863      	ldrb	r3, [r4, #1]
 800cd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd1c:	d135      	bne.n	800cd8a <_vfiprintf_r+0x1ce>
 800cd1e:	9b03      	ldr	r3, [sp, #12]
 800cd20:	1d1a      	adds	r2, r3, #4
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	9203      	str	r2, [sp, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	bfb8      	it	lt
 800cd2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd2e:	3402      	adds	r4, #2
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce18 <_vfiprintf_r+0x25c>
 800cd36:	7821      	ldrb	r1, [r4, #0]
 800cd38:	2203      	movs	r2, #3
 800cd3a:	4650      	mov	r0, sl
 800cd3c:	f7f3 fa50 	bl	80001e0 <memchr>
 800cd40:	b140      	cbz	r0, 800cd54 <_vfiprintf_r+0x198>
 800cd42:	2340      	movs	r3, #64	; 0x40
 800cd44:	eba0 000a 	sub.w	r0, r0, sl
 800cd48:	fa03 f000 	lsl.w	r0, r3, r0
 800cd4c:	9b04      	ldr	r3, [sp, #16]
 800cd4e:	4303      	orrs	r3, r0
 800cd50:	3401      	adds	r4, #1
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd58:	482c      	ldr	r0, [pc, #176]	; (800ce0c <_vfiprintf_r+0x250>)
 800cd5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd5e:	2206      	movs	r2, #6
 800cd60:	f7f3 fa3e 	bl	80001e0 <memchr>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d03f      	beq.n	800cde8 <_vfiprintf_r+0x22c>
 800cd68:	4b29      	ldr	r3, [pc, #164]	; (800ce10 <_vfiprintf_r+0x254>)
 800cd6a:	bb1b      	cbnz	r3, 800cdb4 <_vfiprintf_r+0x1f8>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	3307      	adds	r3, #7
 800cd70:	f023 0307 	bic.w	r3, r3, #7
 800cd74:	3308      	adds	r3, #8
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7a:	443b      	add	r3, r7
 800cd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd7e:	e767      	b.n	800cc50 <_vfiprintf_r+0x94>
 800cd80:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd84:	460c      	mov	r4, r1
 800cd86:	2001      	movs	r0, #1
 800cd88:	e7a5      	b.n	800ccd6 <_vfiprintf_r+0x11a>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	3401      	adds	r4, #1
 800cd8e:	9305      	str	r3, [sp, #20]
 800cd90:	4619      	mov	r1, r3
 800cd92:	f04f 0c0a 	mov.w	ip, #10
 800cd96:	4620      	mov	r0, r4
 800cd98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd9c:	3a30      	subs	r2, #48	; 0x30
 800cd9e:	2a09      	cmp	r2, #9
 800cda0:	d903      	bls.n	800cdaa <_vfiprintf_r+0x1ee>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d0c5      	beq.n	800cd32 <_vfiprintf_r+0x176>
 800cda6:	9105      	str	r1, [sp, #20]
 800cda8:	e7c3      	b.n	800cd32 <_vfiprintf_r+0x176>
 800cdaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdae:	4604      	mov	r4, r0
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e7f0      	b.n	800cd96 <_vfiprintf_r+0x1da>
 800cdb4:	ab03      	add	r3, sp, #12
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	462a      	mov	r2, r5
 800cdba:	4b16      	ldr	r3, [pc, #88]	; (800ce14 <_vfiprintf_r+0x258>)
 800cdbc:	a904      	add	r1, sp, #16
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f7fd fee4 	bl	800ab8c <_printf_float>
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	1c78      	adds	r0, r7, #1
 800cdc8:	d1d6      	bne.n	800cd78 <_vfiprintf_r+0x1bc>
 800cdca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdcc:	07d9      	lsls	r1, r3, #31
 800cdce:	d405      	bmi.n	800cddc <_vfiprintf_r+0x220>
 800cdd0:	89ab      	ldrh	r3, [r5, #12]
 800cdd2:	059a      	lsls	r2, r3, #22
 800cdd4:	d402      	bmi.n	800cddc <_vfiprintf_r+0x220>
 800cdd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdd8:	f7ff fe74 	bl	800cac4 <__retarget_lock_release_recursive>
 800cddc:	89ab      	ldrh	r3, [r5, #12]
 800cdde:	065b      	lsls	r3, r3, #25
 800cde0:	f53f af12 	bmi.w	800cc08 <_vfiprintf_r+0x4c>
 800cde4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cde6:	e711      	b.n	800cc0c <_vfiprintf_r+0x50>
 800cde8:	ab03      	add	r3, sp, #12
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	462a      	mov	r2, r5
 800cdee:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <_vfiprintf_r+0x258>)
 800cdf0:	a904      	add	r1, sp, #16
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7fe f96e 	bl	800b0d4 <_printf_i>
 800cdf8:	e7e4      	b.n	800cdc4 <_vfiprintf_r+0x208>
 800cdfa:	bf00      	nop
 800cdfc:	0800da6c 	.word	0x0800da6c
 800ce00:	0800da8c 	.word	0x0800da8c
 800ce04:	0800da4c 	.word	0x0800da4c
 800ce08:	0800d8f4 	.word	0x0800d8f4
 800ce0c:	0800d8fe 	.word	0x0800d8fe
 800ce10:	0800ab8d 	.word	0x0800ab8d
 800ce14:	0800cb99 	.word	0x0800cb99
 800ce18:	0800d8fa 	.word	0x0800d8fa

0800ce1c <__swbuf_r>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	460e      	mov	r6, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	4605      	mov	r5, r0
 800ce24:	b118      	cbz	r0, 800ce2e <__swbuf_r+0x12>
 800ce26:	6983      	ldr	r3, [r0, #24]
 800ce28:	b90b      	cbnz	r3, 800ce2e <__swbuf_r+0x12>
 800ce2a:	f000 f9e7 	bl	800d1fc <__sinit>
 800ce2e:	4b21      	ldr	r3, [pc, #132]	; (800ceb4 <__swbuf_r+0x98>)
 800ce30:	429c      	cmp	r4, r3
 800ce32:	d12b      	bne.n	800ce8c <__swbuf_r+0x70>
 800ce34:	686c      	ldr	r4, [r5, #4]
 800ce36:	69a3      	ldr	r3, [r4, #24]
 800ce38:	60a3      	str	r3, [r4, #8]
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	071a      	lsls	r2, r3, #28
 800ce3e:	d52f      	bpl.n	800cea0 <__swbuf_r+0x84>
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	b36b      	cbz	r3, 800cea0 <__swbuf_r+0x84>
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	6820      	ldr	r0, [r4, #0]
 800ce48:	1ac0      	subs	r0, r0, r3
 800ce4a:	6963      	ldr	r3, [r4, #20]
 800ce4c:	b2f6      	uxtb	r6, r6
 800ce4e:	4283      	cmp	r3, r0
 800ce50:	4637      	mov	r7, r6
 800ce52:	dc04      	bgt.n	800ce5e <__swbuf_r+0x42>
 800ce54:	4621      	mov	r1, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	f000 f93c 	bl	800d0d4 <_fflush_r>
 800ce5c:	bb30      	cbnz	r0, 800ceac <__swbuf_r+0x90>
 800ce5e:	68a3      	ldr	r3, [r4, #8]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	60a3      	str	r3, [r4, #8]
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	6022      	str	r2, [r4, #0]
 800ce6a:	701e      	strb	r6, [r3, #0]
 800ce6c:	6963      	ldr	r3, [r4, #20]
 800ce6e:	3001      	adds	r0, #1
 800ce70:	4283      	cmp	r3, r0
 800ce72:	d004      	beq.n	800ce7e <__swbuf_r+0x62>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	07db      	lsls	r3, r3, #31
 800ce78:	d506      	bpl.n	800ce88 <__swbuf_r+0x6c>
 800ce7a:	2e0a      	cmp	r6, #10
 800ce7c:	d104      	bne.n	800ce88 <__swbuf_r+0x6c>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4628      	mov	r0, r5
 800ce82:	f000 f927 	bl	800d0d4 <_fflush_r>
 800ce86:	b988      	cbnz	r0, 800ceac <__swbuf_r+0x90>
 800ce88:	4638      	mov	r0, r7
 800ce8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <__swbuf_r+0x9c>)
 800ce8e:	429c      	cmp	r4, r3
 800ce90:	d101      	bne.n	800ce96 <__swbuf_r+0x7a>
 800ce92:	68ac      	ldr	r4, [r5, #8]
 800ce94:	e7cf      	b.n	800ce36 <__swbuf_r+0x1a>
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <__swbuf_r+0xa0>)
 800ce98:	429c      	cmp	r4, r3
 800ce9a:	bf08      	it	eq
 800ce9c:	68ec      	ldreq	r4, [r5, #12]
 800ce9e:	e7ca      	b.n	800ce36 <__swbuf_r+0x1a>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 f81a 	bl	800cedc <__swsetup_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d0cb      	beq.n	800ce44 <__swbuf_r+0x28>
 800ceac:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb0:	e7ea      	b.n	800ce88 <__swbuf_r+0x6c>
 800ceb2:	bf00      	nop
 800ceb4:	0800da6c 	.word	0x0800da6c
 800ceb8:	0800da8c 	.word	0x0800da8c
 800cebc:	0800da4c 	.word	0x0800da4c

0800cec0 <__ascii_wctomb>:
 800cec0:	b149      	cbz	r1, 800ced6 <__ascii_wctomb+0x16>
 800cec2:	2aff      	cmp	r2, #255	; 0xff
 800cec4:	bf85      	ittet	hi
 800cec6:	238a      	movhi	r3, #138	; 0x8a
 800cec8:	6003      	strhi	r3, [r0, #0]
 800ceca:	700a      	strbls	r2, [r1, #0]
 800cecc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ced0:	bf98      	it	ls
 800ced2:	2001      	movls	r0, #1
 800ced4:	4770      	bx	lr
 800ced6:	4608      	mov	r0, r1
 800ced8:	4770      	bx	lr
	...

0800cedc <__swsetup_r>:
 800cedc:	4b32      	ldr	r3, [pc, #200]	; (800cfa8 <__swsetup_r+0xcc>)
 800cede:	b570      	push	{r4, r5, r6, lr}
 800cee0:	681d      	ldr	r5, [r3, #0]
 800cee2:	4606      	mov	r6, r0
 800cee4:	460c      	mov	r4, r1
 800cee6:	b125      	cbz	r5, 800cef2 <__swsetup_r+0x16>
 800cee8:	69ab      	ldr	r3, [r5, #24]
 800ceea:	b913      	cbnz	r3, 800cef2 <__swsetup_r+0x16>
 800ceec:	4628      	mov	r0, r5
 800ceee:	f000 f985 	bl	800d1fc <__sinit>
 800cef2:	4b2e      	ldr	r3, [pc, #184]	; (800cfac <__swsetup_r+0xd0>)
 800cef4:	429c      	cmp	r4, r3
 800cef6:	d10f      	bne.n	800cf18 <__swsetup_r+0x3c>
 800cef8:	686c      	ldr	r4, [r5, #4]
 800cefa:	89a3      	ldrh	r3, [r4, #12]
 800cefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf00:	0719      	lsls	r1, r3, #28
 800cf02:	d42c      	bmi.n	800cf5e <__swsetup_r+0x82>
 800cf04:	06dd      	lsls	r5, r3, #27
 800cf06:	d411      	bmi.n	800cf2c <__swsetup_r+0x50>
 800cf08:	2309      	movs	r3, #9
 800cf0a:	6033      	str	r3, [r6, #0]
 800cf0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf10:	81a3      	strh	r3, [r4, #12]
 800cf12:	f04f 30ff 	mov.w	r0, #4294967295
 800cf16:	e03e      	b.n	800cf96 <__swsetup_r+0xba>
 800cf18:	4b25      	ldr	r3, [pc, #148]	; (800cfb0 <__swsetup_r+0xd4>)
 800cf1a:	429c      	cmp	r4, r3
 800cf1c:	d101      	bne.n	800cf22 <__swsetup_r+0x46>
 800cf1e:	68ac      	ldr	r4, [r5, #8]
 800cf20:	e7eb      	b.n	800cefa <__swsetup_r+0x1e>
 800cf22:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <__swsetup_r+0xd8>)
 800cf24:	429c      	cmp	r4, r3
 800cf26:	bf08      	it	eq
 800cf28:	68ec      	ldreq	r4, [r5, #12]
 800cf2a:	e7e6      	b.n	800cefa <__swsetup_r+0x1e>
 800cf2c:	0758      	lsls	r0, r3, #29
 800cf2e:	d512      	bpl.n	800cf56 <__swsetup_r+0x7a>
 800cf30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf32:	b141      	cbz	r1, 800cf46 <__swsetup_r+0x6a>
 800cf34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	d002      	beq.n	800cf42 <__swsetup_r+0x66>
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f7fd fcdb 	bl	800a8f8 <_free_r>
 800cf42:	2300      	movs	r3, #0
 800cf44:	6363      	str	r3, [r4, #52]	; 0x34
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	6063      	str	r3, [r4, #4]
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	f043 0308 	orr.w	r3, r3, #8
 800cf5c:	81a3      	strh	r3, [r4, #12]
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	b94b      	cbnz	r3, 800cf76 <__swsetup_r+0x9a>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf6c:	d003      	beq.n	800cf76 <__swsetup_r+0x9a>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	4630      	mov	r0, r6
 800cf72:	f000 fa05 	bl	800d380 <__smakebuf_r>
 800cf76:	89a0      	ldrh	r0, [r4, #12]
 800cf78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf7c:	f010 0301 	ands.w	r3, r0, #1
 800cf80:	d00a      	beq.n	800cf98 <__swsetup_r+0xbc>
 800cf82:	2300      	movs	r3, #0
 800cf84:	60a3      	str	r3, [r4, #8]
 800cf86:	6963      	ldr	r3, [r4, #20]
 800cf88:	425b      	negs	r3, r3
 800cf8a:	61a3      	str	r3, [r4, #24]
 800cf8c:	6923      	ldr	r3, [r4, #16]
 800cf8e:	b943      	cbnz	r3, 800cfa2 <__swsetup_r+0xc6>
 800cf90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf94:	d1ba      	bne.n	800cf0c <__swsetup_r+0x30>
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
 800cf98:	0781      	lsls	r1, r0, #30
 800cf9a:	bf58      	it	pl
 800cf9c:	6963      	ldrpl	r3, [r4, #20]
 800cf9e:	60a3      	str	r3, [r4, #8]
 800cfa0:	e7f4      	b.n	800cf8c <__swsetup_r+0xb0>
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	e7f7      	b.n	800cf96 <__swsetup_r+0xba>
 800cfa6:	bf00      	nop
 800cfa8:	2000003c 	.word	0x2000003c
 800cfac:	0800da6c 	.word	0x0800da6c
 800cfb0:	0800da8c 	.word	0x0800da8c
 800cfb4:	0800da4c 	.word	0x0800da4c

0800cfb8 <abort>:
 800cfb8:	b508      	push	{r3, lr}
 800cfba:	2006      	movs	r0, #6
 800cfbc:	f000 fa50 	bl	800d460 <raise>
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f7f4 ff11 	bl	8001de8 <_exit>
	...

0800cfc8 <__sflush_r>:
 800cfc8:	898a      	ldrh	r2, [r1, #12]
 800cfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfce:	4605      	mov	r5, r0
 800cfd0:	0710      	lsls	r0, r2, #28
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	d458      	bmi.n	800d088 <__sflush_r+0xc0>
 800cfd6:	684b      	ldr	r3, [r1, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	dc05      	bgt.n	800cfe8 <__sflush_r+0x20>
 800cfdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dc02      	bgt.n	800cfe8 <__sflush_r+0x20>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d0f9      	beq.n	800cfe2 <__sflush_r+0x1a>
 800cfee:	2300      	movs	r3, #0
 800cff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cff4:	682f      	ldr	r7, [r5, #0]
 800cff6:	602b      	str	r3, [r5, #0]
 800cff8:	d032      	beq.n	800d060 <__sflush_r+0x98>
 800cffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	075a      	lsls	r2, r3, #29
 800d000:	d505      	bpl.n	800d00e <__sflush_r+0x46>
 800d002:	6863      	ldr	r3, [r4, #4]
 800d004:	1ac0      	subs	r0, r0, r3
 800d006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d008:	b10b      	cbz	r3, 800d00e <__sflush_r+0x46>
 800d00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d00c:	1ac0      	subs	r0, r0, r3
 800d00e:	2300      	movs	r3, #0
 800d010:	4602      	mov	r2, r0
 800d012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d014:	6a21      	ldr	r1, [r4, #32]
 800d016:	4628      	mov	r0, r5
 800d018:	47b0      	blx	r6
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	d106      	bne.n	800d02e <__sflush_r+0x66>
 800d020:	6829      	ldr	r1, [r5, #0]
 800d022:	291d      	cmp	r1, #29
 800d024:	d82c      	bhi.n	800d080 <__sflush_r+0xb8>
 800d026:	4a2a      	ldr	r2, [pc, #168]	; (800d0d0 <__sflush_r+0x108>)
 800d028:	40ca      	lsrs	r2, r1
 800d02a:	07d6      	lsls	r6, r2, #31
 800d02c:	d528      	bpl.n	800d080 <__sflush_r+0xb8>
 800d02e:	2200      	movs	r2, #0
 800d030:	6062      	str	r2, [r4, #4]
 800d032:	04d9      	lsls	r1, r3, #19
 800d034:	6922      	ldr	r2, [r4, #16]
 800d036:	6022      	str	r2, [r4, #0]
 800d038:	d504      	bpl.n	800d044 <__sflush_r+0x7c>
 800d03a:	1c42      	adds	r2, r0, #1
 800d03c:	d101      	bne.n	800d042 <__sflush_r+0x7a>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b903      	cbnz	r3, 800d044 <__sflush_r+0x7c>
 800d042:	6560      	str	r0, [r4, #84]	; 0x54
 800d044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d046:	602f      	str	r7, [r5, #0]
 800d048:	2900      	cmp	r1, #0
 800d04a:	d0ca      	beq.n	800cfe2 <__sflush_r+0x1a>
 800d04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d050:	4299      	cmp	r1, r3
 800d052:	d002      	beq.n	800d05a <__sflush_r+0x92>
 800d054:	4628      	mov	r0, r5
 800d056:	f7fd fc4f 	bl	800a8f8 <_free_r>
 800d05a:	2000      	movs	r0, #0
 800d05c:	6360      	str	r0, [r4, #52]	; 0x34
 800d05e:	e7c1      	b.n	800cfe4 <__sflush_r+0x1c>
 800d060:	6a21      	ldr	r1, [r4, #32]
 800d062:	2301      	movs	r3, #1
 800d064:	4628      	mov	r0, r5
 800d066:	47b0      	blx	r6
 800d068:	1c41      	adds	r1, r0, #1
 800d06a:	d1c7      	bne.n	800cffc <__sflush_r+0x34>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d0c4      	beq.n	800cffc <__sflush_r+0x34>
 800d072:	2b1d      	cmp	r3, #29
 800d074:	d001      	beq.n	800d07a <__sflush_r+0xb2>
 800d076:	2b16      	cmp	r3, #22
 800d078:	d101      	bne.n	800d07e <__sflush_r+0xb6>
 800d07a:	602f      	str	r7, [r5, #0]
 800d07c:	e7b1      	b.n	800cfe2 <__sflush_r+0x1a>
 800d07e:	89a3      	ldrh	r3, [r4, #12]
 800d080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d084:	81a3      	strh	r3, [r4, #12]
 800d086:	e7ad      	b.n	800cfe4 <__sflush_r+0x1c>
 800d088:	690f      	ldr	r7, [r1, #16]
 800d08a:	2f00      	cmp	r7, #0
 800d08c:	d0a9      	beq.n	800cfe2 <__sflush_r+0x1a>
 800d08e:	0793      	lsls	r3, r2, #30
 800d090:	680e      	ldr	r6, [r1, #0]
 800d092:	bf08      	it	eq
 800d094:	694b      	ldreq	r3, [r1, #20]
 800d096:	600f      	str	r7, [r1, #0]
 800d098:	bf18      	it	ne
 800d09a:	2300      	movne	r3, #0
 800d09c:	eba6 0807 	sub.w	r8, r6, r7
 800d0a0:	608b      	str	r3, [r1, #8]
 800d0a2:	f1b8 0f00 	cmp.w	r8, #0
 800d0a6:	dd9c      	ble.n	800cfe2 <__sflush_r+0x1a>
 800d0a8:	6a21      	ldr	r1, [r4, #32]
 800d0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0ac:	4643      	mov	r3, r8
 800d0ae:	463a      	mov	r2, r7
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	47b0      	blx	r6
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	dc06      	bgt.n	800d0c6 <__sflush_r+0xfe>
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	e78e      	b.n	800cfe4 <__sflush_r+0x1c>
 800d0c6:	4407      	add	r7, r0
 800d0c8:	eba8 0800 	sub.w	r8, r8, r0
 800d0cc:	e7e9      	b.n	800d0a2 <__sflush_r+0xda>
 800d0ce:	bf00      	nop
 800d0d0:	20400001 	.word	0x20400001

0800d0d4 <_fflush_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	690b      	ldr	r3, [r1, #16]
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b913      	cbnz	r3, 800d0e4 <_fflush_r+0x10>
 800d0de:	2500      	movs	r5, #0
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
 800d0e4:	b118      	cbz	r0, 800d0ee <_fflush_r+0x1a>
 800d0e6:	6983      	ldr	r3, [r0, #24]
 800d0e8:	b90b      	cbnz	r3, 800d0ee <_fflush_r+0x1a>
 800d0ea:	f000 f887 	bl	800d1fc <__sinit>
 800d0ee:	4b14      	ldr	r3, [pc, #80]	; (800d140 <_fflush_r+0x6c>)
 800d0f0:	429c      	cmp	r4, r3
 800d0f2:	d11b      	bne.n	800d12c <_fflush_r+0x58>
 800d0f4:	686c      	ldr	r4, [r5, #4]
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d0ef      	beq.n	800d0de <_fflush_r+0xa>
 800d0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d100:	07d0      	lsls	r0, r2, #31
 800d102:	d404      	bmi.n	800d10e <_fflush_r+0x3a>
 800d104:	0599      	lsls	r1, r3, #22
 800d106:	d402      	bmi.n	800d10e <_fflush_r+0x3a>
 800d108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d10a:	f7ff fcda 	bl	800cac2 <__retarget_lock_acquire_recursive>
 800d10e:	4628      	mov	r0, r5
 800d110:	4621      	mov	r1, r4
 800d112:	f7ff ff59 	bl	800cfc8 <__sflush_r>
 800d116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d118:	07da      	lsls	r2, r3, #31
 800d11a:	4605      	mov	r5, r0
 800d11c:	d4e0      	bmi.n	800d0e0 <_fflush_r+0xc>
 800d11e:	89a3      	ldrh	r3, [r4, #12]
 800d120:	059b      	lsls	r3, r3, #22
 800d122:	d4dd      	bmi.n	800d0e0 <_fflush_r+0xc>
 800d124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d126:	f7ff fccd 	bl	800cac4 <__retarget_lock_release_recursive>
 800d12a:	e7d9      	b.n	800d0e0 <_fflush_r+0xc>
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <_fflush_r+0x70>)
 800d12e:	429c      	cmp	r4, r3
 800d130:	d101      	bne.n	800d136 <_fflush_r+0x62>
 800d132:	68ac      	ldr	r4, [r5, #8]
 800d134:	e7df      	b.n	800d0f6 <_fflush_r+0x22>
 800d136:	4b04      	ldr	r3, [pc, #16]	; (800d148 <_fflush_r+0x74>)
 800d138:	429c      	cmp	r4, r3
 800d13a:	bf08      	it	eq
 800d13c:	68ec      	ldreq	r4, [r5, #12]
 800d13e:	e7da      	b.n	800d0f6 <_fflush_r+0x22>
 800d140:	0800da6c 	.word	0x0800da6c
 800d144:	0800da8c 	.word	0x0800da8c
 800d148:	0800da4c 	.word	0x0800da4c

0800d14c <std>:
 800d14c:	2300      	movs	r3, #0
 800d14e:	b510      	push	{r4, lr}
 800d150:	4604      	mov	r4, r0
 800d152:	e9c0 3300 	strd	r3, r3, [r0]
 800d156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d15a:	6083      	str	r3, [r0, #8]
 800d15c:	8181      	strh	r1, [r0, #12]
 800d15e:	6643      	str	r3, [r0, #100]	; 0x64
 800d160:	81c2      	strh	r2, [r0, #14]
 800d162:	6183      	str	r3, [r0, #24]
 800d164:	4619      	mov	r1, r3
 800d166:	2208      	movs	r2, #8
 800d168:	305c      	adds	r0, #92	; 0x5c
 800d16a:	f7fd fbbd 	bl	800a8e8 <memset>
 800d16e:	4b05      	ldr	r3, [pc, #20]	; (800d184 <std+0x38>)
 800d170:	6263      	str	r3, [r4, #36]	; 0x24
 800d172:	4b05      	ldr	r3, [pc, #20]	; (800d188 <std+0x3c>)
 800d174:	62a3      	str	r3, [r4, #40]	; 0x28
 800d176:	4b05      	ldr	r3, [pc, #20]	; (800d18c <std+0x40>)
 800d178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <std+0x44>)
 800d17c:	6224      	str	r4, [r4, #32]
 800d17e:	6323      	str	r3, [r4, #48]	; 0x30
 800d180:	bd10      	pop	{r4, pc}
 800d182:	bf00      	nop
 800d184:	0800d499 	.word	0x0800d499
 800d188:	0800d4bb 	.word	0x0800d4bb
 800d18c:	0800d4f3 	.word	0x0800d4f3
 800d190:	0800d517 	.word	0x0800d517

0800d194 <_cleanup_r>:
 800d194:	4901      	ldr	r1, [pc, #4]	; (800d19c <_cleanup_r+0x8>)
 800d196:	f000 b8af 	b.w	800d2f8 <_fwalk_reent>
 800d19a:	bf00      	nop
 800d19c:	0800d0d5 	.word	0x0800d0d5

0800d1a0 <__sfmoreglue>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	1e4a      	subs	r2, r1, #1
 800d1a4:	2568      	movs	r5, #104	; 0x68
 800d1a6:	4355      	muls	r5, r2
 800d1a8:	460e      	mov	r6, r1
 800d1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1ae:	f7fd fbf3 	bl	800a998 <_malloc_r>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	b140      	cbz	r0, 800d1c8 <__sfmoreglue+0x28>
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800d1bc:	300c      	adds	r0, #12
 800d1be:	60a0      	str	r0, [r4, #8]
 800d1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1c4:	f7fd fb90 	bl	800a8e8 <memset>
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}

0800d1cc <__sfp_lock_acquire>:
 800d1cc:	4801      	ldr	r0, [pc, #4]	; (800d1d4 <__sfp_lock_acquire+0x8>)
 800d1ce:	f7ff bc78 	b.w	800cac2 <__retarget_lock_acquire_recursive>
 800d1d2:	bf00      	nop
 800d1d4:	20000b18 	.word	0x20000b18

0800d1d8 <__sfp_lock_release>:
 800d1d8:	4801      	ldr	r0, [pc, #4]	; (800d1e0 <__sfp_lock_release+0x8>)
 800d1da:	f7ff bc73 	b.w	800cac4 <__retarget_lock_release_recursive>
 800d1de:	bf00      	nop
 800d1e0:	20000b18 	.word	0x20000b18

0800d1e4 <__sinit_lock_acquire>:
 800d1e4:	4801      	ldr	r0, [pc, #4]	; (800d1ec <__sinit_lock_acquire+0x8>)
 800d1e6:	f7ff bc6c 	b.w	800cac2 <__retarget_lock_acquire_recursive>
 800d1ea:	bf00      	nop
 800d1ec:	20000b13 	.word	0x20000b13

0800d1f0 <__sinit_lock_release>:
 800d1f0:	4801      	ldr	r0, [pc, #4]	; (800d1f8 <__sinit_lock_release+0x8>)
 800d1f2:	f7ff bc67 	b.w	800cac4 <__retarget_lock_release_recursive>
 800d1f6:	bf00      	nop
 800d1f8:	20000b13 	.word	0x20000b13

0800d1fc <__sinit>:
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	4604      	mov	r4, r0
 800d200:	f7ff fff0 	bl	800d1e4 <__sinit_lock_acquire>
 800d204:	69a3      	ldr	r3, [r4, #24]
 800d206:	b11b      	cbz	r3, 800d210 <__sinit+0x14>
 800d208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d20c:	f7ff bff0 	b.w	800d1f0 <__sinit_lock_release>
 800d210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d214:	6523      	str	r3, [r4, #80]	; 0x50
 800d216:	4b13      	ldr	r3, [pc, #76]	; (800d264 <__sinit+0x68>)
 800d218:	4a13      	ldr	r2, [pc, #76]	; (800d268 <__sinit+0x6c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d21e:	42a3      	cmp	r3, r4
 800d220:	bf04      	itt	eq
 800d222:	2301      	moveq	r3, #1
 800d224:	61a3      	streq	r3, [r4, #24]
 800d226:	4620      	mov	r0, r4
 800d228:	f000 f820 	bl	800d26c <__sfp>
 800d22c:	6060      	str	r0, [r4, #4]
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 f81c 	bl	800d26c <__sfp>
 800d234:	60a0      	str	r0, [r4, #8]
 800d236:	4620      	mov	r0, r4
 800d238:	f000 f818 	bl	800d26c <__sfp>
 800d23c:	2200      	movs	r2, #0
 800d23e:	60e0      	str	r0, [r4, #12]
 800d240:	2104      	movs	r1, #4
 800d242:	6860      	ldr	r0, [r4, #4]
 800d244:	f7ff ff82 	bl	800d14c <std>
 800d248:	68a0      	ldr	r0, [r4, #8]
 800d24a:	2201      	movs	r2, #1
 800d24c:	2109      	movs	r1, #9
 800d24e:	f7ff ff7d 	bl	800d14c <std>
 800d252:	68e0      	ldr	r0, [r4, #12]
 800d254:	2202      	movs	r2, #2
 800d256:	2112      	movs	r1, #18
 800d258:	f7ff ff78 	bl	800d14c <std>
 800d25c:	2301      	movs	r3, #1
 800d25e:	61a3      	str	r3, [r4, #24]
 800d260:	e7d2      	b.n	800d208 <__sinit+0xc>
 800d262:	bf00      	nop
 800d264:	0800d6c8 	.word	0x0800d6c8
 800d268:	0800d195 	.word	0x0800d195

0800d26c <__sfp>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	4607      	mov	r7, r0
 800d270:	f7ff ffac 	bl	800d1cc <__sfp_lock_acquire>
 800d274:	4b1e      	ldr	r3, [pc, #120]	; (800d2f0 <__sfp+0x84>)
 800d276:	681e      	ldr	r6, [r3, #0]
 800d278:	69b3      	ldr	r3, [r6, #24]
 800d27a:	b913      	cbnz	r3, 800d282 <__sfp+0x16>
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7ff ffbd 	bl	800d1fc <__sinit>
 800d282:	3648      	adds	r6, #72	; 0x48
 800d284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d288:	3b01      	subs	r3, #1
 800d28a:	d503      	bpl.n	800d294 <__sfp+0x28>
 800d28c:	6833      	ldr	r3, [r6, #0]
 800d28e:	b30b      	cbz	r3, 800d2d4 <__sfp+0x68>
 800d290:	6836      	ldr	r6, [r6, #0]
 800d292:	e7f7      	b.n	800d284 <__sfp+0x18>
 800d294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d298:	b9d5      	cbnz	r5, 800d2d0 <__sfp+0x64>
 800d29a:	4b16      	ldr	r3, [pc, #88]	; (800d2f4 <__sfp+0x88>)
 800d29c:	60e3      	str	r3, [r4, #12]
 800d29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800d2a4:	f7ff fc0c 	bl	800cac0 <__retarget_lock_init_recursive>
 800d2a8:	f7ff ff96 	bl	800d1d8 <__sfp_lock_release>
 800d2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2b4:	6025      	str	r5, [r4, #0]
 800d2b6:	61a5      	str	r5, [r4, #24]
 800d2b8:	2208      	movs	r2, #8
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2c0:	f7fd fb12 	bl	800a8e8 <memset>
 800d2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d0:	3468      	adds	r4, #104	; 0x68
 800d2d2:	e7d9      	b.n	800d288 <__sfp+0x1c>
 800d2d4:	2104      	movs	r1, #4
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	f7ff ff62 	bl	800d1a0 <__sfmoreglue>
 800d2dc:	4604      	mov	r4, r0
 800d2de:	6030      	str	r0, [r6, #0]
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d1d5      	bne.n	800d290 <__sfp+0x24>
 800d2e4:	f7ff ff78 	bl	800d1d8 <__sfp_lock_release>
 800d2e8:	230c      	movs	r3, #12
 800d2ea:	603b      	str	r3, [r7, #0]
 800d2ec:	e7ee      	b.n	800d2cc <__sfp+0x60>
 800d2ee:	bf00      	nop
 800d2f0:	0800d6c8 	.word	0x0800d6c8
 800d2f4:	ffff0001 	.word	0xffff0001

0800d2f8 <_fwalk_reent>:
 800d2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2fc:	4606      	mov	r6, r0
 800d2fe:	4688      	mov	r8, r1
 800d300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d304:	2700      	movs	r7, #0
 800d306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d30a:	f1b9 0901 	subs.w	r9, r9, #1
 800d30e:	d505      	bpl.n	800d31c <_fwalk_reent+0x24>
 800d310:	6824      	ldr	r4, [r4, #0]
 800d312:	2c00      	cmp	r4, #0
 800d314:	d1f7      	bne.n	800d306 <_fwalk_reent+0xe>
 800d316:	4638      	mov	r0, r7
 800d318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31c:	89ab      	ldrh	r3, [r5, #12]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d907      	bls.n	800d332 <_fwalk_reent+0x3a>
 800d322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d326:	3301      	adds	r3, #1
 800d328:	d003      	beq.n	800d332 <_fwalk_reent+0x3a>
 800d32a:	4629      	mov	r1, r5
 800d32c:	4630      	mov	r0, r6
 800d32e:	47c0      	blx	r8
 800d330:	4307      	orrs	r7, r0
 800d332:	3568      	adds	r5, #104	; 0x68
 800d334:	e7e9      	b.n	800d30a <_fwalk_reent+0x12>

0800d336 <__swhatbuf_r>:
 800d336:	b570      	push	{r4, r5, r6, lr}
 800d338:	460e      	mov	r6, r1
 800d33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33e:	2900      	cmp	r1, #0
 800d340:	b096      	sub	sp, #88	; 0x58
 800d342:	4614      	mov	r4, r2
 800d344:	461d      	mov	r5, r3
 800d346:	da07      	bge.n	800d358 <__swhatbuf_r+0x22>
 800d348:	2300      	movs	r3, #0
 800d34a:	602b      	str	r3, [r5, #0]
 800d34c:	89b3      	ldrh	r3, [r6, #12]
 800d34e:	061a      	lsls	r2, r3, #24
 800d350:	d410      	bmi.n	800d374 <__swhatbuf_r+0x3e>
 800d352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d356:	e00e      	b.n	800d376 <__swhatbuf_r+0x40>
 800d358:	466a      	mov	r2, sp
 800d35a:	f000 f903 	bl	800d564 <_fstat_r>
 800d35e:	2800      	cmp	r0, #0
 800d360:	dbf2      	blt.n	800d348 <__swhatbuf_r+0x12>
 800d362:	9a01      	ldr	r2, [sp, #4]
 800d364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d36c:	425a      	negs	r2, r3
 800d36e:	415a      	adcs	r2, r3
 800d370:	602a      	str	r2, [r5, #0]
 800d372:	e7ee      	b.n	800d352 <__swhatbuf_r+0x1c>
 800d374:	2340      	movs	r3, #64	; 0x40
 800d376:	2000      	movs	r0, #0
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	b016      	add	sp, #88	; 0x58
 800d37c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d380 <__smakebuf_r>:
 800d380:	898b      	ldrh	r3, [r1, #12]
 800d382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d384:	079d      	lsls	r5, r3, #30
 800d386:	4606      	mov	r6, r0
 800d388:	460c      	mov	r4, r1
 800d38a:	d507      	bpl.n	800d39c <__smakebuf_r+0x1c>
 800d38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	6123      	str	r3, [r4, #16]
 800d394:	2301      	movs	r3, #1
 800d396:	6163      	str	r3, [r4, #20]
 800d398:	b002      	add	sp, #8
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	ab01      	add	r3, sp, #4
 800d39e:	466a      	mov	r2, sp
 800d3a0:	f7ff ffc9 	bl	800d336 <__swhatbuf_r>
 800d3a4:	9900      	ldr	r1, [sp, #0]
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7fd faf5 	bl	800a998 <_malloc_r>
 800d3ae:	b948      	cbnz	r0, 800d3c4 <__smakebuf_r+0x44>
 800d3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3b4:	059a      	lsls	r2, r3, #22
 800d3b6:	d4ef      	bmi.n	800d398 <__smakebuf_r+0x18>
 800d3b8:	f023 0303 	bic.w	r3, r3, #3
 800d3bc:	f043 0302 	orr.w	r3, r3, #2
 800d3c0:	81a3      	strh	r3, [r4, #12]
 800d3c2:	e7e3      	b.n	800d38c <__smakebuf_r+0xc>
 800d3c4:	4b0d      	ldr	r3, [pc, #52]	; (800d3fc <__smakebuf_r+0x7c>)
 800d3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	6020      	str	r0, [r4, #0]
 800d3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3d0:	81a3      	strh	r3, [r4, #12]
 800d3d2:	9b00      	ldr	r3, [sp, #0]
 800d3d4:	6163      	str	r3, [r4, #20]
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	6120      	str	r0, [r4, #16]
 800d3da:	b15b      	cbz	r3, 800d3f4 <__smakebuf_r+0x74>
 800d3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f000 f8d1 	bl	800d588 <_isatty_r>
 800d3e6:	b128      	cbz	r0, 800d3f4 <__smakebuf_r+0x74>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f023 0303 	bic.w	r3, r3, #3
 800d3ee:	f043 0301 	orr.w	r3, r3, #1
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	89a0      	ldrh	r0, [r4, #12]
 800d3f6:	4305      	orrs	r5, r0
 800d3f8:	81a5      	strh	r5, [r4, #12]
 800d3fa:	e7cd      	b.n	800d398 <__smakebuf_r+0x18>
 800d3fc:	0800d195 	.word	0x0800d195

0800d400 <_malloc_usable_size_r>:
 800d400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d404:	1f18      	subs	r0, r3, #4
 800d406:	2b00      	cmp	r3, #0
 800d408:	bfbc      	itt	lt
 800d40a:	580b      	ldrlt	r3, [r1, r0]
 800d40c:	18c0      	addlt	r0, r0, r3
 800d40e:	4770      	bx	lr

0800d410 <_raise_r>:
 800d410:	291f      	cmp	r1, #31
 800d412:	b538      	push	{r3, r4, r5, lr}
 800d414:	4604      	mov	r4, r0
 800d416:	460d      	mov	r5, r1
 800d418:	d904      	bls.n	800d424 <_raise_r+0x14>
 800d41a:	2316      	movs	r3, #22
 800d41c:	6003      	str	r3, [r0, #0]
 800d41e:	f04f 30ff 	mov.w	r0, #4294967295
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d426:	b112      	cbz	r2, 800d42e <_raise_r+0x1e>
 800d428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d42c:	b94b      	cbnz	r3, 800d442 <_raise_r+0x32>
 800d42e:	4620      	mov	r0, r4
 800d430:	f000 f830 	bl	800d494 <_getpid_r>
 800d434:	462a      	mov	r2, r5
 800d436:	4601      	mov	r1, r0
 800d438:	4620      	mov	r0, r4
 800d43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d43e:	f000 b817 	b.w	800d470 <_kill_r>
 800d442:	2b01      	cmp	r3, #1
 800d444:	d00a      	beq.n	800d45c <_raise_r+0x4c>
 800d446:	1c59      	adds	r1, r3, #1
 800d448:	d103      	bne.n	800d452 <_raise_r+0x42>
 800d44a:	2316      	movs	r3, #22
 800d44c:	6003      	str	r3, [r0, #0]
 800d44e:	2001      	movs	r0, #1
 800d450:	e7e7      	b.n	800d422 <_raise_r+0x12>
 800d452:	2400      	movs	r4, #0
 800d454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d458:	4628      	mov	r0, r5
 800d45a:	4798      	blx	r3
 800d45c:	2000      	movs	r0, #0
 800d45e:	e7e0      	b.n	800d422 <_raise_r+0x12>

0800d460 <raise>:
 800d460:	4b02      	ldr	r3, [pc, #8]	; (800d46c <raise+0xc>)
 800d462:	4601      	mov	r1, r0
 800d464:	6818      	ldr	r0, [r3, #0]
 800d466:	f7ff bfd3 	b.w	800d410 <_raise_r>
 800d46a:	bf00      	nop
 800d46c:	2000003c 	.word	0x2000003c

0800d470 <_kill_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	4d07      	ldr	r5, [pc, #28]	; (800d490 <_kill_r+0x20>)
 800d474:	2300      	movs	r3, #0
 800d476:	4604      	mov	r4, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	4611      	mov	r1, r2
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	f7f4 fca3 	bl	8001dc8 <_kill>
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	d102      	bne.n	800d48c <_kill_r+0x1c>
 800d486:	682b      	ldr	r3, [r5, #0]
 800d488:	b103      	cbz	r3, 800d48c <_kill_r+0x1c>
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	bf00      	nop
 800d490:	20000b0c 	.word	0x20000b0c

0800d494 <_getpid_r>:
 800d494:	f7f4 bc90 	b.w	8001db8 <_getpid>

0800d498 <__sread>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	460c      	mov	r4, r1
 800d49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a0:	f000 f894 	bl	800d5cc <_read_r>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	bfab      	itete	ge
 800d4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d4ac:	181b      	addge	r3, r3, r0
 800d4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4b2:	bfac      	ite	ge
 800d4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4b6:	81a3      	strhlt	r3, [r4, #12]
 800d4b8:	bd10      	pop	{r4, pc}

0800d4ba <__swrite>:
 800d4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4be:	461f      	mov	r7, r3
 800d4c0:	898b      	ldrh	r3, [r1, #12]
 800d4c2:	05db      	lsls	r3, r3, #23
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	4616      	mov	r6, r2
 800d4ca:	d505      	bpl.n	800d4d8 <__swrite+0x1e>
 800d4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f000 f868 	bl	800d5a8 <_lseek_r>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	4632      	mov	r2, r6
 800d4e6:	463b      	mov	r3, r7
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ee:	f000 b817 	b.w	800d520 <_write_r>

0800d4f2 <__sseek>:
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4fa:	f000 f855 	bl	800d5a8 <_lseek_r>
 800d4fe:	1c43      	adds	r3, r0, #1
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	bf15      	itete	ne
 800d504:	6560      	strne	r0, [r4, #84]	; 0x54
 800d506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d50e:	81a3      	strheq	r3, [r4, #12]
 800d510:	bf18      	it	ne
 800d512:	81a3      	strhne	r3, [r4, #12]
 800d514:	bd10      	pop	{r4, pc}

0800d516 <__sclose>:
 800d516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d51a:	f000 b813 	b.w	800d544 <_close_r>
	...

0800d520 <_write_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d07      	ldr	r5, [pc, #28]	; (800d540 <_write_r+0x20>)
 800d524:	4604      	mov	r4, r0
 800d526:	4608      	mov	r0, r1
 800d528:	4611      	mov	r1, r2
 800d52a:	2200      	movs	r2, #0
 800d52c:	602a      	str	r2, [r5, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	f7f4 fc81 	bl	8001e36 <_write>
 800d534:	1c43      	adds	r3, r0, #1
 800d536:	d102      	bne.n	800d53e <_write_r+0x1e>
 800d538:	682b      	ldr	r3, [r5, #0]
 800d53a:	b103      	cbz	r3, 800d53e <_write_r+0x1e>
 800d53c:	6023      	str	r3, [r4, #0]
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	20000b0c 	.word	0x20000b0c

0800d544 <_close_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d06      	ldr	r5, [pc, #24]	; (800d560 <_close_r+0x1c>)
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	602b      	str	r3, [r5, #0]
 800d550:	f7f4 fc8d 	bl	8001e6e <_close>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	d102      	bne.n	800d55e <_close_r+0x1a>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	b103      	cbz	r3, 800d55e <_close_r+0x1a>
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	20000b0c 	.word	0x20000b0c

0800d564 <_fstat_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	4d07      	ldr	r5, [pc, #28]	; (800d584 <_fstat_r+0x20>)
 800d568:	2300      	movs	r3, #0
 800d56a:	4604      	mov	r4, r0
 800d56c:	4608      	mov	r0, r1
 800d56e:	4611      	mov	r1, r2
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	f7f4 fc88 	bl	8001e86 <_fstat>
 800d576:	1c43      	adds	r3, r0, #1
 800d578:	d102      	bne.n	800d580 <_fstat_r+0x1c>
 800d57a:	682b      	ldr	r3, [r5, #0]
 800d57c:	b103      	cbz	r3, 800d580 <_fstat_r+0x1c>
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	bd38      	pop	{r3, r4, r5, pc}
 800d582:	bf00      	nop
 800d584:	20000b0c 	.word	0x20000b0c

0800d588 <_isatty_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	4d06      	ldr	r5, [pc, #24]	; (800d5a4 <_isatty_r+0x1c>)
 800d58c:	2300      	movs	r3, #0
 800d58e:	4604      	mov	r4, r0
 800d590:	4608      	mov	r0, r1
 800d592:	602b      	str	r3, [r5, #0]
 800d594:	f7f4 fc87 	bl	8001ea6 <_isatty>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_isatty_r+0x1a>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_isatty_r+0x1a>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	20000b0c 	.word	0x20000b0c

0800d5a8 <_lseek_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	; (800d5c8 <_lseek_r+0x20>)
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	602a      	str	r2, [r5, #0]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f7f4 fc80 	bl	8001ebc <_lseek>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d102      	bne.n	800d5c6 <_lseek_r+0x1e>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b103      	cbz	r3, 800d5c6 <_lseek_r+0x1e>
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	20000b0c 	.word	0x20000b0c

0800d5cc <_read_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d07      	ldr	r5, [pc, #28]	; (800d5ec <_read_r+0x20>)
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	4608      	mov	r0, r1
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	602a      	str	r2, [r5, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	f7f4 fc0e 	bl	8001dfc <_read>
 800d5e0:	1c43      	adds	r3, r0, #1
 800d5e2:	d102      	bne.n	800d5ea <_read_r+0x1e>
 800d5e4:	682b      	ldr	r3, [r5, #0]
 800d5e6:	b103      	cbz	r3, 800d5ea <_read_r+0x1e>
 800d5e8:	6023      	str	r3, [r4, #0]
 800d5ea:	bd38      	pop	{r3, r4, r5, pc}
 800d5ec:	20000b0c 	.word	0x20000b0c

0800d5f0 <_init>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	bf00      	nop
 800d5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5f6:	bc08      	pop	{r3}
 800d5f8:	469e      	mov	lr, r3
 800d5fa:	4770      	bx	lr

0800d5fc <_fini>:
 800d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fe:	bf00      	nop
 800d600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d602:	bc08      	pop	{r3}
 800d604:	469e      	mov	lr, r3
 800d606:	4770      	bx	lr
