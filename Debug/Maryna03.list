
Maryna03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800e4b0  0800e4b0  0001e4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e954  0800e954  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e954  0800e954  0001e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e95c  0800e95c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e95c  0800e95c  0001e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e960  0800e960  0001e960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800e964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002020c  2**0
                  CONTENTS
 10 .bss          00000958  2000020c  2000020c  0002020c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  0002020c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000292df  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000550d  00000000  00000000  0004951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  0004ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d8  00000000  00000000  00050500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027178  00000000  00000000  00051dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002501b  00000000  00000000  00078f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7bf8  00000000  00000000  0009df6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00175b63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008184  00000000  00000000  00175bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e498 	.word	0x0800e498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800e498 	.word	0x0800e498

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <LIS302DL_WriteIO>:
static float zScale = 1.0f;

//Private functions
//Write IO
void LIS302DL_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	73fb      	strb	r3, [r7, #15]
	_LIS302DL_CS_ENBALE;
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LIS302DL_WriteIO+0x4c>)
 8000eba:	f001 fdb5 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000ebe:	f107 010f 	add.w	r1, r7, #15
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <LIS302DL_WriteIO+0x50>)
 8000ec8:	f004 ff59 	bl	8005d7e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <LIS302DL_WriteIO+0x50>)
 8000ed6:	f004 ff52 	bl	8005d7e <HAL_SPI_Transmit>
	_LIS302DL_CS_DISABLE;
 8000eda:	2201      	movs	r2, #1
 8000edc:	2108      	movs	r1, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <LIS302DL_WriteIO+0x4c>)
 8000ee0:	f001 fda2 	bl	8002a28 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	20000228 	.word	0x20000228

08000ef4 <LIS302DL_ReadIO>:

//Read IO
void LIS302DL_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	723b      	strb	r3, [r7, #8]
	_LIS302DL_CS_ENBALE;
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2108      	movs	r1, #8
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <LIS302DL_ReadIO+0x84>)
 8000f14:	f001 fd88 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f18:	f107 0108 	add.w	r1, r7, #8
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4816      	ldr	r0, [pc, #88]	; (8000f7c <LIS302DL_ReadIO+0x88>)
 8000f22:	f004 ff2c 	bl	8005d7e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f107 0108 	add.w	r1, r7, #8
 8000f2e:	230a      	movs	r3, #10
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <LIS302DL_ReadIO+0x88>)
 8000f32:	f005 f860 	bl	8005ff6 <HAL_SPI_Receive>
	_LIS302DL_CS_DISABLE;
 8000f36:	2201      	movs	r2, #1
 8000f38:	2108      	movs	r1, #8
 8000f3a:	480f      	ldr	r0, [pc, #60]	; (8000f78 <LIS302DL_ReadIO+0x84>)
 8000f3c:	f001 fd74 	bl	8002a28 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e00c      	b.n	8000f60 <LIS302DL_ReadIO+0x6c>
	{
		dataR[i] = spiBuf[i];
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f107 0110 	add.w	r1, r7, #16
 8000f52:	440a      	add	r2, r1
 8000f54:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f58:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbec      	blt.n	8000f46 <LIS302DL_ReadIO+0x52>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	20000228 	.word	0x20000228

08000f80 <LIS302DL_Init>:

//Accelerometer initialise function
void LIS302DL_Init(SPI_HandleTypeDef *accSPI, LIS302DL_InitTypeDef *accInitDef)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]

	uint8_t spiData;

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000f8a:	2258      	movs	r2, #88	; 0x58
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4847      	ldr	r0, [pc, #284]	; (80010ac <LIS302DL_Init+0x12c>)
 8000f90:	f00a fbf0 	bl	800b774 <memcpy>
	//CTRL_REG1 forming
	spiData = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->dataRate) spiData |= 0x80;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <LIS302DL_Init+0x2a>
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->powerDown) spiData |= 0x40;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <LIS302DL_Init+0x3c>
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->fullScale) spiData |= 0x20;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	789b      	ldrb	r3, [r3, #2]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <LIS302DL_Init+0x4e>
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	f043 0320 	orr.w	r3, r3, #32
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->enableAxes & 0x07);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]
	//Write CTRL_REG1 and UART echo
	LIS302DL_WriteIO(LIS302DL_CTRL_REG1_ADDR, &spiData, 1);
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f7ff ff56 	bl	8000ea0 <LIS302DL_WriteIO>
	sprintf(uartBuffer ,"REG1: 0x%0X\n\r", spiData);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	492d      	ldr	r1, [pc, #180]	; (80010b0 <LIS302DL_Init+0x130>)
 8000ffa:	482e      	ldr	r0, [pc, #184]	; (80010b4 <LIS302DL_Init+0x134>)
 8000ffc:	f00b f8f4 	bl	800c1e8 <siprintf>
	uartLog(uartBuffer);
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <LIS302DL_Init+0x134>)
 8001002:	f001 f87f 	bl	8002104 <uartLog>

	//CTRL_REG2 forming
	spiData = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->serialInterfaceMode) spiData |= 0x80;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <LIS302DL_Init+0x9c>
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->rebootMemory) spiData |= 0x40;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <LIS302DL_Init+0xae>
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->filterConfig) spiData |= 0x1F;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	799b      	ldrb	r3, [r3, #6]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <LIS302DL_Init+0xc0>
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 031f 	orr.w	r3, r3, #31
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
	LIS302DL_WriteIO(LIS302DL_CTRL_REG2_ADDR, &spiData, 1);
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	2021      	movs	r0, #33	; 0x21
 800104a:	f7ff ff29 	bl	8000ea0 <LIS302DL_WriteIO>
	//Write CTRL_REG2 and UART echo
	sprintf(uartBuffer ,"REG2: 0x%0X\n\r", spiData);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	461a      	mov	r2, r3
 8001052:	4919      	ldr	r1, [pc, #100]	; (80010b8 <LIS302DL_Init+0x138>)
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <LIS302DL_Init+0x134>)
 8001056:	f00b f8c7 	bl	800c1e8 <siprintf>
	uartLog(uartBuffer);
 800105a:	4816      	ldr	r0, [pc, #88]	; (80010b4 <LIS302DL_Init+0x134>)
 800105c:	f001 f852 	bl	8002104 <uartLog>

	if (accInitDef->interruptConfig)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	79db      	ldrb	r3, [r3, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d012      	beq.n	800108e <LIS302DL_Init+0x10e>
		{
			//CTRL_REG3 forming
			spiData = accInitDef->interruptConfig;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	79db      	ldrb	r3, [r3, #7]
 800106c:	73fb      	strb	r3, [r7, #15]
			//Write CTRL_REG3 and UART echo
			LIS302DL_WriteIO(LIS302DL_CTRL_REG3_ADDR, &spiData, 1);
 800106e:	f107 030f 	add.w	r3, r7, #15
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	2022      	movs	r0, #34	; 0x22
 8001078:	f7ff ff12 	bl	8000ea0 <LIS302DL_WriteIO>
			sprintf(uartBuffer ,"REG3: 0x%0X\n\r", spiData);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	461a      	mov	r2, r3
 8001080:	490e      	ldr	r1, [pc, #56]	; (80010bc <LIS302DL_Init+0x13c>)
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LIS302DL_Init+0x134>)
 8001084:	f00b f8b0 	bl	800c1e8 <siprintf>
			uartLog(uartBuffer);
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <LIS302DL_Init+0x134>)
 800108a:	f001 f83b 	bl	8002104 <uartLog>
		}
	//Assign sensor sensitivity
	if (accInitDef->fullScale)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <LIS302DL_Init+0x11e>
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_018G;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <LIS302DL_Init+0x140>)
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LIS302DL_Init+0x144>)
 800109a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
	}
}
 800109c:	e002      	b.n	80010a4 <LIS302DL_Init+0x124>
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LIS302DL_Init+0x140>)
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <LIS302DL_Init+0x148>)
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000228 	.word	0x20000228
 80010b0:	0800e4b0 	.word	0x0800e4b0
 80010b4:	2000029c 	.word	0x2000029c
 80010b8:	0800e4c0 	.word	0x0800e4c0
 80010bc:	0800e4d0 	.word	0x0800e4d0
 80010c0:	20000000 	.word	0x20000000
 80010c4:	3c9374bc 	.word	0x3c9374bc
 80010c8:	3d9374bc 	.word	0x3d9374bc

080010cc <LIS302DL_GetDataRaw>:

//Get Accelerometer raw data
LIS302DL_DataRaw LIS302DL_GetDataRaw(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	LIS302DL_DataRaw tempDataRaw;
	LIS302DL_ReadIO(LIS302DL_OUT_X_ADDR, &tempDataRaw.x, 1);
 80010d2:	463b      	mov	r3, r7
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	2029      	movs	r0, #41	; 0x29
 80010da:	f7ff ff0b 	bl	8000ef4 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Y_ADDR, &tempDataRaw.y, 1);
 80010de:	463b      	mov	r3, r7
 80010e0:	3301      	adds	r3, #1
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	202b      	movs	r0, #43	; 0x2b
 80010e8:	f7ff ff04 	bl	8000ef4 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Z_ADDR, &tempDataRaw.z, 1);
 80010ec:	463b      	mov	r3, r7
 80010ee:	3302      	adds	r3, #2
 80010f0:	2201      	movs	r2, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	202d      	movs	r0, #45	; 0x2d
 80010f6:	f7ff fefd 	bl	8000ef4 <LIS302DL_ReadIO>
	return tempDataRaw;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	463a      	mov	r2, r7
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4611      	mov	r1, r2
 8001102:	8019      	strh	r1, [r3, #0]
 8001104:	3302      	adds	r3, #2
 8001106:	0c12      	lsrs	r2, r2, #16
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	793a      	ldrb	r2, [r7, #4]
 800110e:	f362 0307 	bfi	r3, r2, #0, #8
 8001112:	797a      	ldrb	r2, [r7, #5]
 8001114:	f362 230f 	bfi	r3, r2, #8, #8
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <LIS302DL_GetDataScaled>:
//Get Accelerometer scaled data [g]
LIS302DL_DataScaled LIS302DL_GetDataScaled(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0

	LIS302DL_DataRaw tempRawData = LIS302DL_GetDataRaw();
 800112e:	f7ff ffcd 	bl	80010cc <LIS302DL_GetDataRaw>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	f887 2020 	strb.w	r2, [r7, #32]
 800113a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800113e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8001142:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001146:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	LIS302DL_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * LIS302DL_Sensitivity * xScale) + 0.0f - xOffset;
 800114a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <LIS302DL_GetDataScaled+0xf8>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <LIS302DL_GetDataScaled+0xfc>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001228 <LIS302DL_GetDataScaled+0x100>
 800116e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <LIS302DL_GetDataScaled+0x104>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117c:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.y = (tempRawData.y * LIS302DL_Sensitivity * yScale) + 0.0f - yOffset;
 8001180:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <LIS302DL_GetDataScaled+0xf8>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <LIS302DL_GetDataScaled+0x108>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001228 <LIS302DL_GetDataScaled+0x100>
 80011a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <LIS302DL_GetDataScaled+0x10c>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	edc7 7a06 	vstr	s15, [r7, #24]
	tempScaledData.z = (tempRawData.z * LIS302DL_Sensitivity * zScale) + 0.0f - zOffset;
 80011b6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <LIS302DL_GetDataScaled+0xf8>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <LIS302DL_GetDataScaled+0x110>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001228 <LIS302DL_GetDataScaled+0x100>
 80011da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <LIS302DL_GetDataScaled+0x114>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc7 7a07 	vstr	s15, [r7, #28]

	return tempScaledData;
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	f107 0214 	add.w	r2, r7, #20
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	ee06 1a90 	vmov	s13, r1
 8001204:	ee07 2a10 	vmov	s14, r2
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a66 	vmov.f32	s0, s13
 8001210:	eef0 0a47 	vmov.f32	s1, s14
 8001214:	eeb0 1a67 	vmov.f32	s2, s15
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004
 8001228:	00000000 	.word	0x00000000
 800122c:	20000280 	.word	0x20000280
 8001230:	20000008 	.word	0x20000008
 8001234:	20000284 	.word	0x20000284
 8001238:	2000000c 	.word	0x2000000c
 800123c:	20000288 	.word	0x20000288

08001240 <LIS302DL_PollDRDY>:
//Poll for Data Ready
bool LIS302DL_PollDRDY(uint32_t msTimeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 8001248:	f001 f87e 	bl	8002348 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS302DL_ReadIO(LIS302DL_STATUS_ADDR, &Acc_status, 1);
 800124e:	f107 030b 	add.w	r3, r7, #11
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	2027      	movs	r0, #39	; 0x27
 8001258:	f7ff fe4c 	bl	8000ef4 <LIS302DL_ReadIO>
		if (Acc_status & 0x07) break;
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10d      	bne.n	8001282 <LIS302DL_PollDRDY+0x42>
	}
	while ((Acc_status & 0x07) == 0 && (HAL_GetTick() - startTick) < msTimeout);
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <LIS302DL_PollDRDY+0x44>
 8001270:	f001 f86a 	bl	8002348 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8e6      	bhi.n	800124e <LIS302DL_PollDRDY+0xe>
 8001280:	e000      	b.n	8001284 <LIS302DL_PollDRDY+0x44>
		if (Acc_status & 0x07) break;
 8001282:	bf00      	nop
	if (Acc_status & 0x07)
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <LIS302DL_PollDRDY+0x52>
	{
		return true;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LIS302DL_PollDRDY+0x54>
	}
	return false;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <LIS302DL_X_calibrate>:

//** Calibration functions **//
//X-Axis calibrate
void LIS302DL_X_calibrate(float x_min, float x_max)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012a6:	edc7 0a00 	vstr	s1, [r7]
	xOffset = (x_max + x_min) / 2.0f;
 80012aa:	ed97 7a00 	vldr	s14, [r7]
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <LIS302DL_X_calibrate+0x50>)
 80012c0:	edc3 7a00 	vstr	s15, [r3]
	xScale = 2.0f / (x_max - x_min);
 80012c4:	ed97 7a00 	vldr	s14, [r7]
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <LIS302DL_X_calibrate+0x54>)
 80012da:	edc3 7a00 	vstr	s15, [r3]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000280 	.word	0x20000280
 80012f0:	20000004 	.word	0x20000004

080012f4 <LIS302DL_Y_calibrate>:
//Y-Axis calibrate
void LIS302DL_Y_calibrate(float y_min, float y_max)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012fe:	edc7 0a00 	vstr	s1, [r7]
	yOffset = (y_max + y_min) / 2.0f;
 8001302:	ed97 7a00 	vldr	s14, [r7]
 8001306:	edd7 7a01 	vldr	s15, [r7, #4]
 800130a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LIS302DL_Y_calibrate+0x50>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
	yScale = 2.0f / (y_max - y_min);
 800131c:	ed97 7a00 	vldr	s14, [r7]
 8001320:	edd7 7a01 	vldr	s15, [r7, #4]
 8001324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001328:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LIS302DL_Y_calibrate+0x54>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000284 	.word	0x20000284
 8001348:	20000008 	.word	0x20000008

0800134c <LIS302DL_Z_calibrate>:
//Z-Axis calibrate
void LIS302DL_Z_calibrate(float z_min, float z_max)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
 8001356:	edc7 0a00 	vstr	s1, [r7]
	zOffset = (z_max + z_min) / 2.0f;
 800135a:	ed97 7a00 	vldr	s14, [r7]
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800136a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <LIS302DL_Z_calibrate+0x50>)
 8001370:	edc3 7a00 	vstr	s15, [r3]
	zScale = 2.0f / (z_max - z_min);
 8001374:	ed97 7a00 	vldr	s14, [r7]
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LIS302DL_Z_calibrate+0x54>)
 800138a:	edc3 7a00 	vstr	s15, [r3]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000288 	.word	0x20000288
 80013a0:	2000000c 	.word	0x2000000c

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4b60      	ldr	r3, [pc, #384]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a5f      	ldr	r2, [pc, #380]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a58      	ldr	r2, [pc, #352]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a51      	ldr	r2, [pc, #324]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a43      	ldr	r2, [pc, #268]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <MX_GPIO_Init+0x19c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_GPIO_Init+0x19c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a3c      	ldr	r2, [pc, #240]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2108      	movs	r1, #8
 8001466:	4837      	ldr	r0, [pc, #220]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001468:	f001 fade 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2101      	movs	r1, #1
 8001470:	4835      	ldr	r0, [pc, #212]	; (8001548 <MX_GPIO_Init+0x1a4>)
 8001472:	f001 fad9 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2110      	movs	r1, #16
 800147a:	4834      	ldr	r0, [pc, #208]	; (800154c <MX_GPIO_Init+0x1a8>)
 800147c:	f001 fad4 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001480:	2308      	movs	r3, #8
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	2302      	movs	r3, #2
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	482b      	ldr	r0, [pc, #172]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001498:	f001 f92a 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4825      	ldr	r0, [pc, #148]	; (8001548 <MX_GPIO_Init+0x1a4>)
 80014b4:	f001 f91c 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <MX_GPIO_Init+0x1ac>)
 80014ce:	f001 f90f 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014d2:	2304      	movs	r3, #4
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x1b0>)
 80014e6:	f001 f903 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80014ea:	2310      	movs	r3, #16
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_GPIO_Init+0x1a8>)
 8001502:	f001 f8f5 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001506:	2320      	movs	r3, #32
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_GPIO_Init+0x1a8>)
 800151a:	f001 f8e9 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001522:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001534:	f001 f8dc 	bl	80026f0 <HAL_GPIO_Init>

}
 8001538:	bf00      	nop
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40021000 	.word	0x40021000
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400

08001558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_I2C1_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001596:	f002 ffd1 	bl	800453c <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 faf6 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002d0 	.word	0x200002d0
 80015ac:	40005400 	.word	0x40005400
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_I2C_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f8:	2312      	movs	r3, #18
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001604:	2304      	movs	r3, #4
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <HAL_I2C_MspInit+0x8c>)
 8001610:	f001 f86e 	bl	80026f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_I2C_MspInit+0x88>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_I2C_MspInit+0x88>)
 800161e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_I2C_MspInit+0x88>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005400 	.word	0x40005400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020400 	.word	0x40020400

08001644 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_I2S3_Init+0x54>)
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <MX_I2S3_Init+0x58>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_I2S3_Init+0x54>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_I2S3_Init+0x54>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_I2S3_Init+0x54>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <MX_I2S3_Init+0x54>)
 8001664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001668:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_I2S3_Init+0x54>)
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <MX_I2S3_Init+0x5c>)
 800166e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_I2S3_Init+0x54>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_I2S3_Init+0x54>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_I2S3_Init+0x54>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_I2S3_Init+0x54>)
 8001684:	f003 f89e 	bl	80047c4 <HAL_I2S_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800168e:	f000 fa7f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000324 	.word	0x20000324
 800169c:	40003c00 	.word	0x40003c00
 80016a0:	00017700 	.word	0x00017700

080016a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	; 0x38
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a31      	ldr	r2, [pc, #196]	; (8001794 <HAL_I2S_MspInit+0xf0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d15a      	bne.n	800178a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016d4:	2301      	movs	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016d8:	23c0      	movs	r3, #192	; 0xc0
 80016da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 f981 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016f0:	f000 fa4e 	bl	8001b90 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 80016fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_I2S_MspInit+0xf4>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001748:	2310      	movs	r3, #16
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001758:	2306      	movs	r3, #6
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <HAL_I2S_MspInit+0xf8>)
 8001764:	f000 ffc4 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001768:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800177a:	2306      	movs	r3, #6
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_I2S_MspInit+0xfc>)
 8001786:	f000 ffb3 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3738      	adds	r7, #56	; 0x38
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40003c00 	.word	0x40003c00
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020800 	.word	0x40020800

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f000 fd68 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ac:	f000 f90e 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b0:	f7ff fdf8 	bl	80013a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017b4:	f7ff fed0 	bl	8001558 <MX_I2C1_Init>
  MX_I2S3_Init();
 80017b8:	f7ff ff44 	bl	8001644 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80017bc:	f009 fc98 	bl	800b0f0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80017c0:	f000 fcb8 	bl	8002134 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017c4:	f000 f9ea 	bl	8001b9c <MX_SPI1_Init>
  MX_TIM4_Init();
 80017c8:	f000 fba4 	bl	8001f14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017cc:	2100      	movs	r1, #0
 80017ce:	4878      	ldr	r0, [pc, #480]	; (80019b0 <main+0x20c>)
 80017d0:	f005 f89c 	bl	800690c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80017d4:	2104      	movs	r1, #4
 80017d6:	4876      	ldr	r0, [pc, #472]	; (80019b0 <main+0x20c>)
 80017d8:	f005 f898 	bl	800690c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017dc:	2108      	movs	r1, #8
 80017de:	4874      	ldr	r0, [pc, #464]	; (80019b0 <main+0x20c>)
 80017e0:	f005 f894 	bl	800690c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80017e4:	210c      	movs	r1, #12
 80017e6:	4872      	ldr	r0, [pc, #456]	; (80019b0 <main+0x20c>)
 80017e8:	f005 f890 	bl	800690c <HAL_TIM_PWM_Start>

  myAccel.dataRate=LIS302DL_DATARATE_400;
 80017ec:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <main+0x210>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
  myAccel.powerDown=LIS302DL_ACTIVE;
 80017f2:	4b70      	ldr	r3, [pc, #448]	; (80019b4 <main+0x210>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	705a      	strb	r2, [r3, #1]
  myAccel.fullScale=LIS302DL_FULLSCALE_2;
 80017f8:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <main+0x210>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	709a      	strb	r2, [r3, #2]
  myAccel.enableAxes=LIS302DL_XYZ_ENABLE;
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <main+0x210>)
 8001800:	2207      	movs	r2, #7
 8001802:	70da      	strb	r2, [r3, #3]
  myAccel.serialInterfaceMode=LIS302DL_SERIAL_INTERFACE_4WIRE;
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <main+0x210>)
 8001806:	2200      	movs	r2, #0
 8001808:	711a      	strb	r2, [r3, #4]
  myAccel.rebootMemory=LIS302DL_BOOT_NORMAL_MODE;
 800180a:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <main+0x210>)
 800180c:	2200      	movs	r2, #0
 800180e:	715a      	strb	r2, [r3, #5]
  myAccel.filterConfig=LIS302DL_FILTERING_NONE;
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <main+0x210>)
 8001812:	2200      	movs	r2, #0
 8001814:	719a      	strb	r2, [r3, #6]
  myAccel.interruptConfig=LIS302DL_INTERRUPT_NONE;
 8001816:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <main+0x210>)
 8001818:	2200      	movs	r2, #0
 800181a:	71da      	strb	r2, [r3, #7]
  LIS302DL_Init(&hspi1, &myAccel);
 800181c:	4965      	ldr	r1, [pc, #404]	; (80019b4 <main+0x210>)
 800181e:	4866      	ldr	r0, [pc, #408]	; (80019b8 <main+0x214>)
 8001820:	f7ff fbae 	bl	8000f80 <LIS302DL_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	margin =0.0f;
 8001824:	4b65      	ldr	r3, [pc, #404]	; (80019bc <main+0x218>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	gain =200.0f;
 800182c:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <main+0x21c>)
 800182e:	4a65      	ldr	r2, [pc, #404]	; (80019c4 <main+0x220>)
 8001830:	601a      	str	r2, [r3, #0]

	//pre-calibration

	LIS302DL_X_calibrate(4.0, -4.0);
 8001832:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8001836:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800183a:	f7ff fd2f 	bl	800129c <LIS302DL_X_calibrate>
	LIS302DL_Y_calibrate(4.0, -4.0);
 800183e:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8001842:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001846:	f7ff fd55 	bl	80012f4 <LIS302DL_Y_calibrate>
	LIS302DL_Z_calibrate(4.0, -4.0); //???
 800184a:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 800184e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001852:	f7ff fd7b 	bl	800134c <LIS302DL_Z_calibrate>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001856:	f009 fc71 	bl	800b13c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    	if (LIS302DL_PollDRDY(1))
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff fcf0 	bl	8001240 <LIS302DL_PollDRDY>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d011      	beq.n	800188a <main+0xe6>
    	{
			myData=LIS302DL_GetDataScaled();
 8001866:	f7ff fc5f 	bl	8001128 <LIS302DL_GetDataScaled>
 800186a:	eef0 6a40 	vmov.f32	s13, s0
 800186e:	eeb0 7a60 	vmov.f32	s14, s1
 8001872:	eef0 7a41 	vmov.f32	s15, s2
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <main+0x224>)
 8001878:	edc3 6a00 	vstr	s13, [r3]
 800187c:	ed83 7a01 	vstr	s14, [r3, #4]
 8001880:	edc3 7a02 	vstr	s15, [r3, #8]
			showUartTilt();
 8001884:	f000 f90c 	bl	8001aa0 <showUartTilt>
 8001888:	e001      	b.n	800188e <main+0xea>
    	}
    	else
    	{
    		showErrorRaport();
 800188a:	f000 f939 	bl	8001b00 <showErrorRaport>
    	}

    	if (myData.y > margin)
 800188e:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <main+0x224>)
 8001890:	ed93 7a01 	vldr	s14, [r3, #4]
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <main+0x218>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	dd13      	ble.n	80018cc <main+0x128>
		{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, abs(gain * myData.y));
 80018a4:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <main+0x224>)
 80018a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018aa:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <main+0x21c>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b8:	ee17 3a90 	vmov	r3, s15
 80018bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018c4:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <main+0x20c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ca:	e003      	b.n	80018d4 <main+0x130>
		}
    	else
    	{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <main+0x20c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
    	}

    	if (myData.y < -margin)
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <main+0x224>)
 80018d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <main+0x218>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eef1 7a67 	vneg.f32	s15, s15
 80018e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d513      	bpl.n	8001916 <main+0x172>
		{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, abs(gain * myData.y));
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <main+0x224>)
 80018f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <main+0x21c>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001902:	ee17 3a90 	vmov	r3, s15
 8001906:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800190a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <main+0x20c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
 8001914:	e003      	b.n	800191e <main+0x17a>
		}
    	else
    	{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <main+0x20c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	63da      	str	r2, [r3, #60]	; 0x3c
    	}


    	if (myData.x > margin)
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <main+0x224>)
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <main+0x218>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	dd13      	ble.n	800195c <main+0x1b8>
		{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, abs(gain * myData.x));
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <main+0x224>)
 8001936:	ed93 7a00 	vldr	s14, [r3]
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <main+0x21c>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001950:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <main+0x20c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	639a      	str	r2, [r3, #56]	; 0x38
 800195a:	e003      	b.n	8001964 <main+0x1c0>
		}
    	else
    	{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <main+0x20c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
    	}

    	if (myData.x < -margin)
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <main+0x224>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <main+0x218>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eef1 7a67 	vneg.f32	s15, s15
 8001974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	d513      	bpl.n	80019a6 <main+0x202>
		{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, abs(gain * myData.x));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <main+0x224>)
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <main+0x21c>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001992:	ee17 3a90 	vmov	r3, s15
 8001996:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800199a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <main+0x20c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
 80019a4:	e757      	b.n	8001856 <main+0xb2>
		}
    	else
    	{
    		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80019a6:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <main+0x20c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
    MX_USB_HOST_Process();
 80019ae:	e752      	b.n	8001856 <main+0xb2>
 80019b0:	200003e8 	.word	0x200003e8
 80019b4:	20000388 	.word	0x20000388
 80019b8:	20000390 	.word	0x20000390
 80019bc:	20000370 	.word	0x20000370
 80019c0:	20000380 	.word	0x20000380
 80019c4:	43480000 	.word	0x43480000
 80019c8:	20000374 	.word	0x20000374

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	; 0x50
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2230      	movs	r2, #48	; 0x30
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f009 fed8 	bl	800b790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <SystemClock_Config+0xcc>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <SystemClock_Config+0xcc>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a46:	2302      	movs	r3, #2
 8001a48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fb56 	bl	8005104 <HAL_RCC_OscConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a5e:	f000 f897 	bl	8001b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a62:	230f      	movs	r3, #15
 8001a64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a66:	2302      	movs	r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2105      	movs	r1, #5
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fdb7 	bl	80055f4 <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a8c:	f000 f880 	bl	8001b90 <Error_Handler>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3750      	adds	r7, #80	; 0x50
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <showUartTilt>:

/* USER CODE BEGIN 4 */
void showUartTilt(void)
{
 8001aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af04      	add	r7, sp, #16
	sprintf(uartBuffer,"x[g]=%+4.1f \ty[g]=%+4.1f \tz[g]=%+4.1f\n\r", myData.x, myData.y, myData.z);
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <showUartTilt+0x54>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd4b 	bl	8000548 <__aeabi_f2d>
 8001ab2:	4680      	mov	r8, r0
 8001ab4:	4689      	mov	r9, r1
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <showUartTilt+0x54>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd44 	bl	8000548 <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <showUartTilt+0x54>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd3d 	bl	8000548 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ad6:	e9cd 4500 	strd	r4, r5, [sp]
 8001ada:	4642      	mov	r2, r8
 8001adc:	464b      	mov	r3, r9
 8001ade:	4906      	ldr	r1, [pc, #24]	; (8001af8 <showUartTilt+0x58>)
 8001ae0:	4806      	ldr	r0, [pc, #24]	; (8001afc <showUartTilt+0x5c>)
 8001ae2:	f00a fb81 	bl	800c1e8 <siprintf>
	uartLog(uartBuffer);
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <showUartTilt+0x5c>)
 8001ae8:	f000 fb0c 	bl	8002104 <uartLog>
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af4:	20000374 	.word	0x20000374
 8001af8:	0800e4e0 	.word	0x0800e4e0
 8001afc:	2000029c 	.word	0x2000029c

08001b00 <showErrorRaport>:

void showErrorRaport(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	//no data message
	sprintf(uartBuffer,"Timeout. No data from g-sensor.\n\r");
 8001b06:	491d      	ldr	r1, [pc, #116]	; (8001b7c <showErrorRaport+0x7c>)
 8001b08:	481d      	ldr	r0, [pc, #116]	; (8001b80 <showErrorRaport+0x80>)
 8001b0a:	f00a fb6d 	bl	800c1e8 <siprintf>
	uartLog(uartBuffer);
 8001b0e:	481c      	ldr	r0, [pc, #112]	; (8001b80 <showErrorRaport+0x80>)
 8001b10:	f000 faf8 	bl	8002104 <uartLog>
	//push status registers do UART
	LIS302DL_ReadIO(LIS302DL_STATUS_ADDR, &spiBuf, 1);
 8001b14:	2201      	movs	r2, #1
 8001b16:	491b      	ldr	r1, [pc, #108]	; (8001b84 <showErrorRaport+0x84>)
 8001b18:	2027      	movs	r0, #39	; 0x27
 8001b1a:	f7ff f9eb 	bl	8000ef4 <LIS302DL_ReadIO>
	sprintf(uartBuffer,"STAUS_REG: 0x%0X\n\r", spiBuf);
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <showErrorRaport+0x84>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4918      	ldr	r1, [pc, #96]	; (8001b88 <showErrorRaport+0x88>)
 8001b26:	4816      	ldr	r0, [pc, #88]	; (8001b80 <showErrorRaport+0x80>)
 8001b28:	f00a fb5e 	bl	800c1e8 <siprintf>
	uartLog(uartBuffer);
 8001b2c:	4814      	ldr	r0, [pc, #80]	; (8001b80 <showErrorRaport+0x80>)
 8001b2e:	f000 fae9 	bl	8002104 <uartLog>
	for (int i = 0; i < 3; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	e015      	b.n	8001b64 <showErrorRaport+0x64>
	{
		LIS302DL_ReadIO(LIS302DL_CTRL_REG1_ADDR+i, &spiBuf, 1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3320      	adds	r3, #32
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2201      	movs	r2, #1
 8001b42:	4910      	ldr	r1, [pc, #64]	; (8001b84 <showErrorRaport+0x84>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f9d5 	bl	8000ef4 <LIS302DL_ReadIO>
		sprintf(uartBuffer,"CTRL_REG%d: 0x%0X\n\r", i, spiBuf);
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <showErrorRaport+0x84>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <showErrorRaport+0x8c>)
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <showErrorRaport+0x80>)
 8001b54:	f00a fb48 	bl	800c1e8 <siprintf>
		uartLog(uartBuffer);
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <showErrorRaport+0x80>)
 8001b5a:	f000 fad3 	bl	8002104 <uartLog>
	for (int i = 0; i < 3; i++)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3301      	adds	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	dde6      	ble.n	8001b38 <showErrorRaport+0x38>
	}
	HAL_Delay(1000);
 8001b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b6e:	f000 fbf7 	bl	8002360 <HAL_Delay>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	0800e508 	.word	0x0800e508
 8001b80:	2000029c 	.word	0x2000029c
 8001b84:	2000036c 	.word	0x2000036c
 8001b88:	0800e52c 	.word	0x0800e52c
 8001b8c:	0800e540 	.word	0x0800e540

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <Error_Handler+0x8>
	...

08001b9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <MX_SPI1_Init+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bd0:	2238      	movs	r2, #56	; 0x38
 8001bd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001be8:	220a      	movs	r2, #10
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bee:	f004 f83d 	bl	8005c6c <HAL_SPI_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f7ff ffca 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000390 	.word	0x20000390
 8001c04:	40013000 	.word	0x40013000

08001c08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_SPI_MspInit+0x84>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12b      	bne.n	8001c82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_SPI_MspInit+0x88>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_SPI_MspInit+0x88>)
 8001c34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_SPI_MspInit+0x88>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_SPI_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <HAL_SPI_MspInit+0x88>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_SPI_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c62:	23e0      	movs	r3, #224	; 0xe0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c72:	2305      	movs	r3, #5
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <HAL_SPI_MspInit+0x8c>)
 8001c7e:	f000 fd37 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40013000 	.word	0x40013000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 fc36 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 faf4 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <USART2_IRQHandler+0x10>)
 8001d42:	f005 fca1 	bl	8007688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000430 	.word	0x20000430

08001d50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <OTG_FS_IRQHandler+0x10>)
 8001d56:	f001 f8eb 	bl	8002f30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000850 	.word	0x20000850

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_kill>:

int _kill(int pid, int sig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d7e:	f009 fcbf 	bl	800b700 <__errno>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2216      	movs	r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
	return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_exit>:

void _exit (int status)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffe7 	bl	8001d74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001da6:	e7fe      	b.n	8001da6 <_exit+0x12>

08001da8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e00a      	b.n	8001dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dba:	f3af 8000 	nop.w
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf0      	blt.n	8001dba <_read+0x12>
	}

return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e009      	b.n	8001e08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	60ba      	str	r2, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf1      	blt.n	8001df4 <_write+0x12>
	}
	return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_close>:

int _close(int file)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	return -1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e42:	605a      	str	r2, [r3, #4]
	return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_isatty>:

int _isatty(int file)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f009 fc24 	bl	800b700 <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20020000 	.word	0x20020000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	2000028c 	.word	0x2000028c
 8001eec:	20000b68 	.word	0x20000b68

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	615a      	str	r2, [r3, #20]
 8001f42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f46:	4a40      	ldr	r2, [pc, #256]	; (8002048 <MX_TIM4_Init+0x134>)
 8001f48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f4c:	f240 3247 	movw	r2, #839	; 0x347
 8001f50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f52:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001f58:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f66:	4b37      	ldr	r3, [pc, #220]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f6c:	4835      	ldr	r0, [pc, #212]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f6e:	f004 fc25 	bl	80067bc <HAL_TIM_Base_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f78:	f7ff fe0a 	bl	8001b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f86:	4619      	mov	r1, r3
 8001f88:	482e      	ldr	r0, [pc, #184]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f8a:	f004 fe49 	bl	8006c20 <HAL_TIM_ConfigClockSource>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f94:	f7ff fdfc 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f98:	482a      	ldr	r0, [pc, #168]	; (8002044 <MX_TIM4_Init+0x130>)
 8001f9a:	f004 fc5e 	bl	800685a <HAL_TIM_PWM_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001fa4:	f7ff fdf4 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4823      	ldr	r0, [pc, #140]	; (8002044 <MX_TIM4_Init+0x130>)
 8001fb8:	f005 fa0a 	bl	80073d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001fc2:	f7ff fde5 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc6:	2360      	movs	r3, #96	; 0x60
 8001fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 299;
 8001fca:	f240 132b 	movw	r3, #299	; 0x12b
 8001fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4819      	ldr	r0, [pc, #100]	; (8002044 <MX_TIM4_Init+0x130>)
 8001fe0:	f004 fd5c 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001fea:	f7ff fdd1 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4812      	ldr	r0, [pc, #72]	; (8002044 <MX_TIM4_Init+0x130>)
 8001ffa:	f004 fd4f 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8002004:	f7ff fdc4 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2208      	movs	r2, #8
 800200c:	4619      	mov	r1, r3
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_TIM4_Init+0x130>)
 8002010:	f004 fd44 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 800201a:	f7ff fdb9 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	220c      	movs	r2, #12
 8002022:	4619      	mov	r1, r3
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <MX_TIM4_Init+0x130>)
 8002026:	f004 fd39 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8002030:	f7ff fdae 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <MX_TIM4_Init+0x130>)
 8002036:	f000 f82b 	bl	8002090 <HAL_TIM_MspPostInit>

}
 800203a:	bf00      	nop
 800203c:	3738      	adds	r7, #56	; 0x38
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200003e8 	.word	0x200003e8
 8002048:	40000800 	.word	0x40000800

0800204c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_TIM_Base_MspInit+0x3c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10d      	bne.n	800207a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_TIM_Base_MspInit+0x40>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_TIM_Base_MspInit+0x40>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_TIM_Base_MspInit+0x40>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40000800 	.word	0x40000800
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_TIM_MspPostInit+0x68>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11e      	bne.n	80020f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_TIM_MspPostInit+0x6c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIM_MspPostInit+0x6c>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_MspPostInit+0x6c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_TIM_MspPostInit+0x70>)
 80020ec:	f000 fb00 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020c00 	.word	0x40020c00

08002104 <uartLog>:
#include "tools.h"
#include "string.h"
#include "usart.h"

void uartLog(char *message)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

	int lenght = strlen(message);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe f85f 	bl	80001d0 <strlen>
 8002112:	4603      	mov	r3, r0
 8002114:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, lenght, 1000);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	b29a      	uxth	r2, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4803      	ldr	r0, [pc, #12]	; (8002130 <uartLog+0x2c>)
 8002122:	f005 fa1e 	bl	8007562 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 1000);

}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000430 	.word	0x20000430

08002134 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_USART2_UART_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_USART2_UART_Init+0x4c>)
 800216c:	f005 f9ac 	bl	80074c8 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002176:	f7ff fd0b 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000430 	.word	0x20000430
 8002184:	40004400 	.word	0x40004400

08002188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_UART_MspInit+0x94>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d133      	bne.n	8002212 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_UART_MspInit+0x98>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_UART_MspInit+0x98>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_UART_MspInit+0x98>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_UART_MspInit+0x98>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_UART_MspInit+0x98>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_UART_MspInit+0x98>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021e2:	230c      	movs	r3, #12
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f2:	2307      	movs	r3, #7
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <HAL_UART_MspInit+0x9c>)
 80021fe:	f000 fa77 	bl	80026f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2026      	movs	r0, #38	; 0x26
 8002208:	f000 f9a9 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800220c:	2026      	movs	r0, #38	; 0x26
 800220e:	f000 f9c2 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40004400 	.word	0x40004400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002252:	f7ff fe4d 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f009 fa59 	bl	800b70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7ff faa3 	bl	80017a4 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800226c:	0800e964 	.word	0x0800e964
  ldr r2, =_sbss
 8002270:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002274:	20000b64 	.word	0x20000b64

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f94f 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fcf2 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f967 	bl	80025b2 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f92f 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000010 	.word	0x20000010
 8002318:	20000018 	.word	0x20000018
 800231c:	20000014 	.word	0x20000014

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000018 	.word	0x20000018
 8002344:	20000474 	.word	0x20000474

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000474 	.word	0x20000474

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000018 	.word	0x20000018

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff feb6 	bl	8002348 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d008      	beq.n	80025fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e052      	b.n	80026a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0216 	bic.w	r2, r2, #22
 800260a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <HAL_DMA_Abort+0x62>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0208 	bic.w	r2, r2, #8
 800263a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264c:	e013      	b.n	8002676 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264e:	f7ff fe7b 	bl	8002348 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b05      	cmp	r3, #5
 800265a:	d90c      	bls.n	8002676 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e015      	b.n	80026a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e4      	bne.n	800264e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	223f      	movs	r2, #63	; 0x3f
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d004      	beq.n	80026c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e00c      	b.n	80026e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2205      	movs	r2, #5
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e16b      	b.n	80029e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	f040 815a 	bne.w	80029de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d005      	beq.n	8002742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273e:	2b02      	cmp	r3, #2
 8002740:	d130      	bne.n	80027a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0201 	and.w	r2, r3, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d017      	beq.n	80027e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d123      	bne.n	8002834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80b4 	beq.w	80029de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b60      	ldr	r3, [pc, #384]	; (80029fc <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a5f      	ldr	r2, [pc, #380]	; (80029fc <HAL_GPIO_Init+0x30c>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_GPIO_Init+0x30c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_GPIO_Init+0x310>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_GPIO_Init+0x314>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <HAL_GPIO_Init+0x226>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <HAL_GPIO_Init+0x318>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x222>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a50      	ldr	r2, [pc, #320]	; (8002a0c <HAL_GPIO_Init+0x31c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x21e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4f      	ldr	r2, [pc, #316]	; (8002a10 <HAL_GPIO_Init+0x320>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x21a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4e      	ldr	r2, [pc, #312]	; (8002a14 <HAL_GPIO_Init+0x324>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x216>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4d      	ldr	r2, [pc, #308]	; (8002a18 <HAL_GPIO_Init+0x328>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x212>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x20e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4b      	ldr	r2, [pc, #300]	; (8002a20 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x20a>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00e      	b.n	8002918 <HAL_GPIO_Init+0x228>
 80028fa:	2308      	movs	r3, #8
 80028fc:	e00c      	b.n	8002918 <HAL_GPIO_Init+0x228>
 80028fe:	2306      	movs	r3, #6
 8002900:	e00a      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002902:	2305      	movs	r3, #5
 8002904:	e008      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002906:	2304      	movs	r3, #4
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x228>
 800290a:	2303      	movs	r3, #3
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x228>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x228>
 8002916:	2300      	movs	r3, #0
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f002 0203 	and.w	r2, r2, #3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4093      	lsls	r3, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002928:	4935      	ldr	r1, [pc, #212]	; (8002a00 <HAL_GPIO_Init+0x310>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_GPIO_Init+0x334>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800295a:	4a32      	ldr	r2, [pc, #200]	; (8002a24 <HAL_GPIO_Init+0x334>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_GPIO_Init+0x334>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002984:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <HAL_GPIO_Init+0x334>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <HAL_GPIO_Init+0x334>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_GPIO_Init+0x334>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_GPIO_Init+0x334>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_GPIO_Init+0x334>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	f67f ae90 	bls.w	800270c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40021c00 	.word	0x40021c00
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5c:	b08f      	sub	sp, #60	; 0x3c
 8002a5e:	af0a      	add	r7, sp, #40	; 0x28
 8002a60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e054      	b.n	8002b16 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f008 fb90 	bl	800b1ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 fce6 	bl	800847c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	687e      	ldr	r6, [r7, #4]
 8002ab8:	466d      	mov	r5, sp
 8002aba:	f106 0410 	add.w	r4, r6, #16
 8002abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ace:	1d33      	adds	r3, r6, #4
 8002ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f005 fc60 	bl	8008398 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 fcdd 	bl	800849e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	687e      	ldr	r6, [r7, #4]
 8002aec:	466d      	mov	r5, sp
 8002aee:	f106 0410 	add.w	r4, r6, #16
 8002af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002afe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b02:	1d33      	adds	r3, r6, #4
 8002b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	f005 fe44 	bl	8008794 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b1e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b1e:	b590      	push	{r4, r7, lr}
 8002b20:	b089      	sub	sp, #36	; 0x24
 8002b22:	af04      	add	r7, sp, #16
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	4608      	mov	r0, r1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	70fb      	strb	r3, [r7, #3]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70bb      	strb	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_HCD_HC_Init+0x28>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e076      	b.n	8002c34 <HAL_HCD_HC_Init+0x116>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333d      	adds	r3, #61	; 0x3d
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3338      	adds	r3, #56	; 0x38
 8002b6e:	787a      	ldrb	r2, [r7, #1]
 8002b70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3340      	adds	r3, #64	; 0x40
 8002b80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b82:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3339      	adds	r3, #57	; 0x39
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ba8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	78ba      	ldrb	r2, [r7, #2]
 8002bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb2:	b2d0      	uxtb	r0, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333a      	adds	r3, #58	; 0x3a
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002bc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da09      	bge.n	8002be0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	333b      	adds	r3, #59	; 0x3b
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e008      	b.n	8002bf2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	333b      	adds	r3, #59	; 0x3b
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333c      	adds	r3, #60	; 0x3c
 8002c00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c04:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	787c      	ldrb	r4, [r7, #1]
 8002c0c:	78ba      	ldrb	r2, [r7, #2]
 8002c0e:	78f9      	ldrb	r1, [r7, #3]
 8002c10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c12:	9302      	str	r3, [sp, #8]
 8002c14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4623      	mov	r3, r4
 8002c22:	f005 ff31 	bl	8008a88 <USB_HC_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_HCD_HC_Halt+0x1e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e00f      	b.n	8002c7a <HAL_HCD_HC_Halt+0x3e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f006 f96d 	bl	8008f4a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	70fb      	strb	r3, [r7, #3]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70bb      	strb	r3, [r7, #2]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	333b      	adds	r3, #59	; 0x3b
 8002cac:	78ba      	ldrb	r2, [r7, #2]
 8002cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	333f      	adds	r3, #63	; 0x3f
 8002cbe:	787a      	ldrb	r2, [r7, #1]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cc2:	7c3b      	ldrb	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d112      	bne.n	8002cee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3342      	adds	r3, #66	; 0x42
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333d      	adds	r3, #61	; 0x3d
 8002ce8:	7f3a      	ldrb	r2, [r7, #28]
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e008      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3342      	adds	r3, #66	; 0x42
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	f200 80c6 	bhi.w	8002e94 <HAL_HCD_HC_SubmitRequest+0x210>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002e81 	.word	0x08002e81
 8002d18:	08002d85 	.word	0x08002d85
 8002d1c:	08002e03 	.word	0x08002e03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d20:	7c3b      	ldrb	r3, [r7, #16]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	f040 80b8 	bne.w	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>
 8002d28:	78bb      	ldrb	r3, [r7, #2]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80b4 	bne.w	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d30:	8b3b      	ldrh	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3355      	adds	r3, #85	; 0x55
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3355      	adds	r3, #85	; 0x55
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3342      	adds	r3, #66	; 0x42
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d6e:	e093      	b.n	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3342      	adds	r3, #66	; 0x42
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
      break;
 8002d82:	e089      	b.n	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d84:	78bb      	ldrb	r3, [r7, #2]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11d      	bne.n	8002dc6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3355      	adds	r3, #85	; 0x55
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3342      	adds	r3, #66	; 0x42
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002db0:	e073      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3342      	adds	r3, #66	; 0x42
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	701a      	strb	r2, [r3, #0]
      break;
 8002dc4:	e069      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3342      	adds	r3, #66	; 0x42
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
      break;
 8002dec:	e055      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3342      	adds	r3, #66	; 0x42
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
      break;
 8002e00:	e04b      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e02:	78bb      	ldrb	r3, [r7, #2]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11d      	bne.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3355      	adds	r3, #85	; 0x55
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3342      	adds	r3, #66	; 0x42
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e2e:	e034      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3342      	adds	r3, #66	; 0x42
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
      break;
 8002e42:	e02a      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3354      	adds	r3, #84	; 0x54
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3342      	adds	r3, #66	; 0x42
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e016      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3342      	adds	r3, #66	; 0x42
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3342      	adds	r3, #66	; 0x42
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e98:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3344      	adds	r3, #68	; 0x44
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	8b3a      	ldrh	r2, [r7, #24]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	fb00 f303 	mul.w	r3, r0, r3
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3360      	adds	r3, #96	; 0x60
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3339      	adds	r3, #57	; 0x39
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3361      	adds	r3, #97	; 0x61
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	222c      	movs	r2, #44	; 0x2c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	3338      	adds	r3, #56	; 0x38
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	18d1      	adds	r1, r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f005 fec0 	bl	8008ca4 <USB_HC_StartXfer>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f005 fbe3 	bl	8008712 <USB_GetMode>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f040 80f6 	bne.w	8003140 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f005 fbc7 	bl	80086ec <USB_ReadInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80ec 	beq.w	800313e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 fbbe 	bl	80086ec <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f7a:	d104      	bne.n	8002f86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fbae 	bl	80086ec <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9a:	d104      	bne.n	8002fa6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f005 fb9e 	bl	80086ec <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fba:	d104      	bne.n	8002fc6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f005 fb8e 	bl	80086ec <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d103      	bne.n	8002fe2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f005 fb80 	bl	80086ec <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff6:	d11c      	bne.n	8003032 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003000:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003012:	2110      	movs	r1, #16
 8003014:	6938      	ldr	r0, [r7, #16]
 8003016:	f005 fa8f 	bl	8008538 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f005 fab0 	bl	8008580 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f005 fc68 	bl	80088fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f008 f93b 	bl	800b2a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f005 fb58 	bl	80086ec <USB_ReadInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003042:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003046:	d102      	bne.n	800304e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 fa03 	bl	8004454 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f005 fb4a 	bl	80086ec <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b08      	cmp	r3, #8
 8003060:	d106      	bne.n	8003070 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f008 f904 	bl	800b270 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2208      	movs	r2, #8
 800306e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f005 fb39 	bl	80086ec <USB_ReadInterrupts>
 800307a:	4603      	mov	r3, r0
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	d101      	bne.n	8003088 <HAL_HCD_IRQHandler+0x158>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_HCD_IRQHandler+0x15a>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0210 	bic.w	r2, r2, #16
 800309c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f001 f906 	bl	80042b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0210 	orr.w	r2, r2, #16
 80030b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 fb17 	bl	80086ec <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c8:	d13a      	bne.n	8003140 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f005 ff2a 	bl	8008f28 <USB_HC_ReadInterrupt>
 80030d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e025      	b.n	8003128 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	d106      	bne.n	8003116 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8ab 	bl	800326a <HCD_HC_IN_IRQHandler>
 8003114:	e005      	b.n	8003122 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fcc6 	bl	8003aae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3d4      	bcc.n	80030dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	615a      	str	r2, [r3, #20]
 800313c:	e000      	b.n	8003140 <HAL_HCD_IRQHandler+0x210>
      return;
 800313e:	bf00      	nop
    }
  }
}
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_HCD_Start+0x16>
 8003158:	2302      	movs	r3, #2
 800315a:	e013      	b.n	8003184 <HAL_HCD_Start+0x3e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f005 fc2a 	bl	80089c4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f005 f970 	bl	800845a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_HCD_Stop+0x16>
 800319e:	2302      	movs	r3, #2
 80031a0:	e00d      	b.n	80031be <HAL_HCD_Stop+0x32>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f006 f824 	bl	80091fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f005 fbcc 	bl	8008970 <USB_ResetPort>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3360      	adds	r3, #96	; 0x60
 80031fc:	781b      	ldrb	r3, [r3, #0]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3350      	adds	r3, #80	; 0x50
 8003224:	681b      	ldr	r3, [r3, #0]
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f005 fc10 	bl	8008a64 <USB_GetCurrentFrame>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f005 fbeb 	bl	8008a36 <USB_GetHostSpeed>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d119      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	461a      	mov	r2, r3
 80032a8:	2304      	movs	r3, #4
 80032aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	60d3      	str	r3, [r2, #12]
 80032cc:	e101      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e4:	d12b      	bne.n	800333e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3361      	adds	r3, #97	; 0x61
 8003308:	2207      	movs	r2, #7
 800330a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	440a      	add	r2, r1
 8003322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fe07 	bl	8008f4a <USB_HC_Halt>
 800333c:	e0c9      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d109      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	461a      	mov	r2, r3
 8003362:	2320      	movs	r3, #32
 8003364:	6093      	str	r3, [r2, #8]
 8003366:	e0b4      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b08      	cmp	r3, #8
 800337c:	d133      	bne.n	80033e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	440a      	add	r2, r1
 8003394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3361      	adds	r3, #97	; 0x61
 80033ac:	2205      	movs	r2, #5
 80033ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2310      	movs	r3, #16
 80033c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	2308      	movs	r3, #8
 80033d2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 fdb3 	bl	8008f4a <USB_HC_Halt>
 80033e4:	e075      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d134      	bne.n	8003468 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	0151      	lsls	r1, r2, #5
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	440a      	add	r2, r1
 8003414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	3361      	adds	r3, #97	; 0x61
 800342c:	2208      	movs	r2, #8
 800342e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2310      	movs	r3, #16
 8003440:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	461a      	mov	r2, r3
 8003450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003454:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f005 fd72 	bl	8008f4a <USB_HC_Halt>
 8003466:	e034      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d129      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	0151      	lsls	r1, r2, #5
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	440a      	add	r2, r1
 8003494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3361      	adds	r3, #97	; 0x61
 80034ac:	2206      	movs	r2, #6
 80034ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f005 fd45 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	461a      	mov	r2, r3
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d122      	bne.n	8003530 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f005 fd18 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	461a      	mov	r2, r3
 8003528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800352e:	e2ba      	b.n	8003aa6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	f040 811b 	bne.w	800377e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d019      	beq.n	8003584 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	3348      	adds	r3, #72	; 0x48
 800355e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0159      	lsls	r1, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	440b      	add	r3, r1
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	202c      	movs	r0, #44	; 0x2c
 800357a:	fb00 f303 	mul.w	r3, r0, r3
 800357e:	440b      	add	r3, r1
 8003580:	3350      	adds	r3, #80	; 0x50
 8003582:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	335c      	adds	r3, #92	; 0x5c
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	2301      	movs	r3, #1
 80035b8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	333f      	adds	r3, #63	; 0x3f
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	333f      	adds	r3, #63	; 0x3f
 80035dc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d121      	bne.n	8003626 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f005 fc9c 	bl	8008f4a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	461a      	mov	r2, r3
 8003620:	2310      	movs	r3, #16
 8003622:	6093      	str	r3, [r2, #8]
 8003624:	e066      	b.n	80036f4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333f      	adds	r3, #63	; 0x3f
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d127      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	440a      	add	r2, r1
 8003650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003658:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3360      	adds	r3, #96	; 0x60
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	b2d9      	uxtb	r1, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	202c      	movs	r0, #44	; 0x2c
 8003676:	fb00 f303 	mul.w	r3, r0, r3
 800367a:	4413      	add	r3, r2
 800367c:	3360      	adds	r3, #96	; 0x60
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f007 fe1e 	bl	800b2c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003688:	e034      	b.n	80036f4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	333f      	adds	r3, #63	; 0x3f
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d12a      	bne.n	80036f4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3360      	adds	r3, #96	; 0x60
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3354      	adds	r3, #84	; 0x54
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2d8      	uxtb	r0, r3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	3354      	adds	r3, #84	; 0x54
 80036d4:	4602      	mov	r2, r0
 80036d6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	b2d9      	uxtb	r1, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	202c      	movs	r0, #44	; 0x2c
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	3360      	adds	r3, #96	; 0x60
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f007 fde8 	bl	800b2c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d12b      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	202c      	movs	r0, #44	; 0x2c
 8003712:	fb00 f202 	mul.w	r2, r0, r2
 8003716:	440a      	add	r2, r1
 8003718:	3240      	adds	r2, #64	; 0x40
 800371a:	8812      	ldrh	r2, [r2, #0]
 800371c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 81be 	beq.w	8003aa6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3354      	adds	r3, #84	; 0x54
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3354      	adds	r3, #84	; 0x54
 800374e:	4602      	mov	r2, r0
 8003750:	701a      	strb	r2, [r3, #0]
}
 8003752:	e1a8      	b.n	8003aa6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3354      	adds	r3, #84	; 0x54
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2d8      	uxtb	r0, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	3354      	adds	r3, #84	; 0x54
 8003778:	4602      	mov	r2, r0
 800377a:	701a      	strb	r2, [r3, #0]
}
 800377c:	e193      	b.n	8003aa6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	f040 8106 	bne.w	80039a2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b0:	f023 0302 	bic.w	r3, r3, #2
 80037b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	3361      	adds	r3, #97	; 0x61
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d109      	bne.n	80037de <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3360      	adds	r3, #96	; 0x60
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e0c9      	b.n	8003972 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3361      	adds	r3, #97	; 0x61
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d109      	bne.n	8003806 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3360      	adds	r3, #96	; 0x60
 8003800:	2205      	movs	r2, #5
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e0b5      	b.n	8003972 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3361      	adds	r3, #97	; 0x61
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d009      	beq.n	800382e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3361      	adds	r3, #97	; 0x61
 8003828:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800382a:	2b08      	cmp	r3, #8
 800382c:	d150      	bne.n	80038d0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	335c      	adds	r3, #92	; 0x5c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	202c      	movs	r0, #44	; 0x2c
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	440b      	add	r3, r1
 800384c:	335c      	adds	r3, #92	; 0x5c
 800384e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	335c      	adds	r3, #92	; 0x5c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d912      	bls.n	800388a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	335c      	adds	r3, #92	; 0x5c
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3360      	adds	r3, #96	; 0x60
 8003884:	2204      	movs	r2, #4
 8003886:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003888:	e073      	b.n	8003972 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3360      	adds	r3, #96	; 0x60
 8003898:	2202      	movs	r2, #2
 800389a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038b2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038ba:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038ce:	e050      	b.n	8003972 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3361      	adds	r3, #97	; 0x61
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d122      	bne.n	800392a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3360      	adds	r3, #96	; 0x60
 80038f2:	2202      	movs	r2, #2
 80038f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800390c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003914:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e023      	b.n	8003972 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	3361      	adds	r3, #97	; 0x61
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b07      	cmp	r3, #7
 800393c:	d119      	bne.n	8003972 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	335c      	adds	r3, #92	; 0x5c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	202c      	movs	r0, #44	; 0x2c
 8003956:	fb00 f303 	mul.w	r3, r0, r3
 800395a:	440b      	add	r3, r1
 800395c:	335c      	adds	r3, #92	; 0x5c
 800395e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3360      	adds	r3, #96	; 0x60
 800396e:	2204      	movs	r2, #4
 8003970:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	2302      	movs	r3, #2
 8003982:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	b2d9      	uxtb	r1, r3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	202c      	movs	r0, #44	; 0x2c
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	4413      	add	r3, r2
 8003994:	3360      	adds	r3, #96	; 0x60
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f007 fc92 	bl	800b2c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039a0:	e081      	b.n	8003aa6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d176      	bne.n	8003aa6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	333f      	adds	r3, #63	; 0x3f
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d121      	bne.n	8003a10 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	335c      	adds	r3, #92	; 0x5c
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f005 fa9e 	bl	8008f4a <USB_HC_Halt>
 8003a0e:	e041      	b.n	8003a94 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	333f      	adds	r3, #63	; 0x3f
 8003a32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d12d      	bne.n	8003a94 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	335c      	adds	r3, #92	; 0x5c
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d120      	bne.n	8003a94 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3361      	adds	r3, #97	; 0x61
 8003a60:	2203      	movs	r2, #3
 8003a62:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f005 fa5b 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	6093      	str	r3, [r2, #8]
}
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b088      	sub	sp, #32
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d119      	bne.n	8003b12 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	461a      	mov	r2, r3
 8003aec:	2304      	movs	r3, #4
 8003aee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b0a:	f043 0302 	orr.w	r3, r3, #2
 8003b0e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003b10:	e3ca      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d13e      	bne.n	8003ba6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	2320      	movs	r3, #32
 8003b38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	333d      	adds	r3, #61	; 0x3d
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	f040 83ac 	bne.w	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	333d      	adds	r3, #61	; 0x3d
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3360      	adds	r3, #96	; 0x60
 8003b70:	2202      	movs	r2, #2
 8003b72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f005 f9d3 	bl	8008f4a <USB_HC_Halt>
}
 8003ba4:	e380      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbc:	d122      	bne.n	8003c04 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f005 f9ae 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c00:	6093      	str	r3, [r2, #8]
}
 8003c02:	e351      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d150      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	335c      	adds	r3, #92	; 0x5c
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d111      	bne.n	8003c66 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	333d      	adds	r3, #61	; 0x3d
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c80:	f043 0302 	orr.w	r3, r3, #2
 8003c84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f005 f95a 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3361      	adds	r3, #97	; 0x61
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
}
 8003cba:	e2f5      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d13c      	bne.n	8003d4c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	3361      	adds	r3, #97	; 0x61
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	333d      	adds	r3, #61	; 0x3d
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	335c      	adds	r3, #92	; 0x5c
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f005 f909 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d44:	461a      	mov	r2, r3
 8003d46:	2340      	movs	r3, #64	; 0x40
 8003d48:	6093      	str	r3, [r2, #8]
}
 8003d4a:	e2ad      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d12a      	bne.n	8003db8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2308      	movs	r3, #8
 8003d72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f005 f8d3 	bl	8008f4a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	3361      	adds	r3, #97	; 0x61
 8003db2:	2205      	movs	r2, #5
 8003db4:	701a      	strb	r2, [r3, #0]
}
 8003db6:	e277      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d150      	bne.n	8003e70 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	335c      	adds	r3, #92	; 0x5c
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3361      	adds	r3, #97	; 0x61
 8003dee:	2203      	movs	r2, #3
 8003df0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	212c      	movs	r1, #44	; 0x2c
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	333d      	adds	r3, #61	; 0x3d
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d112      	bne.n	8003e2c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	212c      	movs	r1, #44	; 0x2c
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	333d      	adds	r3, #61	; 0x3d
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f005 f877 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	6093      	str	r3, [r2, #8]
}
 8003e6e:	e21b      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d174      	bne.n	8003f70 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d121      	bne.n	8003ed2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3361      	adds	r3, #97	; 0x61
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eba:	f043 0302 	orr.w	r3, r3, #2
 8003ebe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 f83d 	bl	8008f4a <USB_HC_Halt>
 8003ed0:	e044      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	335c      	adds	r3, #92	; 0x5c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	202c      	movs	r0, #44	; 0x2c
 8003eea:	fb00 f303 	mul.w	r3, r0, r3
 8003eee:	440b      	add	r3, r1
 8003ef0:	335c      	adds	r3, #92	; 0x5c
 8003ef2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	335c      	adds	r3, #92	; 0x5c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d920      	bls.n	8003f4a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	335c      	adds	r3, #92	; 0x5c
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3360      	adds	r3, #96	; 0x60
 8003f28:	2204      	movs	r2, #4
 8003f2a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	b2d9      	uxtb	r1, r3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	202c      	movs	r0, #44	; 0x2c
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3360      	adds	r3, #96	; 0x60
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f007 f9be 	bl	800b2c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f48:	e008      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3360      	adds	r3, #96	; 0x60
 8003f58:	2202      	movs	r2, #2
 8003f5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	6093      	str	r3, [r2, #8]
}
 8003f6e:	e19b      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f86:	d134      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 ffc9 	bl	8008f4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3361      	adds	r3, #97	; 0x61
 8003fec:	2208      	movs	r2, #8
 8003fee:	701a      	strb	r2, [r3, #0]
}
 8003ff0:	e15a      	b.n	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	f040 814f 	bne.w	80042a8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	440a      	add	r2, r1
 8004020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004024:	f023 0302 	bic.w	r3, r3, #2
 8004028:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	3361      	adds	r3, #97	; 0x61
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d17d      	bne.n	800413a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3360      	adds	r3, #96	; 0x60
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	333f      	adds	r3, #63	; 0x3f
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d00a      	beq.n	800407a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	333f      	adds	r3, #63	; 0x3f
 8004072:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004074:	2b03      	cmp	r3, #3
 8004076:	f040 8100 	bne.w	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d113      	bne.n	80040aa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3355      	adds	r3, #85	; 0x55
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	f083 0301 	eor.w	r3, r3, #1
 8004096:	b2d8      	uxtb	r0, r3
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	3355      	adds	r3, #85	; 0x55
 80040a6:	4602      	mov	r2, r0
 80040a8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f040 80e3 	bne.w	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	334c      	adds	r3, #76	; 0x4c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80d8 	beq.w	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	334c      	adds	r3, #76	; 0x4c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	202c      	movs	r0, #44	; 0x2c
 80040e0:	fb00 f202 	mul.w	r2, r0, r2
 80040e4:	440a      	add	r2, r1
 80040e6:	3240      	adds	r2, #64	; 0x40
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	3b01      	subs	r3, #1
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	202c      	movs	r0, #44	; 0x2c
 80040f4:	fb00 f202 	mul.w	r2, r0, r2
 80040f8:	440a      	add	r2, r1
 80040fa:	3240      	adds	r2, #64	; 0x40
 80040fc:	8812      	ldrh	r2, [r2, #0]
 80040fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80b5 	beq.w	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	3355      	adds	r3, #85	; 0x55
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f083 0301 	eor.w	r3, r3, #1
 8004124:	b2d8      	uxtb	r0, r3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3355      	adds	r3, #85	; 0x55
 8004134:	4602      	mov	r2, r0
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e09f      	b.n	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3361      	adds	r3, #97	; 0x61
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d109      	bne.n	8004162 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3360      	adds	r3, #96	; 0x60
 800415c:	2202      	movs	r2, #2
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e08b      	b.n	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	3361      	adds	r3, #97	; 0x61
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d109      	bne.n	800418a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3360      	adds	r3, #96	; 0x60
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e077      	b.n	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	3361      	adds	r3, #97	; 0x61
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d109      	bne.n	80041b2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3360      	adds	r3, #96	; 0x60
 80041ac:	2205      	movs	r2, #5
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e063      	b.n	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	3361      	adds	r3, #97	; 0x61
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d009      	beq.n	80041da <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	3361      	adds	r3, #97	; 0x61
 80041d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d14f      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	335c      	adds	r3, #92	; 0x5c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	202c      	movs	r0, #44	; 0x2c
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	440b      	add	r3, r1
 80041f8:	335c      	adds	r3, #92	; 0x5c
 80041fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	335c      	adds	r3, #92	; 0x5c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d912      	bls.n	8004236 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	335c      	adds	r3, #92	; 0x5c
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3360      	adds	r3, #96	; 0x60
 8004230:	2204      	movs	r2, #4
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e021      	b.n	800427a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3360      	adds	r3, #96	; 0x60
 8004244:	2202      	movs	r2, #2
 8004246:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800425e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004266:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	461a      	mov	r2, r3
 8004288:	2302      	movs	r3, #2
 800428a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	b2d9      	uxtb	r1, r3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	202c      	movs	r0, #44	; 0x2c
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	4413      	add	r3, r2
 800429c:	3360      	adds	r3, #96	; 0x60
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f007 f80e 	bl	800b2c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	0c5b      	lsrs	r3, r3, #17
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	091b      	lsrs	r3, r3, #4
 80042e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d004      	beq.n	80042f6 <HCD_RXQLVL_IRQHandler+0x46>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	f000 80a9 	beq.w	8004446 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042f4:	e0aa      	b.n	800444c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a6 	beq.w	800444a <HCD_RXQLVL_IRQHandler+0x19a>
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	3344      	adds	r3, #68	; 0x44
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 809b 	beq.w	800444a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3350      	adds	r3, #80	; 0x50
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	441a      	add	r2, r3
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	202c      	movs	r0, #44	; 0x2c
 800432e:	fb00 f303 	mul.w	r3, r0, r3
 8004332:	440b      	add	r3, r1
 8004334:	334c      	adds	r3, #76	; 0x4c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d87a      	bhi.n	8004432 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3344      	adds	r3, #68	; 0x44
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	b292      	uxth	r2, r2
 8004354:	4619      	mov	r1, r3
 8004356:	f004 f971 	bl	800863c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	3344      	adds	r3, #68	; 0x44
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	441a      	add	r2, r3
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	202c      	movs	r0, #44	; 0x2c
 8004374:	fb00 f303 	mul.w	r3, r0, r3
 8004378:	440b      	add	r3, r1
 800437a:	3344      	adds	r3, #68	; 0x44
 800437c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	3350      	adds	r3, #80	; 0x50
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	441a      	add	r2, r3
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	202c      	movs	r0, #44	; 0x2c
 8004398:	fb00 f303 	mul.w	r3, r0, r3
 800439c:	440b      	add	r3, r1
 800439e:	3350      	adds	r3, #80	; 0x50
 80043a0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	0cdb      	lsrs	r3, r3, #19
 80043b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3340      	adds	r3, #64	; 0x40
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d13c      	bne.n	800444a <HCD_RXQLVL_IRQHandler+0x19a>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d039      	beq.n	800444a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043ec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043f4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	212c      	movs	r1, #44	; 0x2c
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	3354      	adds	r3, #84	; 0x54
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	f083 0301 	eor.w	r3, r3, #1
 800441c:	b2d8      	uxtb	r0, r3
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3354      	adds	r3, #84	; 0x54
 800442c:	4602      	mov	r2, r0
 800442e:	701a      	strb	r2, [r3, #0]
      break;
 8004430:	e00b      	b.n	800444a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3360      	adds	r3, #96	; 0x60
 8004440:	2204      	movs	r2, #4
 8004442:	701a      	strb	r2, [r3, #0]
      break;
 8004444:	e001      	b.n	800444a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800444a:	bf00      	nop
  }
}
 800444c:	bf00      	nop
 800444e:	3728      	adds	r7, #40	; 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004480:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d10b      	bne.n	80044a4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f006 fef8 	bl	800b28c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d132      	bne.n	8004514 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f043 0308 	orr.w	r3, r3, #8
 80044b4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d126      	bne.n	800450e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d113      	bne.n	80044f0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044d2:	d106      	bne.n	80044e2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f004 fa0e 	bl	80088fc <USB_InitFSLSPClkSel>
 80044e0:	e011      	b.n	8004506 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f004 fa07 	bl	80088fc <USB_InitFSLSPClkSel>
 80044ee:	e00a      	b.n	8004506 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044fe:	461a      	mov	r2, r3
 8004500:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004504:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f006 feea 	bl	800b2e0 <HAL_HCD_PortEnabled_Callback>
 800450c:	e002      	b.n	8004514 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f006 fef4 	bl	800b2fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d103      	bne.n	8004526 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f043 0320 	orr.w	r3, r3, #32
 8004524:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6013      	str	r3, [r2, #0]
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e12b      	b.n	80047a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fd f826 	bl	80015b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800458e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800459e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045a0:	f001 f9fc 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 80045a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4a81      	ldr	r2, [pc, #516]	; (80047b0 <HAL_I2C_Init+0x274>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d807      	bhi.n	80045c0 <HAL_I2C_Init+0x84>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a80      	ldr	r2, [pc, #512]	; (80047b4 <HAL_I2C_Init+0x278>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bf94      	ite	ls
 80045b8:	2301      	movls	r3, #1
 80045ba:	2300      	movhi	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e006      	b.n	80045ce <HAL_I2C_Init+0x92>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a7d      	ldr	r2, [pc, #500]	; (80047b8 <HAL_I2C_Init+0x27c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bf94      	ite	ls
 80045c8:	2301      	movls	r3, #1
 80045ca:	2300      	movhi	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0e7      	b.n	80047a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a78      	ldr	r2, [pc, #480]	; (80047bc <HAL_I2C_Init+0x280>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	0c9b      	lsrs	r3, r3, #18
 80045e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a6a      	ldr	r2, [pc, #424]	; (80047b0 <HAL_I2C_Init+0x274>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <HAL_I2C_Init+0xd4>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3301      	adds	r3, #1
 800460e:	e009      	b.n	8004624 <HAL_I2C_Init+0xe8>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <HAL_I2C_Init+0x284>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	3301      	adds	r3, #1
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	430b      	orrs	r3, r1
 800462a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	495c      	ldr	r1, [pc, #368]	; (80047b0 <HAL_I2C_Init+0x274>)
 8004640:	428b      	cmp	r3, r1
 8004642:	d819      	bhi.n	8004678 <HAL_I2C_Init+0x13c>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e59      	subs	r1, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004652:	1c59      	adds	r1, r3, #1
 8004654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004658:	400b      	ands	r3, r1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_I2C_Init+0x138>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1e59      	subs	r1, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fbb1 f3f3 	udiv	r3, r1, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004672:	e051      	b.n	8004718 <HAL_I2C_Init+0x1dc>
 8004674:	2304      	movs	r3, #4
 8004676:	e04f      	b.n	8004718 <HAL_I2C_Init+0x1dc>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d111      	bne.n	80046a4 <HAL_I2C_Init+0x168>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1e58      	subs	r0, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	440b      	add	r3, r1
 800468e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e012      	b.n	80046ca <HAL_I2C_Init+0x18e>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1e58      	subs	r0, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	0099      	lsls	r1, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Init+0x196>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e022      	b.n	8004718 <HAL_I2C_Init+0x1dc>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10e      	bne.n	80046f8 <HAL_I2C_Init+0x1bc>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1e58      	subs	r0, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	440b      	add	r3, r1
 80046e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ec:	3301      	adds	r3, #1
 80046ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f6:	e00f      	b.n	8004718 <HAL_I2C_Init+0x1dc>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1e58      	subs	r0, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	0099      	lsls	r1, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	fbb0 f3f3 	udiv	r3, r0, r3
 800470e:	3301      	adds	r3, #1
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	6809      	ldr	r1, [r1, #0]
 800471c:	4313      	orrs	r3, r2
 800471e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6911      	ldr	r1, [r2, #16]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68d2      	ldr	r2, [r2, #12]
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	430b      	orrs	r3, r1
 800475a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	000186a0 	.word	0x000186a0
 80047b4:	001e847f 	.word	0x001e847f
 80047b8:	003d08ff 	.word	0x003d08ff
 80047bc:	431bde83 	.word	0x431bde83
 80047c0:	10624dd3 	.word	0x10624dd3

080047c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e128      	b.n	8004a28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a90      	ldr	r2, [pc, #576]	; (8004a30 <HAL_I2S_Init+0x26c>)
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fc ff57 	bl	80016a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800480c:	f023 030f 	bic.w	r3, r3, #15
 8004810:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2202      	movs	r2, #2
 8004818:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d060      	beq.n	80048e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800482a:	2310      	movs	r3, #16
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e001      	b.n	8004834 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004830:	2320      	movs	r3, #32
 8004832:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b20      	cmp	r3, #32
 800483a:	d802      	bhi.n	8004842 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004842:	2001      	movs	r0, #1
 8004844:	f001 f9b4 	bl	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004848:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004852:	d125      	bne.n	80048a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	fbb2 f2f3 	udiv	r2, r2, r3
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	3305      	adds	r3, #5
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	e01f      	b.n	80048be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	fbb2 f2f3 	udiv	r2, r2, r3
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	3305      	adds	r3, #5
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	e00e      	b.n	80048be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	461a      	mov	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	3305      	adds	r3, #5
 80048bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4a5c      	ldr	r2, [pc, #368]	; (8004a34 <HAL_I2S_Init+0x270>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e003      	b.n	80048ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048e4:	2302      	movs	r3, #2
 80048e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d902      	bls.n	80048f8 <HAL_I2S_Init+0x134>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2bff      	cmp	r3, #255	; 0xff
 80048f6:	d907      	bls.n	8004908 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	f043 0210 	orr.w	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e08f      	b.n	8004a28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	430a      	orrs	r2, r1
 800491a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004926:	f023 030f 	bic.w	r3, r3, #15
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6851      	ldr	r1, [r2, #4]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6892      	ldr	r2, [r2, #8]
 8004932:	4311      	orrs	r1, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68d2      	ldr	r2, [r2, #12]
 8004938:	4311      	orrs	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6992      	ldr	r2, [r2, #24]
 800493e:	430a      	orrs	r2, r1
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d161      	bne.n	8004a18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <HAL_I2S_Init+0x274>)
 8004958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <HAL_I2S_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_I2S_Init+0x1a4>
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_I2S_Init+0x27c>)
 8004966:	e001      	b.n	800496c <HAL_I2S_Init+0x1a8>
 8004968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	4932      	ldr	r1, [pc, #200]	; (8004a3c <HAL_I2S_Init+0x278>)
 8004974:	428a      	cmp	r2, r1
 8004976:	d101      	bne.n	800497c <HAL_I2S_Init+0x1b8>
 8004978:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <HAL_I2S_Init+0x27c>)
 800497a:	e001      	b.n	8004980 <HAL_I2S_Init+0x1bc>
 800497c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004980:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004984:	f023 030f 	bic.w	r3, r3, #15
 8004988:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <HAL_I2S_Init+0x278>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_I2S_Init+0x1d4>
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_I2S_Init+0x27c>)
 8004996:	e001      	b.n	800499c <HAL_I2S_Init+0x1d8>
 8004998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499c:	2202      	movs	r2, #2
 800499e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <HAL_I2S_Init+0x278>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_I2S_Init+0x1ea>
 80049aa:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_I2S_Init+0x27c>)
 80049ac:	e001      	b.n	80049b2 <HAL_I2S_Init+0x1ee>
 80049ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049be:	d003      	beq.n	80049c8 <HAL_I2S_Init+0x204>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80049c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e001      	b.n	80049d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049de:	4313      	orrs	r3, r2
 80049e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049e8:	4313      	orrs	r3, r2
 80049ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049f2:	4313      	orrs	r3, r2
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	897b      	ldrh	r3, [r7, #10]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <HAL_I2S_Init+0x278>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_I2S_Init+0x24c>
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_I2S_Init+0x27c>)
 8004a0e:	e001      	b.n	8004a14 <HAL_I2S_Init+0x250>
 8004a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a14:	897a      	ldrh	r2, [r7, #10]
 8004a16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08004b3b 	.word	0x08004b3b
 8004a34:	cccccccd 	.word	0xcccccccd
 8004a38:	08004c51 	.word	0x08004c51
 8004a3c:	40003800 	.word	0x40003800
 8004a40:	40003400 	.word	0x40003400

08004a44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	1c9a      	adds	r2, r3, #2
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10e      	bne.n	8004ad4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ac4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ffb8 	bl	8004a44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	b292      	uxth	r2, r2
 8004af0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10e      	bne.n	8004b32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff93 	bl	8004a58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d13a      	bne.n	8004bcc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d109      	bne.n	8004b74 <I2S_IRQHandler+0x3a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d102      	bne.n	8004b74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffb4 	bl	8004adc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d126      	bne.n	8004bcc <I2S_IRQHandler+0x92>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d11f      	bne.n	8004bcc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f043 0202 	orr.w	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ff50 	bl	8004a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d136      	bne.n	8004c46 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d109      	bne.n	8004bf6 <I2S_IRQHandler+0xbc>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bec:	2b80      	cmp	r3, #128	; 0x80
 8004bee:	d102      	bne.n	8004bf6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff45 	bl	8004a80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d122      	bne.n	8004c46 <I2S_IRQHandler+0x10c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d11b      	bne.n	8004c46 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c1c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff13 	bl	8004a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c46:	bf00      	nop
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4aa2      	ldr	r2, [pc, #648]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c6a:	4ba2      	ldr	r3, [pc, #648]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c6c:	e001      	b.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a9b      	ldr	r2, [pc, #620]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c88:	4b9a      	ldr	r3, [pc, #616]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c8a:	e001      	b.n	8004c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9c:	d004      	beq.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 8099 	bne.w	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f925 	bl	8004f0c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9c8 	bl	800506c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d13a      	bne.n	8004d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d035      	beq.n	8004d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7e      	ldr	r2, [pc, #504]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cfa:	4b7e      	ldr	r3, [pc, #504]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cfc:	e001      	b.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4979      	ldr	r1, [pc, #484]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d0a:	428b      	cmp	r3, r1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004d0e:	4b79      	ldr	r3, [pc, #484]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d10:	e001      	b.n	8004d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d1a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f043 0202 	orr.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fe88 	bl	8004a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	f040 80be 	bne.w	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80b8 	beq.w	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a59      	ldr	r2, [pc, #356]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d8e:	4b59      	ldr	r3, [pc, #356]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d90:	e001      	b.n	8004d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4954      	ldr	r1, [pc, #336]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d9e:	428b      	cmp	r3, r1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004da2:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004da4:	e001      	b.n	8004daa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004daa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f043 0204 	orr.w	r2, r3, #4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fe4a 	bl	8004a6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dd8:	e084      	b.n	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d107      	bne.n	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8be 	bl	8004f70 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f8fd 	bl	8005008 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d12f      	bne.n	8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d02a      	beq.n	8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e3e:	e001      	b.n	8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4929      	ldr	r1, [pc, #164]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e50:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e52:	e001      	b.n	8004e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	f043 0202 	orr.w	r2, r3, #2
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fdfa 	bl	8004a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d131      	bne.n	8004ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02c      	beq.n	8004ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d101      	bne.n	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e96:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e98:	e001      	b.n	8004e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4912      	ldr	r1, [pc, #72]	; (8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ea6:	428b      	cmp	r3, r1
 8004ea8:	d101      	bne.n	8004eae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eac:	e001      	b.n	8004eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fdc5 	bl	8004a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ee2:	e000      	b.n	8004ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ee4:	bf00      	nop
}
 8004ee6:	bf00      	nop
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40003800 	.word	0x40003800
 8004ef4:	40003400 	.word	0x40003400

08004ef8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c99      	adds	r1, r3, #2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6251      	str	r1, [r2, #36]	; 0x24
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d113      	bne.n	8004f66 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ffc9 	bl	8004ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	1c99      	adds	r1, r3, #2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6251      	str	r1, [r2, #36]	; 0x24
 8004f82:	8819      	ldrh	r1, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <I2SEx_TxISR_I2SExt+0x90>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <I2SEx_TxISR_I2SExt+0x22>
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <I2SEx_TxISR_I2SExt+0x94>)
 8004f90:	e001      	b.n	8004f96 <I2SEx_TxISR_I2SExt+0x26>
 8004f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f96:	460a      	mov	r2, r1
 8004f98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d121      	bne.n	8004ff6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	; (8005000 <I2SEx_TxISR_I2SExt+0x90>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <I2SEx_TxISR_I2SExt+0x50>
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <I2SEx_TxISR_I2SExt+0x94>)
 8004fbe:	e001      	b.n	8004fc4 <I2SEx_TxISR_I2SExt+0x54>
 8004fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	490d      	ldr	r1, [pc, #52]	; (8005000 <I2SEx_TxISR_I2SExt+0x90>)
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	d101      	bne.n	8004fd4 <I2SEx_TxISR_I2SExt+0x64>
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <I2SEx_TxISR_I2SExt+0x94>)
 8004fd2:	e001      	b.n	8004fd8 <I2SEx_TxISR_I2SExt+0x68>
 8004fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff81 	bl	8004ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40003800 	.word	0x40003800
 8005004:	40003400 	.word	0x40003400

08005008 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68d8      	ldr	r0, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	1c99      	adds	r1, r3, #2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005020:	b282      	uxth	r2, r0
 8005022:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d113      	bne.n	8005064 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800504a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff ff4a 	bl	8004ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a20      	ldr	r2, [pc, #128]	; (80050fc <I2SEx_RxISR_I2SExt+0x90>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <I2SEx_RxISR_I2SExt+0x16>
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <I2SEx_RxISR_I2SExt+0x94>)
 8005080:	e001      	b.n	8005086 <I2SEx_RxISR_I2SExt+0x1a>
 8005082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005086:	68d8      	ldr	r0, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	1c99      	adds	r1, r3, #2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005092:	b282      	uxth	r2, r0
 8005094:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d121      	bne.n	80050f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <I2SEx_RxISR_I2SExt+0x90>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <I2SEx_RxISR_I2SExt+0x50>
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <I2SEx_RxISR_I2SExt+0x94>)
 80050ba:	e001      	b.n	80050c0 <I2SEx_RxISR_I2SExt+0x54>
 80050bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	490d      	ldr	r1, [pc, #52]	; (80050fc <I2SEx_RxISR_I2SExt+0x90>)
 80050c8:	428b      	cmp	r3, r1
 80050ca:	d101      	bne.n	80050d0 <I2SEx_RxISR_I2SExt+0x64>
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <I2SEx_RxISR_I2SExt+0x94>)
 80050ce:	e001      	b.n	80050d4 <I2SEx_RxISR_I2SExt+0x68>
 80050d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff03 	bl	8004ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40003800 	.word	0x40003800
 8005100:	40003400 	.word	0x40003400

08005104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e264      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d075      	beq.n	800520e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005122:	4ba3      	ldr	r3, [pc, #652]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b04      	cmp	r3, #4
 800512c:	d00c      	beq.n	8005148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512e:	4ba0      	ldr	r3, [pc, #640]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005136:	2b08      	cmp	r3, #8
 8005138:	d112      	bne.n	8005160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513a:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005146:	d10b      	bne.n	8005160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005148:	4b99      	ldr	r3, [pc, #612]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d05b      	beq.n	800520c <HAL_RCC_OscConfig+0x108>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d157      	bne.n	800520c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e23f      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d106      	bne.n	8005178 <HAL_RCC_OscConfig+0x74>
 800516a:	4b91      	ldr	r3, [pc, #580]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a90      	ldr	r2, [pc, #576]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e01d      	b.n	80051b4 <HAL_RCC_OscConfig+0xb0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x98>
 8005182:	4b8b      	ldr	r3, [pc, #556]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a8a      	ldr	r2, [pc, #552]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a87      	ldr	r2, [pc, #540]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0xb0>
 800519c:	4b84      	ldr	r3, [pc, #528]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a83      	ldr	r2, [pc, #524]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	4b81      	ldr	r3, [pc, #516]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a80      	ldr	r2, [pc, #512]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80051ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d013      	beq.n	80051e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fd f8c4 	bl	8002348 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c4:	f7fd f8c0 	bl	8002348 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	; 0x64
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e204      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	4b76      	ldr	r3, [pc, #472]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0xc0>
 80051e2:	e014      	b.n	800520e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fd f8b0 	bl	8002348 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ec:	f7fd f8ac 	bl	8002348 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e1f0      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fe:	4b6c      	ldr	r3, [pc, #432]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0xe8>
 800520a:	e000      	b.n	800520e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800520c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d063      	beq.n	80052e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800521a:	4b65      	ldr	r3, [pc, #404]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005226:	4b62      	ldr	r3, [pc, #392]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800522e:	2b08      	cmp	r3, #8
 8005230:	d11c      	bne.n	800526c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005232:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d116      	bne.n	800526c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523e:	4b5c      	ldr	r3, [pc, #368]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_RCC_OscConfig+0x152>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e1c4      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005256:	4b56      	ldr	r3, [pc, #344]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4952      	ldr	r1, [pc, #328]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526a:	e03a      	b.n	80052e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005274:	4b4f      	ldr	r3, [pc, #316]	; (80053b4 <HAL_RCC_OscConfig+0x2b0>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fd f865 	bl	8002348 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005282:	f7fd f861 	bl	8002348 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e1a5      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005294:	4b46      	ldr	r3, [pc, #280]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a0:	4b43      	ldr	r3, [pc, #268]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4940      	ldr	r1, [pc, #256]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]
 80052b4:	e015      	b.n	80052e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052b6:	4b3f      	ldr	r3, [pc, #252]	; (80053b4 <HAL_RCC_OscConfig+0x2b0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fd f844 	bl	8002348 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c4:	f7fd f840 	bl	8002348 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e184      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052d6:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d030      	beq.n	8005350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f6:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <HAL_RCC_OscConfig+0x2b4>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fc:	f7fd f824 	bl	8002348 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005304:	f7fd f820 	bl	8002348 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e164      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x200>
 8005322:	e015      	b.n	8005350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCC_OscConfig+0x2b4>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532a:	f7fd f80d 	bl	8002348 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005332:	f7fd f809 	bl	8002348 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e14d      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f0      	bne.n	8005332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80a0 	beq.w	800549e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537c:	6413      	str	r3, [r2, #64]	; 0x40
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_OscConfig+0x2b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d121      	bne.n	80053de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_RCC_OscConfig+0x2b8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a07      	ldr	r2, [pc, #28]	; (80053bc <HAL_RCC_OscConfig+0x2b8>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a6:	f7fc ffcf 	bl	8002348 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ac:	e011      	b.n	80053d2 <HAL_RCC_OscConfig+0x2ce>
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800
 80053b4:	42470000 	.word	0x42470000
 80053b8:	42470e80 	.word	0x42470e80
 80053bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c0:	f7fc ffc2 	bl	8002348 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e106      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	4b85      	ldr	r3, [pc, #532]	; (80055e8 <HAL_RCC_OscConfig+0x4e4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d106      	bne.n	80053f4 <HAL_RCC_OscConfig+0x2f0>
 80053e6:	4b81      	ldr	r3, [pc, #516]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	4a80      	ldr	r2, [pc, #512]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6713      	str	r3, [r2, #112]	; 0x70
 80053f2:	e01c      	b.n	800542e <HAL_RCC_OscConfig+0x32a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	d10c      	bne.n	8005416 <HAL_RCC_OscConfig+0x312>
 80053fc:	4b7b      	ldr	r3, [pc, #492]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005402:	f043 0304 	orr.w	r3, r3, #4
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
 8005408:	4b78      	ldr	r3, [pc, #480]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	4a77      	ldr	r2, [pc, #476]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e00b      	b.n	800542e <HAL_RCC_OscConfig+0x32a>
 8005416:	4b75      	ldr	r3, [pc, #468]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a74      	ldr	r2, [pc, #464]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6713      	str	r3, [r2, #112]	; 0x70
 8005422:	4b72      	ldr	r3, [pc, #456]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	4a71      	ldr	r2, [pc, #452]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d015      	beq.n	8005462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005436:	f7fc ff87 	bl	8002348 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543c:	e00a      	b.n	8005454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fc ff83 	bl	8002348 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	; 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0c5      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	4b65      	ldr	r3, [pc, #404]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ee      	beq.n	800543e <HAL_RCC_OscConfig+0x33a>
 8005460:	e014      	b.n	800548c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005462:	f7fc ff71 	bl	8002348 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005468:	e00a      	b.n	8005480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fc ff6d 	bl	8002348 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e0af      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005480:	4b5a      	ldr	r3, [pc, #360]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1ee      	bne.n	800546a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d105      	bne.n	800549e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005492:	4b56      	ldr	r3, [pc, #344]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	4a55      	ldr	r2, [pc, #340]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 809b 	beq.w	80055de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d05c      	beq.n	800556e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d141      	bne.n	8005540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054bc:	4b4c      	ldr	r3, [pc, #304]	; (80055f0 <HAL_RCC_OscConfig+0x4ec>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fc ff41 	bl	8002348 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ca:	f7fc ff3d 	bl	8002348 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e081      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054dc:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	019b      	lsls	r3, r3, #6
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	3b01      	subs	r3, #1
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	061b      	lsls	r3, r3, #24
 800550c:	4937      	ldr	r1, [pc, #220]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 800550e:	4313      	orrs	r3, r2
 8005510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCC_OscConfig+0x4ec>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fc ff16 	bl	8002348 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005520:	f7fc ff12 	bl	8002348 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e056      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005532:	4b2e      	ldr	r3, [pc, #184]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x41c>
 800553e:	e04e      	b.n	80055de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005540:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_RCC_OscConfig+0x4ec>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fc feff 	bl	8002348 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800554e:	f7fc fefb 	bl	8002348 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e03f      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005560:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <HAL_RCC_OscConfig+0x44a>
 800556c:	e037      	b.n	80055de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e032      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <HAL_RCC_OscConfig+0x4e8>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d028      	beq.n	80055da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	429a      	cmp	r2, r3
 8005594:	d121      	bne.n	80055da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d11a      	bne.n	80055da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d111      	bne.n	80055da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	3b01      	subs	r3, #1
 80055c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d107      	bne.n	80055da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40007000 	.word	0x40007000
 80055ec:	40023800 	.word	0x40023800
 80055f0:	42470060 	.word	0x42470060

080055f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0cc      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005608:	4b68      	ldr	r3, [pc, #416]	; (80057ac <HAL_RCC_ClockConfig+0x1b8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d90c      	bls.n	8005630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005616:	4b65      	ldr	r3, [pc, #404]	; (80057ac <HAL_RCC_ClockConfig+0x1b8>)
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b63      	ldr	r3, [pc, #396]	; (80057ac <HAL_RCC_ClockConfig+0x1b8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0b8      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d020      	beq.n	800567e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005648:	4b59      	ldr	r3, [pc, #356]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a58      	ldr	r2, [pc, #352]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005660:	4b53      	ldr	r3, [pc, #332]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a52      	ldr	r2, [pc, #328]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800566a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800566c:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	494d      	ldr	r1, [pc, #308]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	4313      	orrs	r3, r2
 800567c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d044      	beq.n	8005714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005692:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d119      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e07f      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d003      	beq.n	80056b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d107      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e06f      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c2:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e067      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056d2:	4b37      	ldr	r3, [pc, #220]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 0203 	bic.w	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4934      	ldr	r1, [pc, #208]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056e4:	f7fc fe30 	bl	8002348 <HAL_GetTick>
 80056e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ec:	f7fc fe2c 	bl	8002348 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e04f      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 020c 	and.w	r2, r3, #12
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	429a      	cmp	r2, r3
 8005712:	d1eb      	bne.n	80056ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005714:	4b25      	ldr	r3, [pc, #148]	; (80057ac <HAL_RCC_ClockConfig+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d20c      	bcs.n	800573c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b22      	ldr	r3, [pc, #136]	; (80057ac <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b20      	ldr	r3, [pc, #128]	; (80057ac <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e032      	b.n	80057a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005748:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4916      	ldr	r1, [pc, #88]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	490e      	ldr	r1, [pc, #56]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800577a:	f000 f821 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 800577e:	4602      	mov	r2, r0
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	490a      	ldr	r1, [pc, #40]	; (80057b4 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	5ccb      	ldrb	r3, [r1, r3]
 800578e:	fa22 f303 	lsr.w	r3, r2, r3
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005796:	4b09      	ldr	r3, [pc, #36]	; (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fc fd90 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40023c00 	.word	0x40023c00
 80057b0:	40023800 	.word	0x40023800
 80057b4:	0800e558 	.word	0x0800e558
 80057b8:	20000010 	.word	0x20000010
 80057bc:	20000014 	.word	0x20000014

080057c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	2300      	movs	r3, #0
 80057d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057d8:	4b67      	ldr	r3, [pc, #412]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 030c 	and.w	r3, r3, #12
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d00d      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x40>
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	f200 80bd 	bhi.w	8005964 <HAL_RCC_GetSysClockFreq+0x1a4>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x34>
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d003      	beq.n	80057fa <HAL_RCC_GetSysClockFreq+0x3a>
 80057f2:	e0b7      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057f4:	4b61      	ldr	r3, [pc, #388]	; (800597c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057f6:	60bb      	str	r3, [r7, #8]
       break;
 80057f8:	e0b7      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057fa:	4b61      	ldr	r3, [pc, #388]	; (8005980 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80057fc:	60bb      	str	r3, [r7, #8]
      break;
 80057fe:	e0b4      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005800:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800580a:	4b5b      	ldr	r3, [pc, #364]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04d      	beq.n	80058b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005816:	4b58      	ldr	r3, [pc, #352]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	099b      	lsrs	r3, r3, #6
 800581c:	461a      	mov	r2, r3
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	ea02 0800 	and.w	r8, r2, r0
 800582e:	ea03 0901 	and.w	r9, r3, r1
 8005832:	4640      	mov	r0, r8
 8005834:	4649      	mov	r1, r9
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	014b      	lsls	r3, r1, #5
 8005840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005844:	0142      	lsls	r2, r0, #5
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	ebb0 0008 	subs.w	r0, r0, r8
 800584e:	eb61 0109 	sbc.w	r1, r1, r9
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	018b      	lsls	r3, r1, #6
 800585c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005860:	0182      	lsls	r2, r0, #6
 8005862:	1a12      	subs	r2, r2, r0
 8005864:	eb63 0301 	sbc.w	r3, r3, r1
 8005868:	f04f 0000 	mov.w	r0, #0
 800586c:	f04f 0100 	mov.w	r1, #0
 8005870:	00d9      	lsls	r1, r3, #3
 8005872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005876:	00d0      	lsls	r0, r2, #3
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	eb12 0208 	adds.w	r2, r2, r8
 8005880:	eb43 0309 	adc.w	r3, r3, r9
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	0259      	lsls	r1, r3, #9
 800588e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005892:	0250      	lsls	r0, r2, #9
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	f7fb f980 	bl	8000ba8 <__aeabi_uldivmod>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4613      	mov	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e04a      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b2:	4b31      	ldr	r3, [pc, #196]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	461a      	mov	r2, r3
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058c2:	f04f 0100 	mov.w	r1, #0
 80058c6:	ea02 0400 	and.w	r4, r2, r0
 80058ca:	ea03 0501 	and.w	r5, r3, r1
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	014b      	lsls	r3, r1, #5
 80058dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058e0:	0142      	lsls	r2, r0, #5
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	1b00      	subs	r0, r0, r4
 80058e8:	eb61 0105 	sbc.w	r1, r1, r5
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	018b      	lsls	r3, r1, #6
 80058f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058fa:	0182      	lsls	r2, r0, #6
 80058fc:	1a12      	subs	r2, r2, r0
 80058fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005902:	f04f 0000 	mov.w	r0, #0
 8005906:	f04f 0100 	mov.w	r1, #0
 800590a:	00d9      	lsls	r1, r3, #3
 800590c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005910:	00d0      	lsls	r0, r2, #3
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	1912      	adds	r2, r2, r4
 8005918:	eb45 0303 	adc.w	r3, r5, r3
 800591c:	f04f 0000 	mov.w	r0, #0
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	0299      	lsls	r1, r3, #10
 8005926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800592a:	0290      	lsls	r0, r2, #10
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4610      	mov	r0, r2
 8005932:	4619      	mov	r1, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	461a      	mov	r2, r3
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	f7fb f934 	bl	8000ba8 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4613      	mov	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	3301      	adds	r3, #1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	60bb      	str	r3, [r7, #8]
      break;
 8005962:	e002      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005966:	60bb      	str	r3, [r7, #8]
      break;
 8005968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800596a:	68bb      	ldr	r3, [r7, #8]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	00f42400 	.word	0x00f42400
 8005980:	007a1200 	.word	0x007a1200

08005984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <HAL_RCC_GetHCLKFreq+0x14>)
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000010 	.word	0x20000010

0800599c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059a0:	f7ff fff0 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0a9b      	lsrs	r3, r3, #10
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	4903      	ldr	r1, [pc, #12]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40023800 	.word	0x40023800
 80059c0:	0800e568 	.word	0x0800e568

080059c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059c8:	f7ff ffdc 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0b5b      	lsrs	r3, r3, #13
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	0800e568 	.word	0x0800e568

080059ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d035      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a14:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a1a:	f7fc fc95 	bl	8002348 <HAL_GetTick>
 8005a1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a20:	e008      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a22:	f7fc fc91 	bl	8002348 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0b0      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a34:	4b5b      	ldr	r3, [pc, #364]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	019a      	lsls	r2, r3, #6
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	071b      	lsls	r3, r3, #28
 8005a4c:	4955      	ldr	r1, [pc, #340]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a54:	4b52      	ldr	r3, [pc, #328]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a5a:	f7fc fc75 	bl	8002348 <HAL_GetTick>
 8005a5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a62:	f7fc fc71 	bl	8002348 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e090      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a74:	4b4b      	ldr	r3, [pc, #300]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f0      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8083 	beq.w	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	4a43      	ldr	r2, [pc, #268]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9e:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005aaa:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a3e      	ldr	r2, [pc, #248]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab6:	f7fc fc47 	bl	8002348 <HAL_GetTick>
 8005aba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005abe:	f7fc fc43 	bl	8002348 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e062      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ad0:	4b35      	ldr	r3, [pc, #212]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005adc:	4b31      	ldr	r3, [pc, #196]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02f      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d028      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005afa:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b04:	4b29      	ldr	r3, [pc, #164]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b0a:	4b28      	ldr	r3, [pc, #160]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d114      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b22:	f7fc fc11 	bl	8002348 <HAL_GetTick>
 8005b26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b28:	e00a      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fc fc0d 	bl	8002348 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e02a      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b40:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0ee      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d10d      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b5a:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	490d      	ldr	r1, [pc, #52]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	608b      	str	r3, [r1, #8]
 8005b74:	e005      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b76:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b80:	6093      	str	r3, [r2, #8]
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8e:	4905      	ldr	r1, [pc, #20]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	42470068 	.word	0x42470068
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	40007000 	.word	0x40007000
 8005bac:	42470e40 	.word	0x42470e40

08005bb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d13e      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005bce:	4b23      	ldr	r3, [pc, #140]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d12f      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005be4:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005be6:	617b      	str	r3, [r7, #20]
          break;
 8005be8:	e02f      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bea:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf6:	d108      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bf8:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c00:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	e007      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c0a:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c34:	0f1b      	lsrs	r3, r3, #28
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	617b      	str	r3, [r7, #20]
          break;
 8005c42:	e002      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
          break;
 8005c48:	bf00      	nop
        }
      }
      break;
 8005c4a:	bf00      	nop
    }
  }
  return frequency;
 8005c4c:	697b      	ldr	r3, [r7, #20]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	00bb8000 	.word	0x00bb8000
 8005c64:	007a1200 	.word	0x007a1200
 8005c68:	00f42400 	.word	0x00f42400

08005c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07b      	b.n	8005d76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8e:	d009      	beq.n	8005ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	61da      	str	r2, [r3, #28]
 8005c96:	e005      	b.n	8005ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb ffa2 	bl	8001c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d28:	ea42 0103 	orr.w	r1, r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0104 	and.w	r1, r3, #4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0210 	and.w	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b088      	sub	sp, #32
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_SPI_Transmit+0x22>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e126      	b.n	8005fee <HAL_SPI_Transmit+0x270>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005da8:	f7fc face 	bl	8002348 <HAL_GetTick>
 8005dac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc2:	e10b      	b.n	8005fdc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_SPI_Transmit+0x52>
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d102      	bne.n	8005dd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dd4:	e102      	b.n	8005fdc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1c:	d10f      	bne.n	8005e3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d007      	beq.n	8005e5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e64:	d14b      	bne.n	8005efe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_SPI_Transmit+0xf6>
 8005e6e:	8afb      	ldrh	r3, [r7, #22]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d13e      	bne.n	8005ef2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e98:	e02b      	b.n	8005ef2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d112      	bne.n	8005ece <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	881a      	ldrh	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	1c9a      	adds	r2, r3, #2
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ecc:	e011      	b.n	8005ef2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ece:	f7fc fa3b 	bl	8002348 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d803      	bhi.n	8005ee6 <HAL_SPI_Transmit+0x168>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d102      	bne.n	8005eec <HAL_SPI_Transmit+0x16e>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ef0:	e074      	b.n	8005fdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1ce      	bne.n	8005e9a <HAL_SPI_Transmit+0x11c>
 8005efc:	e04c      	b.n	8005f98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Transmit+0x18e>
 8005f06:	8afb      	ldrh	r3, [r7, #22]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d140      	bne.n	8005f8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f32:	e02c      	b.n	8005f8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d113      	bne.n	8005f6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	7812      	ldrb	r2, [r2, #0]
 8005f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f68:	e011      	b.n	8005f8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6a:	f7fc f9ed 	bl	8002348 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d803      	bhi.n	8005f82 <HAL_SPI_Transmit+0x204>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d102      	bne.n	8005f88 <HAL_SPI_Transmit+0x20a>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d102      	bne.n	8005f8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f8c:	e026      	b.n	8005fdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1cd      	bne.n	8005f34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fbcb 	bl	8006738 <SPI_EndRxTxTransaction>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e000      	b.n	8005fdc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b088      	sub	sp, #32
 8005ffa:	af02      	add	r7, sp, #8
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006012:	d112      	bne.n	800603a <HAL_SPI_Receive+0x44>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10e      	bne.n	800603a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2204      	movs	r2, #4
 8006020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006024:	88fa      	ldrh	r2, [r7, #6]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f8f1 	bl	8006218 <HAL_SPI_TransmitReceive>
 8006036:	4603      	mov	r3, r0
 8006038:	e0ea      	b.n	8006210 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_SPI_Receive+0x52>
 8006044:	2302      	movs	r3, #2
 8006046:	e0e3      	b.n	8006210 <HAL_SPI_Receive+0x21a>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006050:	f7fc f97a 	bl	8002348 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006062:	2302      	movs	r3, #2
 8006064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006066:	e0ca      	b.n	80061fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_SPI_Receive+0x7e>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006078:	e0c1      	b.n	80061fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2204      	movs	r2, #4
 800607e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c0:	d10f      	bne.n	80060e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d007      	beq.n	8006100 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d162      	bne.n	80061ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006108:	e02e      	b.n	8006168 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b01      	cmp	r3, #1
 8006116:	d115      	bne.n	8006144 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f103 020c 	add.w	r2, r3, #12
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006142:	e011      	b.n	8006168 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006144:	f7fc f900 	bl	8002348 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d803      	bhi.n	800615c <HAL_SPI_Receive+0x166>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d102      	bne.n	8006162 <HAL_SPI_Receive+0x16c>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006166:	e04a      	b.n	80061fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1cb      	bne.n	800610a <HAL_SPI_Receive+0x114>
 8006172:	e031      	b.n	80061d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d113      	bne.n	80061aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	b292      	uxth	r2, r2
 800618e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061a8:	e011      	b.n	80061ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061aa:	f7fc f8cd 	bl	8002348 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d803      	bhi.n	80061c2 <HAL_SPI_Receive+0x1cc>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d102      	bne.n	80061c8 <HAL_SPI_Receive+0x1d2>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061cc:	e017      	b.n	80061fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1cd      	bne.n	8006174 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fa45 	bl	800666c <SPI_EndRxTransaction>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
 80061fa:	e000      	b.n	80061fe <HAL_SPI_Receive+0x208>
  }

error :
 80061fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006226:	2301      	movs	r3, #1
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_SPI_TransmitReceive+0x26>
 800623a:	2302      	movs	r3, #2
 800623c:	e18a      	b.n	8006554 <HAL_SPI_TransmitReceive+0x33c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006246:	f7fc f87f 	bl	8002348 <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800625c:	887b      	ldrh	r3, [r7, #2]
 800625e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00f      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x70>
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626e:	d107      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x68>
 8006278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800627c:	2b04      	cmp	r3, #4
 800627e:	d003      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006280:	2302      	movs	r3, #2
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006286:	e15b      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_SPI_TransmitReceive+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_SPI_TransmitReceive+0x82>
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a0:	e14e      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d003      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2205      	movs	r2, #5
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	887a      	ldrh	r2, [r7, #2]
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d007      	beq.n	800630a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006312:	d178      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x10a>
 800631c:	8b7b      	ldrh	r3, [r7, #26]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d166      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006346:	e053      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d11b      	bne.n	800638e <HAL_SPI_TransmitReceive+0x176>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d016      	beq.n	800638e <HAL_SPI_TransmitReceive+0x176>
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	2b01      	cmp	r3, #1
 8006364:	d113      	bne.n	800638e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	881a      	ldrh	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d119      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x1b8>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	b292      	uxth	r2, r2
 80063b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063cc:	2301      	movs	r3, #1
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063d0:	f7fb ffba 	bl	8002348 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063dc:	429a      	cmp	r2, r3
 80063de:	d807      	bhi.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d003      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ee:	e0a7      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1a6      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x130>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1a1      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x130>
 8006404:	e07c      	b.n	8006500 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_SPI_TransmitReceive+0x1fc>
 800640e:	8b7b      	ldrh	r3, [r7, #26]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d16b      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800643a:	e057      	b.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d11c      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x26c>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d017      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x26c>
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d114      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	7812      	ldrb	r2, [r2, #0]
 8006466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d119      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x2ae>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d014      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064c2:	2301      	movs	r3, #1
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064c6:	f7fb ff3f 	bl	8002348 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d803      	bhi.n	80064de <HAL_SPI_TransmitReceive+0x2c6>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d102      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x2cc>
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064ea:	e029      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1a2      	bne.n	800643c <HAL_SPI_TransmitReceive+0x224>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d19d      	bne.n	800643c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f917 	bl	8006738 <SPI_EndRxTxTransaction>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800651c:	e010      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	e000      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800653e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006554:	4618      	mov	r0, r3
 8006556:	3730      	adds	r7, #48	; 0x30
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800656c:	f7fb feec 	bl	8002348 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	4413      	add	r3, r2
 800657a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800657c:	f7fb fee4 	bl	8002348 <HAL_GetTick>
 8006580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006582:	4b39      	ldr	r3, [pc, #228]	; (8006668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	015b      	lsls	r3, r3, #5
 8006588:	0d1b      	lsrs	r3, r3, #20
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006592:	e054      	b.n	800663e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d050      	beq.n	800663e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800659c:	f7fb fed4 	bl	8002348 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d902      	bls.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d13d      	bne.n	800662e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ca:	d111      	bne.n	80065f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d004      	beq.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065de:	d107      	bne.n	80065f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f8:	d10f      	bne.n	800661a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e017      	b.n	800665e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3b01      	subs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4013      	ands	r3, r2
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	429a      	cmp	r2, r3
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	429a      	cmp	r2, r3
 800665a:	d19b      	bne.n	8006594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000010 	.word	0x20000010

0800666c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006680:	d111      	bne.n	80066a6 <SPI_EndRxTransaction+0x3a>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d004      	beq.n	8006696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006694:	d107      	bne.n	80066a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ae:	d12a      	bne.n	8006706 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d012      	beq.n	80066e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff ff49 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d02d      	beq.n	800672c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e026      	b.n	800672e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	2101      	movs	r1, #1
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ff36 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01a      	beq.n	800672c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e013      	b.n	800672e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	2101      	movs	r1, #1
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff ff23 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	f043 0220 	orr.w	r2, r3, #32
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e000      	b.n	800672e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <SPI_EndRxTxTransaction+0x7c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <SPI_EndRxTxTransaction+0x80>)
 800674a:	fba2 2303 	umull	r2, r3, r2, r3
 800674e:	0d5b      	lsrs	r3, r3, #21
 8006750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006754:	fb02 f303 	mul.w	r3, r2, r3
 8006758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006762:	d112      	bne.n	800678a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	2180      	movs	r1, #128	; 0x80
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fef4 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d016      	beq.n	80067a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e00f      	b.n	80067aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	3b01      	subs	r3, #1
 8006794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	d0f2      	beq.n	800678a <SPI_EndRxTxTransaction+0x52>
 80067a4:	e000      	b.n	80067a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067a6:	bf00      	nop
  }

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000010 	.word	0x20000010
 80067b8:	165e9f81 	.word	0x165e9f81

080067bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e041      	b.n	8006852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fb fc32 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f000 fad8 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e041      	b.n	80068f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f839 	bl	80068f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3304      	adds	r3, #4
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f000 fa89 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_TIM_PWM_Start+0x24>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	e022      	b.n	8006976 <HAL_TIM_PWM_Start+0x6a>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b04      	cmp	r3, #4
 8006934:	d109      	bne.n	800694a <HAL_TIM_PWM_Start+0x3e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b01      	cmp	r3, #1
 8006940:	bf14      	ite	ne
 8006942:	2301      	movne	r3, #1
 8006944:	2300      	moveq	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	e015      	b.n	8006976 <HAL_TIM_PWM_Start+0x6a>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d109      	bne.n	8006964 <HAL_TIM_PWM_Start+0x58>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e008      	b.n	8006976 <HAL_TIM_PWM_Start+0x6a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e07c      	b.n	8006a78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Start+0x82>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698c:	e013      	b.n	80069b6 <HAL_TIM_PWM_Start+0xaa>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d104      	bne.n	800699e <HAL_TIM_PWM_Start+0x92>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	e00b      	b.n	80069b6 <HAL_TIM_PWM_Start+0xaa>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_PWM_Start+0xa2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ac:	e003      	b.n	80069b6 <HAL_TIM_PWM_Start+0xaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2201      	movs	r2, #1
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fce0 	bl	8007384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2d      	ldr	r2, [pc, #180]	; (8006a80 <HAL_TIM_PWM_Start+0x174>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <HAL_TIM_PWM_Start+0xcc>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2c      	ldr	r2, [pc, #176]	; (8006a84 <HAL_TIM_PWM_Start+0x178>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d101      	bne.n	80069dc <HAL_TIM_PWM_Start+0xd0>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <HAL_TIM_PWM_Start+0xd2>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_TIM_PWM_Start+0x174>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d022      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a04:	d01d      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_TIM_PWM_Start+0x17c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d018      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <HAL_TIM_PWM_Start+0x180>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <HAL_TIM_PWM_Start+0x184>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a16      	ldr	r2, [pc, #88]	; (8006a84 <HAL_TIM_PWM_Start+0x178>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIM_PWM_Start+0x188>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x136>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <HAL_TIM_PWM_Start+0x18c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d111      	bne.n	8006a66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b06      	cmp	r3, #6
 8006a52:	d010      	beq.n	8006a76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a64:	e007      	b.n	8006a76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0201 	orr.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40000800 	.word	0x40000800
 8006a90:	40000c00 	.word	0x40000c00
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40001800 	.word	0x40001800

08006a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0ae      	b.n	8006c18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b0c      	cmp	r3, #12
 8006ac6:	f200 809f 	bhi.w	8006c08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006c09 	.word	0x08006c09
 8006ad8:	08006c09 	.word	0x08006c09
 8006adc:	08006c09 	.word	0x08006c09
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006c09 	.word	0x08006c09
 8006ae8:	08006c09 	.word	0x08006c09
 8006aec:	08006c09 	.word	0x08006c09
 8006af0:	08006b87 	.word	0x08006b87
 8006af4:	08006c09 	.word	0x08006c09
 8006af8:	08006c09 	.word	0x08006c09
 8006afc:	08006c09 	.word	0x08006c09
 8006b00:	08006bc7 	.word	0x08006bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f9f0 	bl	8006ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0208 	orr.w	r2, r2, #8
 8006b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0204 	bic.w	r2, r2, #4
 8006b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6999      	ldr	r1, [r3, #24]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	619a      	str	r2, [r3, #24]
      break;
 8006b42:	e064      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fa40 	bl	8006fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6999      	ldr	r1, [r3, #24]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	021a      	lsls	r2, r3, #8
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	619a      	str	r2, [r3, #24]
      break;
 8006b84:	e043      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fa95 	bl	80070bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0208 	orr.w	r2, r2, #8
 8006ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0204 	bic.w	r2, r2, #4
 8006bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69d9      	ldr	r1, [r3, #28]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	61da      	str	r2, [r3, #28]
      break;
 8006bc4:	e023      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fae9 	bl	80071a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69d9      	ldr	r1, [r3, #28]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	021a      	lsls	r2, r3, #8
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	61da      	str	r2, [r3, #28]
      break;
 8006c06:	e002      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e0b4      	b.n	8006da6 <HAL_TIM_ConfigClockSource+0x186>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c74:	d03e      	beq.n	8006cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8006c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7a:	f200 8087 	bhi.w	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	f000 8086 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x172>
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8a:	d87f      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	d01a      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006c90:	2b70      	cmp	r3, #112	; 0x70
 8006c92:	d87b      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b60      	cmp	r3, #96	; 0x60
 8006c96:	d050      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x11a>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d877      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b50      	cmp	r3, #80	; 0x50
 8006c9e:	d03c      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0xfa>
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d873      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d058      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x13a>
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d86f      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d064      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d86b      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d060      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d867      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05c      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d05a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc4:	e062      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6899      	ldr	r1, [r3, #8]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f000 fb35 	bl	8007344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	609a      	str	r2, [r3, #8]
      break;
 8006cf2:	e04f      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f000 fb1e 	bl	8007344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d16:	609a      	str	r2, [r3, #8]
      break;
 8006d18:	e03c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f000 fa92 	bl	8007250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2150      	movs	r1, #80	; 0x50
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 faeb 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006d38:	e02c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f000 fab1 	bl	80072ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2160      	movs	r1, #96	; 0x60
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fadb 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006d58:	e01c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f000 fa72 	bl	8007250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2140      	movs	r1, #64	; 0x40
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 facb 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006d78:	e00c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f000 fac2 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006d8a:	e003      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e000      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a40      	ldr	r2, [pc, #256]	; (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dce:	d00f      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a3d      	ldr	r2, [pc, #244]	; (8006ec8 <TIM_Base_SetConfig+0x118>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00b      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a3c      	ldr	r2, [pc, #240]	; (8006ecc <TIM_Base_SetConfig+0x11c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d007      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3b      	ldr	r2, [pc, #236]	; (8006ed0 <TIM_Base_SetConfig+0x120>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3a      	ldr	r2, [pc, #232]	; (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2f      	ldr	r2, [pc, #188]	; (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d02b      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d027      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2c      	ldr	r2, [pc, #176]	; (8006ec8 <TIM_Base_SetConfig+0x118>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d023      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2b      	ldr	r2, [pc, #172]	; (8006ecc <TIM_Base_SetConfig+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01f      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a2a      	ldr	r2, [pc, #168]	; (8006ed0 <TIM_Base_SetConfig+0x120>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01b      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a29      	ldr	r2, [pc, #164]	; (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d017      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a28      	ldr	r2, [pc, #160]	; (8006ed8 <TIM_Base_SetConfig+0x128>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a27      	ldr	r2, [pc, #156]	; (8006edc <TIM_Base_SetConfig+0x12c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00f      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <TIM_Base_SetConfig+0x130>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00b      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <TIM_Base_SetConfig+0x134>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <TIM_Base_SetConfig+0x138>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a23      	ldr	r2, [pc, #140]	; (8006eec <TIM_Base_SetConfig+0x13c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d108      	bne.n	8006e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d103      	bne.n	8006eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	615a      	str	r2, [r3, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40010000 	.word	0x40010000
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40010400 	.word	0x40010400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800
 8006ee4:	40001800 	.word	0x40001800
 8006ee8:	40001c00 	.word	0x40001c00
 8006eec:	40002000 	.word	0x40002000

08006ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	f023 0201 	bic.w	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 0302 	bic.w	r3, r3, #2
 8006f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <TIM_OC1_SetConfig+0xd8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC1_SetConfig+0x64>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <TIM_OC1_SetConfig+0xdc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10c      	bne.n	8006f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0308 	bic.w	r3, r3, #8
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f023 0304 	bic.w	r3, r3, #4
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <TIM_OC1_SetConfig+0xd8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC1_SetConfig+0x8e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <TIM_OC1_SetConfig+0xdc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d111      	bne.n	8006fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f023 0210 	bic.w	r2, r3, #16
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f023 0320 	bic.w	r3, r3, #32
 800701a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a22      	ldr	r2, [pc, #136]	; (80070b4 <TIM_OC2_SetConfig+0xe4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_OC2_SetConfig+0x68>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a21      	ldr	r2, [pc, #132]	; (80070b8 <TIM_OC2_SetConfig+0xe8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d10d      	bne.n	8007054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800703e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <TIM_OC2_SetConfig+0xe4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC2_SetConfig+0x94>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <TIM_OC2_SetConfig+0xe8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d113      	bne.n	800708c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	621a      	str	r2, [r3, #32]
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40010000 	.word	0x40010000
 80070b8:	40010400 	.word	0x40010400

080070bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a21      	ldr	r2, [pc, #132]	; (800719c <TIM_OC3_SetConfig+0xe0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_OC3_SetConfig+0x66>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a20      	ldr	r2, [pc, #128]	; (80071a0 <TIM_OC3_SetConfig+0xe4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d10d      	bne.n	800713e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800713c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <TIM_OC3_SetConfig+0xe0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_OC3_SetConfig+0x92>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <TIM_OC3_SetConfig+0xe4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d113      	bne.n	8007176 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800715c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	621a      	str	r2, [r3, #32]
}
 8007190:	bf00      	nop
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a12      	ldr	r2, [pc, #72]	; (8007248 <TIM_OC4_SetConfig+0xa4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_OC4_SetConfig+0x68>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a11      	ldr	r2, [pc, #68]	; (800724c <TIM_OC4_SetConfig+0xa8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d109      	bne.n	8007220 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40010000 	.word	0x40010000
 800724c:	40010400 	.word	0x40010400

08007250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f023 0201 	bic.w	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800727a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 030a 	bic.w	r3, r3, #10
 800728c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b087      	sub	sp, #28
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f023 0210 	bic.w	r2, r3, #16
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	f043 0307 	orr.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	021a      	lsls	r2, r3, #8
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	431a      	orrs	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2201      	movs	r2, #1
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	401a      	ands	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	fa01 f303 	lsl.w	r3, r1, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e05a      	b.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a21      	ldr	r2, [pc, #132]	; (80074ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d022      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007434:	d01d      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d018      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a1b      	ldr	r2, [pc, #108]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d013      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a1a      	ldr	r2, [pc, #104]	; (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00e      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a18      	ldr	r2, [pc, #96]	; (80074bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d009      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a17      	ldr	r2, [pc, #92]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d10c      	bne.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	4313      	orrs	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40010400 	.word	0x40010400
 80074c0:	40014000 	.word	0x40014000
 80074c4:	40001800 	.word	0x40001800

080074c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e03f      	b.n	800755a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fa fe4a 	bl	8002188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2224      	movs	r2, #36	; 0x24
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800750a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fd7b 	bl	8008008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b08a      	sub	sp, #40	; 0x28
 8007566:	af02      	add	r7, sp, #8
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b20      	cmp	r3, #32
 8007580:	d17c      	bne.n	800767c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_UART_Transmit+0x2c>
 8007588:	88fb      	ldrh	r3, [r7, #6]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e075      	b.n	800767e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_UART_Transmit+0x3e>
 800759c:	2302      	movs	r3, #2
 800759e:	e06e      	b.n	800767e <HAL_UART_Transmit+0x11c>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2221      	movs	r2, #33	; 0x21
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075b6:	f7fa fec7 	bl	8002348 <HAL_GetTick>
 80075ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d0:	d108      	bne.n	80075e4 <HAL_UART_Transmit+0x82>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d104      	bne.n	80075e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	e003      	b.n	80075ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075f4:	e02a      	b.n	800764c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2180      	movs	r1, #128	; 0x80
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 faf9 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e036      	b.n	800767e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3302      	adds	r3, #2
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	e007      	b.n	800763e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	3301      	adds	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1cf      	bne.n	80075f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	2140      	movs	r1, #64	; 0x40
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fac9 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e000      	b.n	800767e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b0ba      	sub	sp, #232	; 0xe8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80076c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <HAL_UART_IRQHandler+0x66>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fbd3 	bl	8007e92 <UART_Receive_IT>
      return;
 80076ec:	e256      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80de 	beq.w	80078b4 <HAL_UART_IRQHandler+0x22c>
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007708:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80d1 	beq.w	80078b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <HAL_UART_IRQHandler+0xae>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_UART_IRQHandler+0xd2>
 8007742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f043 0202 	orr.w	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <HAL_UART_IRQHandler+0xf6>
 8007766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f043 0204 	orr.w	r2, r3, #4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <HAL_UART_IRQHandler+0x126>
 800778a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f043 0208 	orr.w	r2, r3, #8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 81ed 	beq.w	8007b92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_UART_IRQHandler+0x14e>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fb5e 	bl	8007e92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <HAL_UART_IRQHandler+0x17a>
 80077fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04f      	beq.n	80078a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa66 	bl	8007cd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d141      	bne.n	800789a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3314      	adds	r3, #20
 800781c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800782c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800784e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800785a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1d9      	bne.n	8007816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d013      	beq.n	8007892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	4a7d      	ldr	r2, [pc, #500]	; (8007a64 <HAL_UART_IRQHandler+0x3dc>)
 8007870:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	4618      	mov	r0, r3
 8007878:	f7fa ff17 	bl	80026aa <HAL_DMA_Abort_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d016      	beq.n	80078b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	e00e      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f99a 	bl	8007bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007898:	e00a      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f996 	bl	8007bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e006      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f992 	bl	8007bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078ae:	e170      	b.n	8007b92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	bf00      	nop
    return;
 80078b2:	e16e      	b.n	8007b92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	f040 814a 	bne.w	8007b52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8143 	beq.w	8007b52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 813c 	beq.w	8007b52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	f040 80b4 	bne.w	8007a68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800790c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8140 	beq.w	8007b96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800791a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800791e:	429a      	cmp	r2, r3
 8007920:	f080 8139 	bcs.w	8007b96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800792a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007936:	f000 8088 	beq.w	8007a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800796a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007972:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800797e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1d9      	bne.n	800793a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3314      	adds	r3, #20
 80079a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e1      	bne.n	8007986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3314      	adds	r3, #20
 80079c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3314      	adds	r3, #20
 80079e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e3      	bne.n	8007a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fa fdc0 	bl	80025ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8c0 	bl	8007be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a60:	e099      	b.n	8007b96 <HAL_UART_IRQHandler+0x50e>
 8007a62:	bf00      	nop
 8007a64:	08007d9b 	.word	0x08007d9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 808b 	beq.w	8007b9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8086 	beq.w	8007b9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e3      	bne.n	8007a8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3314      	adds	r3, #20
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3314      	adds	r3, #20
 8007ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aea:	633a      	str	r2, [r7, #48]	; 0x30
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e3      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0310 	bic.w	r3, r3, #16
 8007b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b30:	61fa      	str	r2, [r7, #28]
 8007b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	69b9      	ldr	r1, [r7, #24]
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e3      	bne.n	8007b0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f848 	bl	8007be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b50:	e023      	b.n	8007b9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <HAL_UART_IRQHandler+0x4ea>
 8007b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f929 	bl	8007dc2 <UART_Transmit_IT>
    return;
 8007b70:	e014      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <HAL_UART_IRQHandler+0x514>
 8007b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f969 	bl	8007e62 <UART_EndTransmit_IT>
    return;
 8007b90:	e004      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
    return;
 8007b92:	bf00      	nop
 8007b94:	e002      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
      return;
 8007b96:	bf00      	nop
 8007b98:	e000      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
      return;
 8007b9a:	bf00      	nop
  }
}
 8007b9c:	37e8      	adds	r7, #232	; 0xe8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b090      	sub	sp, #64	; 0x40
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	e050      	b.n	8007cac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d04c      	beq.n	8007cac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c18:	f7fa fb96 	bl	8002348 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d241      	bcs.n	8007cac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c48:	637a      	str	r2, [r7, #52]	; 0x34
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e5      	bne.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3314      	adds	r3, #20
 8007c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7c:	623a      	str	r2, [r7, #32]
 8007c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	69f9      	ldr	r1, [r7, #28]
 8007c82:	6a3a      	ldr	r2, [r7, #32]
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e00f      	b.n	8007ccc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d09f      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3740      	adds	r7, #64	; 0x40
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b095      	sub	sp, #84	; 0x54
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cfc:	643a      	str	r2, [r7, #64]	; 0x40
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3314      	adds	r3, #20
 8007d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3314      	adds	r3, #20
 8007d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d119      	bne.n	8007d80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f023 0310 	bic.w	r3, r3, #16
 8007d62:	647b      	str	r3, [r7, #68]	; 0x44
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d6c:	61ba      	str	r2, [r7, #24]
 8007d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6979      	ldr	r1, [r7, #20]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e5      	bne.n	8007d4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d8e:	bf00      	nop
 8007d90:	3754      	adds	r7, #84	; 0x54
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff09 	bl	8007bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b21      	cmp	r3, #33	; 0x21
 8007dd4:	d13e      	bne.n	8007e54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dde:	d114      	bne.n	8007e0a <UART_Transmit_IT+0x48>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d110      	bne.n	8007e0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	1c9a      	adds	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	621a      	str	r2, [r3, #32]
 8007e08:	e008      	b.n	8007e1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	1c59      	adds	r1, r3, #1
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6211      	str	r1, [r2, #32]
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10f      	bne.n	8007e50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e000      	b.n	8007e56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e54:	2302      	movs	r3, #2
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fe8e 	bl	8007ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b08c      	sub	sp, #48	; 0x30
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b22      	cmp	r3, #34	; 0x22
 8007ea4:	f040 80ab 	bne.w	8007ffe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb0:	d117      	bne.n	8007ee2 <UART_Receive_IT+0x50>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d113      	bne.n	8007ee2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	1c9a      	adds	r2, r3, #2
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28
 8007ee0:	e026      	b.n	8007f30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef4:	d007      	beq.n	8007f06 <UART_Receive_IT+0x74>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <UART_Receive_IT+0x82>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	e008      	b.n	8007f26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d15a      	bne.n	8007ffa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0220 	bic.w	r2, r2, #32
 8007f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695a      	ldr	r2, [r3, #20]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d135      	bne.n	8007ff0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	330c      	adds	r3, #12
 8007f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007faa:	623a      	str	r2, [r7, #32]
 8007fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	69f9      	ldr	r1, [r7, #28]
 8007fb0:	6a3a      	ldr	r2, [r7, #32]
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e5      	bne.n	8007f8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d10a      	bne.n	8007fe2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fdf9 	bl	8007be0 <HAL_UARTEx_RxEventCallback>
 8007fee:	e002      	b.n	8007ff6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff fde1 	bl	8007bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e002      	b.n	8008000 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e000      	b.n	8008000 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
  }
}
 8008000:	4618      	mov	r0, r3
 8008002:	3730      	adds	r7, #48	; 0x30
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	b09f      	sub	sp, #124	; 0x7c
 800800e:	af00      	add	r7, sp, #0
 8008010:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800801c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801e:	68d9      	ldr	r1, [r3, #12]
 8008020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	ea40 0301 	orr.w	r3, r0, r1
 8008028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800802a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	431a      	orrs	r2, r3
 8008034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	431a      	orrs	r2, r3
 800803a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	4313      	orrs	r3, r2
 8008040:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800804c:	f021 010c 	bic.w	r1, r1, #12
 8008050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008056:	430b      	orrs	r3, r1
 8008058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800805a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008066:	6999      	ldr	r1, [r3, #24]
 8008068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	ea40 0301 	orr.w	r3, r0, r1
 8008070:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4bc5      	ldr	r3, [pc, #788]	; (800838c <UART_SetConfig+0x384>)
 8008078:	429a      	cmp	r2, r3
 800807a:	d004      	beq.n	8008086 <UART_SetConfig+0x7e>
 800807c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	4bc3      	ldr	r3, [pc, #780]	; (8008390 <UART_SetConfig+0x388>)
 8008082:	429a      	cmp	r2, r3
 8008084:	d103      	bne.n	800808e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008086:	f7fd fc9d 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 800808a:	6778      	str	r0, [r7, #116]	; 0x74
 800808c:	e002      	b.n	8008094 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fd fc85 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 8008092:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809c:	f040 80b6 	bne.w	800820c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a2:	461c      	mov	r4, r3
 80080a4:	f04f 0500 	mov.w	r5, #0
 80080a8:	4622      	mov	r2, r4
 80080aa:	462b      	mov	r3, r5
 80080ac:	1891      	adds	r1, r2, r2
 80080ae:	6439      	str	r1, [r7, #64]	; 0x40
 80080b0:	415b      	adcs	r3, r3
 80080b2:	647b      	str	r3, [r7, #68]	; 0x44
 80080b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080b8:	1912      	adds	r2, r2, r4
 80080ba:	eb45 0303 	adc.w	r3, r5, r3
 80080be:	f04f 0000 	mov.w	r0, #0
 80080c2:	f04f 0100 	mov.w	r1, #0
 80080c6:	00d9      	lsls	r1, r3, #3
 80080c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080cc:	00d0      	lsls	r0, r2, #3
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	1911      	adds	r1, r2, r4
 80080d4:	6639      	str	r1, [r7, #96]	; 0x60
 80080d6:	416b      	adcs	r3, r5
 80080d8:	667b      	str	r3, [r7, #100]	; 0x64
 80080da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	461a      	mov	r2, r3
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	1891      	adds	r1, r2, r2
 80080e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80080e8:	415b      	adcs	r3, r3
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80080f4:	f7f8 fd58 	bl	8000ba8 <__aeabi_uldivmod>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4ba5      	ldr	r3, [pc, #660]	; (8008394 <UART_SetConfig+0x38c>)
 80080fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	011e      	lsls	r6, r3, #4
 8008106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008108:	461c      	mov	r4, r3
 800810a:	f04f 0500 	mov.w	r5, #0
 800810e:	4622      	mov	r2, r4
 8008110:	462b      	mov	r3, r5
 8008112:	1891      	adds	r1, r2, r2
 8008114:	6339      	str	r1, [r7, #48]	; 0x30
 8008116:	415b      	adcs	r3, r3
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
 800811a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800811e:	1912      	adds	r2, r2, r4
 8008120:	eb45 0303 	adc.w	r3, r5, r3
 8008124:	f04f 0000 	mov.w	r0, #0
 8008128:	f04f 0100 	mov.w	r1, #0
 800812c:	00d9      	lsls	r1, r3, #3
 800812e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008132:	00d0      	lsls	r0, r2, #3
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	1911      	adds	r1, r2, r4
 800813a:	65b9      	str	r1, [r7, #88]	; 0x58
 800813c:	416b      	adcs	r3, r5
 800813e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	461a      	mov	r2, r3
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	1891      	adds	r1, r2, r2
 800814c:	62b9      	str	r1, [r7, #40]	; 0x28
 800814e:	415b      	adcs	r3, r3
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008156:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800815a:	f7f8 fd25 	bl	8000ba8 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4b8c      	ldr	r3, [pc, #560]	; (8008394 <UART_SetConfig+0x38c>)
 8008164:	fba3 1302 	umull	r1, r3, r3, r2
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	2164      	movs	r1, #100	; 0x64
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	3332      	adds	r3, #50	; 0x32
 8008176:	4a87      	ldr	r2, [pc, #540]	; (8008394 <UART_SetConfig+0x38c>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	095b      	lsrs	r3, r3, #5
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008184:	441e      	add	r6, r3
 8008186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008188:	4618      	mov	r0, r3
 800818a:	f04f 0100 	mov.w	r1, #0
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	1894      	adds	r4, r2, r2
 8008194:	623c      	str	r4, [r7, #32]
 8008196:	415b      	adcs	r3, r3
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
 800819a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800819e:	1812      	adds	r2, r2, r0
 80081a0:	eb41 0303 	adc.w	r3, r1, r3
 80081a4:	f04f 0400 	mov.w	r4, #0
 80081a8:	f04f 0500 	mov.w	r5, #0
 80081ac:	00dd      	lsls	r5, r3, #3
 80081ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081b2:	00d4      	lsls	r4, r2, #3
 80081b4:	4622      	mov	r2, r4
 80081b6:	462b      	mov	r3, r5
 80081b8:	1814      	adds	r4, r2, r0
 80081ba:	653c      	str	r4, [r7, #80]	; 0x50
 80081bc:	414b      	adcs	r3, r1
 80081be:	657b      	str	r3, [r7, #84]	; 0x54
 80081c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	461a      	mov	r2, r3
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	1891      	adds	r1, r2, r2
 80081cc:	61b9      	str	r1, [r7, #24]
 80081ce:	415b      	adcs	r3, r3
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80081da:	f7f8 fce5 	bl	8000ba8 <__aeabi_uldivmod>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4b6c      	ldr	r3, [pc, #432]	; (8008394 <UART_SetConfig+0x38c>)
 80081e4:	fba3 1302 	umull	r1, r3, r3, r2
 80081e8:	095b      	lsrs	r3, r3, #5
 80081ea:	2164      	movs	r1, #100	; 0x64
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	3332      	adds	r3, #50	; 0x32
 80081f6:	4a67      	ldr	r2, [pc, #412]	; (8008394 <UART_SetConfig+0x38c>)
 80081f8:	fba2 2303 	umull	r2, r3, r2, r3
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	f003 0207 	and.w	r2, r3, #7
 8008202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4432      	add	r2, r6
 8008208:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800820a:	e0b9      	b.n	8008380 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800820c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800820e:	461c      	mov	r4, r3
 8008210:	f04f 0500 	mov.w	r5, #0
 8008214:	4622      	mov	r2, r4
 8008216:	462b      	mov	r3, r5
 8008218:	1891      	adds	r1, r2, r2
 800821a:	6139      	str	r1, [r7, #16]
 800821c:	415b      	adcs	r3, r3
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008224:	1912      	adds	r2, r2, r4
 8008226:	eb45 0303 	adc.w	r3, r5, r3
 800822a:	f04f 0000 	mov.w	r0, #0
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	00d9      	lsls	r1, r3, #3
 8008234:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008238:	00d0      	lsls	r0, r2, #3
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	eb12 0804 	adds.w	r8, r2, r4
 8008242:	eb43 0905 	adc.w	r9, r3, r5
 8008246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	4618      	mov	r0, r3
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	008b      	lsls	r3, r1, #2
 800825a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800825e:	0082      	lsls	r2, r0, #2
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 fca0 	bl	8000ba8 <__aeabi_uldivmod>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <UART_SetConfig+0x38c>)
 800826e:	fba3 2302 	umull	r2, r3, r3, r2
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	011e      	lsls	r6, r3, #4
 8008276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008278:	4618      	mov	r0, r3
 800827a:	f04f 0100 	mov.w	r1, #0
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	1894      	adds	r4, r2, r2
 8008284:	60bc      	str	r4, [r7, #8]
 8008286:	415b      	adcs	r3, r3
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800828e:	1812      	adds	r2, r2, r0
 8008290:	eb41 0303 	adc.w	r3, r1, r3
 8008294:	f04f 0400 	mov.w	r4, #0
 8008298:	f04f 0500 	mov.w	r5, #0
 800829c:	00dd      	lsls	r5, r3, #3
 800829e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082a2:	00d4      	lsls	r4, r2, #3
 80082a4:	4622      	mov	r2, r4
 80082a6:	462b      	mov	r3, r5
 80082a8:	1814      	adds	r4, r2, r0
 80082aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80082ac:	414b      	adcs	r3, r1
 80082ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f04f 0100 	mov.w	r1, #0
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	f04f 0300 	mov.w	r3, #0
 80082c2:	008b      	lsls	r3, r1, #2
 80082c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082c8:	0082      	lsls	r2, r0, #2
 80082ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082ce:	f7f8 fc6b 	bl	8000ba8 <__aeabi_uldivmod>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4b2f      	ldr	r3, [pc, #188]	; (8008394 <UART_SetConfig+0x38c>)
 80082d8:	fba3 1302 	umull	r1, r3, r3, r2
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	2164      	movs	r1, #100	; 0x64
 80082e0:	fb01 f303 	mul.w	r3, r1, r3
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	3332      	adds	r3, #50	; 0x32
 80082ea:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <UART_SetConfig+0x38c>)
 80082ec:	fba2 2303 	umull	r2, r3, r2, r3
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082f6:	441e      	add	r6, r3
 80082f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082fa:	4618      	mov	r0, r3
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	1894      	adds	r4, r2, r2
 8008306:	603c      	str	r4, [r7, #0]
 8008308:	415b      	adcs	r3, r3
 800830a:	607b      	str	r3, [r7, #4]
 800830c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008310:	1812      	adds	r2, r2, r0
 8008312:	eb41 0303 	adc.w	r3, r1, r3
 8008316:	f04f 0400 	mov.w	r4, #0
 800831a:	f04f 0500 	mov.w	r5, #0
 800831e:	00dd      	lsls	r5, r3, #3
 8008320:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008324:	00d4      	lsls	r4, r2, #3
 8008326:	4622      	mov	r2, r4
 8008328:	462b      	mov	r3, r5
 800832a:	eb12 0a00 	adds.w	sl, r2, r0
 800832e:	eb43 0b01 	adc.w	fp, r3, r1
 8008332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f04f 0100 	mov.w	r1, #0
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	008b      	lsls	r3, r1, #2
 8008346:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800834a:	0082      	lsls	r2, r0, #2
 800834c:	4650      	mov	r0, sl
 800834e:	4659      	mov	r1, fp
 8008350:	f7f8 fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4b0e      	ldr	r3, [pc, #56]	; (8008394 <UART_SetConfig+0x38c>)
 800835a:	fba3 1302 	umull	r1, r3, r3, r2
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	2164      	movs	r1, #100	; 0x64
 8008362:	fb01 f303 	mul.w	r3, r1, r3
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	3332      	adds	r3, #50	; 0x32
 800836c:	4a09      	ldr	r2, [pc, #36]	; (8008394 <UART_SetConfig+0x38c>)
 800836e:	fba2 2303 	umull	r2, r3, r2, r3
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	f003 020f 	and.w	r2, r3, #15
 8008378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4432      	add	r2, r6
 800837e:	609a      	str	r2, [r3, #8]
}
 8008380:	bf00      	nop
 8008382:	377c      	adds	r7, #124	; 0x7c
 8008384:	46bd      	mov	sp, r7
 8008386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838a:	bf00      	nop
 800838c:	40011000 	.word	0x40011000
 8008390:	40011400 	.word	0x40011400
 8008394:	51eb851f 	.word	0x51eb851f

08008398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008398:	b084      	sub	sp, #16
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	f107 001c 	add.w	r0, r7, #28
 80083a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d122      	bne.n	80083f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d105      	bne.n	80083ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9a0 	bl	8008730 <USB_CoreReset>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e01a      	b.n	800842c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f994 	bl	8008730 <USB_CoreReset>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800840c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
 800841e:	e005      	b.n	800842c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	2b01      	cmp	r3, #1
 8008430:	d10b      	bne.n	800844a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f043 0206 	orr.w	r2, r3, #6
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f043 0220 	orr.w	r2, r3, #32
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008456:	b004      	add	sp, #16
 8008458:	4770      	bx	lr

0800845a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f043 0201 	orr.w	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f023 0201 	bic.w	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d115      	bne.n	80084ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084cc:	2001      	movs	r0, #1
 80084ce:	f7f9 ff47 	bl	8002360 <HAL_Delay>
      ms++;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3301      	adds	r3, #1
 80084d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f91a 	bl	8008712 <USB_GetMode>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d01e      	beq.n	8008522 <USB_SetCurrentMode+0x84>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b31      	cmp	r3, #49	; 0x31
 80084e8:	d9f0      	bls.n	80084cc <USB_SetCurrentMode+0x2e>
 80084ea:	e01a      	b.n	8008522 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d115      	bne.n	800851e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084fe:	2001      	movs	r0, #1
 8008500:	f7f9 ff2e 	bl	8002360 <HAL_Delay>
      ms++;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3301      	adds	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f901 	bl	8008712 <USB_GetMode>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <USB_SetCurrentMode+0x84>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2b31      	cmp	r3, #49	; 0x31
 800851a:	d9f0      	bls.n	80084fe <USB_SetCurrentMode+0x60>
 800851c:	e001      	b.n	8008522 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e005      	b.n	800852e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b32      	cmp	r3, #50	; 0x32
 8008526:	d101      	bne.n	800852c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	019b      	lsls	r3, r3, #6
 800854a:	f043 0220 	orr.w	r2, r3, #32
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	4a08      	ldr	r2, [pc, #32]	; (800857c <USB_FlushTxFifo+0x44>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d901      	bls.n	8008562 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e006      	b.n	8008570 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b20      	cmp	r3, #32
 800856c:	d0f1      	beq.n	8008552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	00030d40 	.word	0x00030d40

08008580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2210      	movs	r2, #16
 8008590:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	4a08      	ldr	r2, [pc, #32]	; (80085bc <USB_FlushRxFifo+0x3c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e006      	b.n	80085b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d0f1      	beq.n	8008592 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	00030d40 	.word	0x00030d40

080085c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b089      	sub	sp, #36	; 0x24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4611      	mov	r1, r2
 80085cc:	461a      	mov	r2, r3
 80085ce:	460b      	mov	r3, r1
 80085d0:	71fb      	strb	r3, [r7, #7]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d123      	bne.n	800862e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085e6:	88bb      	ldrh	r3, [r7, #4]
 80085e8:	3303      	adds	r3, #3
 80085ea:	089b      	lsrs	r3, r3, #2
 80085ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	e018      	b.n	8008626 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	031a      	lsls	r2, r3, #12
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008600:	461a      	mov	r2, r3
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	3301      	adds	r3, #1
 800860c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	3301      	adds	r3, #1
 8008612:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	3301      	adds	r3, #1
 800861e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	3301      	adds	r3, #1
 8008624:	61bb      	str	r3, [r7, #24]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	429a      	cmp	r2, r3
 800862c:	d3e2      	bcc.n	80085f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3724      	adds	r7, #36	; 0x24
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800863c:	b480      	push	{r7}
 800863e:	b08b      	sub	sp, #44	; 0x2c
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	089b      	lsrs	r3, r3, #2
 8008656:	b29b      	uxth	r3, r3
 8008658:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008662:	2300      	movs	r3, #0
 8008664:	623b      	str	r3, [r7, #32]
 8008666:	e014      	b.n	8008692 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	601a      	str	r2, [r3, #0]
    pDest++;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	3301      	adds	r3, #1
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	3301      	adds	r3, #1
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	3301      	adds	r3, #1
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	3301      	adds	r3, #1
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	3301      	adds	r3, #1
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	429a      	cmp	r2, r3
 8008698:	d3e6      	bcc.n	8008668 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800869a:	8bfb      	ldrh	r3, [r7, #30]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01e      	beq.n	80086de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086aa:	461a      	mov	r2, r3
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	6812      	ldr	r2, [r2, #0]
 80086b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	701a      	strb	r2, [r3, #0]
      i++;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	3301      	adds	r3, #1
 80086ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	3301      	adds	r3, #1
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086d2:	8bfb      	ldrh	r3, [r7, #30]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086d8:	8bfb      	ldrh	r3, [r7, #30]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1ea      	bne.n	80086b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	372c      	adds	r7, #44	; 0x2c
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	4013      	ands	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008704:	68fb      	ldr	r3, [r7, #12]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0301 	and.w	r3, r3, #1
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	4a13      	ldr	r2, [pc, #76]	; (8008790 <USB_CoreReset+0x60>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d901      	bls.n	800874c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e01a      	b.n	8008782 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	daf3      	bge.n	800873c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f043 0201 	orr.w	r2, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	4a09      	ldr	r2, [pc, #36]	; (8008790 <USB_CoreReset+0x60>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d901      	bls.n	8008774 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e006      	b.n	8008782 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d0f1      	beq.n	8008764 <USB_CoreReset+0x34>

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	00030d40 	.word	0x00030d40

08008794 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008794:	b084      	sub	sp, #16
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	f107 001c 	add.w	r0, r7, #28
 80087a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087b0:	461a      	mov	r2, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d018      	beq.n	8008818 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d10a      	bne.n	8008802 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087fa:	f043 0304 	orr.w	r3, r3, #4
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	e014      	b.n	800882c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008810:	f023 0304 	bic.w	r3, r3, #4
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	e009      	b.n	800882c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008826:	f023 0304 	bic.w	r3, r3, #4
 800882a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800882c:	2110      	movs	r1, #16
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fe82 	bl	8008538 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fea3 	bl	8008580 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e015      	b.n	800886c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884c:	461a      	mov	r2, r3
 800884e:	f04f 33ff 	mov.w	r3, #4294967295
 8008852:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	461a      	mov	r2, r3
 8008862:	2300      	movs	r3, #0
 8008864:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	429a      	cmp	r2, r3
 8008872:	d3e5      	bcc.n	8008840 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008894:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <USB_HostInit+0x154>)
 800889a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a13      	ldr	r2, [pc, #76]	; (80088ec <USB_HostInit+0x158>)
 80088a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80088a4:	e009      	b.n	80088ba <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2280      	movs	r2, #128	; 0x80
 80088aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <USB_HostInit+0x15c>)
 80088b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a0f      	ldr	r2, [pc, #60]	; (80088f4 <USB_HostInit+0x160>)
 80088b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f043 0210 	orr.w	r2, r3, #16
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699a      	ldr	r2, [r3, #24]
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <USB_HostInit+0x164>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088e4:	b004      	add	sp, #16
 80088e6:	4770      	bx	lr
 80088e8:	01000200 	.word	0x01000200
 80088ec:	00e00300 	.word	0x00e00300
 80088f0:	00600080 	.word	0x00600080
 80088f4:	004000e0 	.word	0x004000e0
 80088f8:	a3200008 	.word	0xa3200008

080088fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008934:	4313      	orrs	r3, r2
 8008936:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d107      	bne.n	800894e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008944:	461a      	mov	r2, r3
 8008946:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800894a:	6053      	str	r3, [r2, #4]
 800894c:	e009      	b.n	8008962 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d106      	bne.n	8008962 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895a:	461a      	mov	r2, r3
 800895c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008960:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008990:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800899a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800899e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80089a0:	2064      	movs	r0, #100	; 0x64
 80089a2:	f7f9 fcdd 	bl	8002360 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80089b4:	200a      	movs	r0, #10
 80089b6:	f7f9 fcd3 	bl	8002360 <HAL_Delay>

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d109      	bne.n	8008a08 <USB_DriveVbus+0x44>
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d106      	bne.n	8008a08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a12:	d109      	bne.n	8008a28 <USB_DriveVbus+0x64>
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	0c5b      	lsrs	r3, r3, #17
 8008a54:	f003 0303 	and.w	r3, r3, #3
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	b29b      	uxth	r3, r3
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	4608      	mov	r0, r1
 8008a92:	4611      	mov	r1, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	4603      	mov	r3, r0
 8008a98:	70fb      	strb	r3, [r7, #3]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70bb      	strb	r3, [r7, #2]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8008abc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008abe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d87e      	bhi.n	8008bc4 <USB_HC_Init+0x13c>
 8008ac6:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <USB_HC_Init+0x44>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008add 	.word	0x08008add
 8008ad0:	08008b87 	.word	0x08008b87
 8008ad4:	08008add 	.word	0x08008add
 8008ad8:	08008b49 	.word	0x08008b49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae8:	461a      	mov	r2, r3
 8008aea:	f240 439d 	movw	r3, #1181	; 0x49d
 8008aee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008af0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da10      	bge.n	8008b1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008b18:	e057      	b.n	8008bca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d051      	beq.n	8008bca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b44:	60d3      	str	r3, [r2, #12]
      break;
 8008b46:	e040      	b.n	8008bca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b54:	461a      	mov	r2, r3
 8008b56:	f240 639d 	movw	r3, #1693	; 0x69d
 8008b5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	da34      	bge.n	8008bce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	0151      	lsls	r1, r2, #5
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	440a      	add	r2, r1
 8008b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b84:	e023      	b.n	8008bce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b92:	461a      	mov	r2, r3
 8008b94:	f240 2325 	movw	r3, #549	; 0x225
 8008b98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da17      	bge.n	8008bd2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bbc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008bc0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008bc2:	e006      	b.n	8008bd2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	77fb      	strb	r3, [r7, #31]
      break;
 8008bc8:	e004      	b.n	8008bd4 <USB_HC_Init+0x14c>
      break;
 8008bca:	bf00      	nop
 8008bcc:	e002      	b.n	8008bd4 <USB_HC_Init+0x14c>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e000      	b.n	8008bd4 <USB_HC_Init+0x14c>
      break;
 8008bd2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bda:	699a      	ldr	r2, [r3, #24]
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	2101      	movs	r1, #1
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	6939      	ldr	r1, [r7, #16]
 8008bea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008bfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	da03      	bge.n	8008c0e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	e001      	b.n	8008c12 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ff0f 	bl	8008a36 <USB_GetHostSpeed>
 8008c18:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d106      	bne.n	8008c30 <USB_HC_Init+0x1a8>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d003      	beq.n	8008c30 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e001      	b.n	8008c34 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c34:	787b      	ldrb	r3, [r7, #1]
 8008c36:	059b      	lsls	r3, r3, #22
 8008c38:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c3c:	78bb      	ldrb	r3, [r7, #2]
 8008c3e:	02db      	lsls	r3, r3, #11
 8008c40:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c44:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c4a:	049b      	lsls	r3, r3, #18
 8008c4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c50:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	0159      	lsls	r1, r3, #5
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	440b      	add	r3, r1
 8008c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c70:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d10f      	bne.n	8008c9a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c98:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08c      	sub	sp, #48	; 0x30
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d02d      	beq.n	8008d2a <USB_HC_StartXfer+0x86>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	791b      	ldrb	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d129      	bne.n	8008d2a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d117      	bne.n	8008d0c <USB_HC_StartXfer+0x68>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	79db      	ldrb	r3, [r3, #7]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <USB_HC_StartXfer+0x48>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	79db      	ldrb	r3, [r3, #7]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d10f      	bne.n	8008d0c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	6a3a      	ldr	r2, [r7, #32]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10b      	bne.n	8008d2a <USB_HC_StartXfer+0x86>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	795b      	ldrb	r3, [r3, #5]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d107      	bne.n	8008d2a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 fa2f 	bl	8009184 <USB_DoPing>
      return HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e0f8      	b.n	8008f1c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	8912      	ldrh	r2, [r2, #8]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	8912      	ldrh	r2, [r2, #8]
 8008d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d46:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008d48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d4a:	8b7b      	ldrh	r3, [r7, #26]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d90b      	bls.n	8008d68 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008d50:	8b7b      	ldrh	r3, [r7, #26]
 8008d52:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	8912      	ldrh	r2, [r2, #8]
 8008d5a:	fb02 f203 	mul.w	r2, r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	611a      	str	r2, [r3, #16]
 8008d62:	e001      	b.n	8008d68 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008d64:	2301      	movs	r3, #1
 8008d66:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	78db      	ldrb	r3, [r3, #3]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	8912      	ldrh	r2, [r2, #8]
 8008d76:	fb02 f203 	mul.w	r2, r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	611a      	str	r2, [r3, #16]
 8008d7e:	e003      	b.n	8008d88 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	695a      	ldr	r2, [r3, #20]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d92:	04d9      	lsls	r1, r3, #19
 8008d94:	4b63      	ldr	r3, [pc, #396]	; (8008f24 <USB_HC_StartXfer+0x280>)
 8008d96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	7a9b      	ldrb	r3, [r3, #10]
 8008d9e:	075b      	lsls	r3, r3, #29
 8008da0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	0148      	lsls	r0, r1, #5
 8008da8:	6a39      	ldr	r1, [r7, #32]
 8008daa:	4401      	add	r1, r0
 8008dac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008db0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008db2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	68d9      	ldr	r1, [r3, #12]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dca:	460a      	mov	r2, r1
 8008dcc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bf0c      	ite	eq
 8008dde:	2301      	moveq	r3, #1
 8008de0:	2300      	movne	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	6a3a      	ldr	r2, [r7, #32]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	7e7b      	ldrb	r3, [r7, #25]
 8008e16:	075b      	lsls	r3, r3, #29
 8008e18:	69f9      	ldr	r1, [r7, #28]
 8008e1a:	0148      	lsls	r0, r1, #5
 8008e1c:	6a39      	ldr	r1, [r7, #32]
 8008e1e:	4401      	add	r1, r0
 8008e20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008e24:	4313      	orrs	r3, r2
 8008e26:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e3e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	78db      	ldrb	r3, [r3, #3]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	e003      	b.n	8008e5a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e58:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e60:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6e:	461a      	mov	r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e04e      	b.n	8008f1c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	78db      	ldrb	r3, [r3, #3]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d149      	bne.n	8008f1a <USB_HC_StartXfer+0x276>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d045      	beq.n	8008f1a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	79db      	ldrb	r3, [r3, #7]
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d830      	bhi.n	8008ef8 <USB_HC_StartXfer+0x254>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USB_HC_StartXfer+0x1f8>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ead 	.word	0x08008ead
 8008ea0:	08008ed1 	.word	0x08008ed1
 8008ea4:	08008ead 	.word	0x08008ead
 8008ea8:	08008ed1 	.word	0x08008ed1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	3303      	adds	r3, #3
 8008eb2:	089b      	lsrs	r3, r3, #2
 8008eb4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008eb6:	8afa      	ldrh	r2, [r7, #22]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d91c      	bls.n	8008efc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f043 0220 	orr.w	r2, r3, #32
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ece:	e015      	b.n	8008efc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008eda:	8afa      	ldrh	r2, [r7, #22]
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d90a      	bls.n	8008f00 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ef6:	e003      	b.n	8008f00 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008ef8:	bf00      	nop
 8008efa:	e002      	b.n	8008f02 <USB_HC_StartXfer+0x25e>
        break;
 8008efc:	bf00      	nop
 8008efe:	e000      	b.n	8008f02 <USB_HC_StartXfer+0x25e>
        break;
 8008f00:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	68d9      	ldr	r1, [r3, #12]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	785a      	ldrb	r2, [r3, #1]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2000      	movs	r0, #0
 8008f12:	9000      	str	r0, [sp, #0]
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fb53 	bl	80085c0 <USB_WritePacket>
  }

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3728      	adds	r7, #40	; 0x28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	1ff80000 	.word	0x1ff80000

08008f28 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	b29b      	uxth	r3, r3
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b089      	sub	sp, #36	; 0x24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	0c9b      	lsrs	r3, r3, #18
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	0fdb      	lsrs	r3, r3, #31
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b20      	cmp	r3, #32
 8008f98:	d104      	bne.n	8008fa4 <USB_HC_Halt+0x5a>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e0e8      	b.n	8009176 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <USB_HC_Halt+0x66>
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d173      	bne.n	8009098 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	0151      	lsls	r1, r2, #5
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	440a      	add	r2, r1
 8008fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f040 80cb 	bne.w	8009174 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d143      	bne.n	8009072 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009008:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	4413      	add	r3, r2
 8009012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	440a      	add	r2, r1
 8009020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009028:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	4413      	add	r3, r2
 8009032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	440a      	add	r2, r1
 8009040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009048:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	3301      	adds	r3, #1
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009056:	d81d      	bhi.n	8009094 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	4413      	add	r3, r2
 8009060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800906a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800906e:	d0ec      	beq.n	800904a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009070:	e080      	b.n	8009174 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	4413      	add	r3, r2
 800907a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	0151      	lsls	r1, r2, #5
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	440a      	add	r2, r1
 8009088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800908c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009090:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009092:	e06f      	b.n	8009174 <USB_HC_Halt+0x22a>
            break;
 8009094:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009096:	e06d      	b.n	8009174 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d143      	bne.n	8009150 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	0151      	lsls	r1, r2, #5
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	440a      	add	r2, r1
 80090de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009106:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	4413      	add	r3, r2
 8009110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	440a      	add	r2, r1
 800911e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009126:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	3301      	adds	r3, #1
 800912c:	61fb      	str	r3, [r7, #28]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009134:	d81d      	bhi.n	8009172 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	4413      	add	r3, r2
 800913e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914c:	d0ec      	beq.n	8009128 <USB_HC_Halt+0x1de>
 800914e:	e011      	b.n	8009174 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	4413      	add	r3, r2
 8009158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	440a      	add	r2, r1
 8009166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800916a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	e000      	b.n	8009174 <USB_HC_Halt+0x22a>
          break;
 8009172:	bf00      	nop
    }
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3724      	adds	r7, #36	; 0x24
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
	...

08009184 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009198:	2301      	movs	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	04da      	lsls	r2, r3, #19
 80091a0:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <USB_DoPing+0x74>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	0151      	lsls	r1, r2, #5
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	440a      	add	r2, r1
 80091ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e2:	461a      	mov	r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	1ff80000 	.word	0x1ff80000

080091fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009208:	2300      	movs	r3, #0
 800920a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff f935 	bl	800847c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009212:	2110      	movs	r1, #16
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff f98f 	bl	8008538 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff f9b0 	bl	8008580 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009220:	2300      	movs	r3, #0
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	e01f      	b.n	8009266 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800923c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009244:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800924c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4413      	add	r3, r2
 8009256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925a:	461a      	mov	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3301      	adds	r3, #1
 8009264:	613b      	str	r3, [r7, #16]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b0f      	cmp	r3, #15
 800926a:	d9dc      	bls.n	8009226 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	e034      	b.n	80092dc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009288:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009290:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009298:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a6:	461a      	mov	r2, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	3301      	adds	r3, #1
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092b8:	d80c      	bhi.n	80092d4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d0:	d0ec      	beq.n	80092ac <USB_StopHost+0xb0>
 80092d2:	e000      	b.n	80092d6 <USB_StopHost+0xda>
        break;
 80092d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3301      	adds	r3, #1
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b0f      	cmp	r3, #15
 80092e0:	d9c7      	bls.n	8009272 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e8:	461a      	mov	r2, r3
 80092ea:	f04f 33ff 	mov.w	r3, #4294967295
 80092ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295
 80092f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff f8ae 	bl	800845a <USB_EnableGlobalInt>

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b089      	sub	sp, #36	; 0x24
 800930c:	af04      	add	r7, sp, #16
 800930e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009310:	2301      	movs	r3, #1
 8009312:	2202      	movs	r2, #2
 8009314:	2102      	movs	r1, #2
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fc66 	bl	8009be8 <USBH_FindInterface>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2bff      	cmp	r3, #255	; 0xff
 8009324:	d002      	beq.n	800932c <USBH_CDC_InterfaceInit+0x24>
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d901      	bls.n	8009330 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800932c:	2302      	movs	r3, #2
 800932e:	e13d      	b.n	80095ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc3b 	bl	8009bb0 <USBH_SelectInterface>
 800933a:	4603      	mov	r3, r0
 800933c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009344:	2302      	movs	r3, #2
 8009346:	e131      	b.n	80095ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800934e:	2050      	movs	r0, #80	; 0x50
 8009350:	f002 fa00 	bl	800b754 <malloc>
 8009354:	4603      	mov	r3, r0
 8009356:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009368:	2302      	movs	r3, #2
 800936a:	e11f      	b.n	80095ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800936c:	2250      	movs	r2, #80	; 0x50
 800936e:	2100      	movs	r1, #0
 8009370:	68b8      	ldr	r0, [r7, #8]
 8009372:	f002 fa0d 	bl	800b790 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	211a      	movs	r1, #26
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	4413      	add	r3, r2
 8009382:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	b25b      	sxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	da15      	bge.n	80093ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	211a      	movs	r1, #26
 8009394:	fb01 f303 	mul.w	r3, r1, r3
 8009398:	4413      	add	r3, r2
 800939a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	211a      	movs	r1, #26
 80093aa:	fb01 f303 	mul.w	r3, r1, r3
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80093b4:	881a      	ldrh	r2, [r3, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 fe32 	bl	800b02a <USBH_AllocPipe>
 80093c6:	4603      	mov	r3, r0
 80093c8:	461a      	mov	r2, r3
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	7819      	ldrb	r1, [r3, #0]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	7858      	ldrb	r0, [r3, #1]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	8952      	ldrh	r2, [r2, #10]
 80093e6:	9202      	str	r2, [sp, #8]
 80093e8:	2203      	movs	r2, #3
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	4623      	mov	r3, r4
 80093f0:	4602      	mov	r2, r0
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 fdea 	bl	800afcc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2200      	movs	r2, #0
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f002 f8f9 	bl	800b5f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009406:	2300      	movs	r3, #0
 8009408:	2200      	movs	r2, #0
 800940a:	210a      	movs	r1, #10
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fbeb 	bl	8009be8 <USBH_FindInterface>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2bff      	cmp	r3, #255	; 0xff
 800941a:	d002      	beq.n	8009422 <USBH_CDC_InterfaceInit+0x11a>
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d901      	bls.n	8009426 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009422:	2302      	movs	r3, #2
 8009424:	e0c2      	b.n	80095ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	211a      	movs	r1, #26
 800942c:	fb01 f303 	mul.w	r3, r1, r3
 8009430:	4413      	add	r3, r2
 8009432:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b25b      	sxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	da16      	bge.n	800946c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	211a      	movs	r1, #26
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	4413      	add	r3, r2
 800944a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800944e:	781a      	ldrb	r2, [r3, #0]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	211a      	movs	r1, #26
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	4413      	add	r3, r2
 8009460:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009464:	881a      	ldrh	r2, [r3, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	835a      	strh	r2, [r3, #26]
 800946a:	e015      	b.n	8009498 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	211a      	movs	r1, #26
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	4413      	add	r3, r2
 8009478:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	211a      	movs	r1, #26
 8009488:	fb01 f303 	mul.w	r3, r1, r3
 800948c:	4413      	add	r3, r2
 800948e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009492:	881a      	ldrh	r2, [r3, #0]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	211a      	movs	r1, #26
 800949e:	fb01 f303 	mul.w	r3, r1, r3
 80094a2:	4413      	add	r3, r2
 80094a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	b25b      	sxtb	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da16      	bge.n	80094de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	211a      	movs	r1, #26
 80094b6:	fb01 f303 	mul.w	r3, r1, r3
 80094ba:	4413      	add	r3, r2
 80094bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094c0:	781a      	ldrb	r2, [r3, #0]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	211a      	movs	r1, #26
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80094d6:	881a      	ldrh	r2, [r3, #0]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	835a      	strh	r2, [r3, #26]
 80094dc:	e015      	b.n	800950a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	211a      	movs	r1, #26
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	4413      	add	r3, r2
 80094ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	211a      	movs	r1, #26
 80094fa:	fb01 f303 	mul.w	r3, r1, r3
 80094fe:	4413      	add	r3, r2
 8009500:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009504:	881a      	ldrh	r2, [r3, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	7b9b      	ldrb	r3, [r3, #14]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fd8a 	bl	800b02a <USBH_AllocPipe>
 8009516:	4603      	mov	r3, r0
 8009518:	461a      	mov	r2, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	7bdb      	ldrb	r3, [r3, #15]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fd80 	bl	800b02a <USBH_AllocPipe>
 800952a:	4603      	mov	r3, r0
 800952c:	461a      	mov	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	7b59      	ldrb	r1, [r3, #13]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	7b98      	ldrb	r0, [r3, #14]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	8b12      	ldrh	r2, [r2, #24]
 800954a:	9202      	str	r2, [sp, #8]
 800954c:	2202      	movs	r2, #2
 800954e:	9201      	str	r2, [sp, #4]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	4623      	mov	r3, r4
 8009554:	4602      	mov	r2, r0
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 fd38 	bl	800afcc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	7b19      	ldrb	r1, [r3, #12]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	7bd8      	ldrb	r0, [r3, #15]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	8b52      	ldrh	r2, [r2, #26]
 8009574:	9202      	str	r2, [sp, #8]
 8009576:	2202      	movs	r2, #2
 8009578:	9201      	str	r2, [sp, #4]
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	4623      	mov	r3, r4
 800957e:	4602      	mov	r2, r0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 fd23 	bl	800afcc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	7b5b      	ldrb	r3, [r3, #13]
 8009592:	2200      	movs	r2, #0
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f002 f82e 	bl	800b5f8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	7b1b      	ldrb	r3, [r3, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f002 f827 	bl	800b5f8 <USBH_LL_SetToggle>

  return USBH_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd90      	pop	{r4, r7, pc}

080095b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00e      	beq.n	80095ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fd18 	bl	800b00a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fd43 	bl	800b06c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	7b1b      	ldrb	r3, [r3, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	7b1b      	ldrb	r3, [r3, #12]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fd05 	bl	800b00a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	7b1b      	ldrb	r3, [r3, #12]
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fd30 	bl	800b06c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	7b5b      	ldrb	r3, [r3, #13]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00e      	beq.n	8009638 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	7b5b      	ldrb	r3, [r3, #13]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 fcf2 	bl	800b00a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	7b5b      	ldrb	r3, [r3, #13]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 fd1d 	bl	800b06c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	4618      	mov	r0, r3
 800964e:	f002 f889 	bl	800b764 <free>
    phost->pActiveClass->pData = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009658:	2200      	movs	r2, #0
 800965a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3340      	adds	r3, #64	; 0x40
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f8b1 	bl	80097e6 <GetLineCoding>
 8009684:	4603      	mov	r3, r0
 8009686:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009694:	2102      	movs	r1, #2
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800969a:	7afb      	ldrb	r3, [r7, #11]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80096ac:	2301      	movs	r3, #1
 80096ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d877      	bhi.n	80097b8 <USBH_CDC_Process+0x114>
 80096c8:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <USBH_CDC_Process+0x2c>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	080096e5 	.word	0x080096e5
 80096d4:	080096eb 	.word	0x080096eb
 80096d8:	0800971b 	.word	0x0800971b
 80096dc:	0800978f 	.word	0x0800978f
 80096e0:	0800979d 	.word	0x0800979d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
      break;
 80096e8:	e06d      	b.n	80097c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f897 	bl	8009824 <SetLineCoding>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009708:	e058      	b.n	80097bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d055      	beq.n	80097bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2204      	movs	r2, #4
 8009714:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009718:	e050      	b.n	80097bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	3340      	adds	r3, #64	; 0x40
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f860 	bl	80097e6 <GetLineCoding>
 8009726:	4603      	mov	r3, r0
 8009728:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d126      	bne.n	800977e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009742:	791b      	ldrb	r3, [r3, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d13b      	bne.n	80097c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009752:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009754:	429a      	cmp	r2, r3
 8009756:	d133      	bne.n	80097c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009762:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009764:	429a      	cmp	r2, r3
 8009766:	d12b      	bne.n	80097c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009770:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009772:	429a      	cmp	r2, r3
 8009774:	d124      	bne.n	80097c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f958 	bl	8009a2c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800977c:	e020      	b.n	80097c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d01d      	beq.n	80097c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2204      	movs	r2, #4
 8009788:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800978c:	e018      	b.n	80097c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f867 	bl	8009862 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f8da 	bl	800994e <CDC_ProcessReception>
      break;
 800979a:	e014      	b.n	80097c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800979c:	2100      	movs	r1, #0
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 ffe3 	bl	800a76a <USBH_ClrFeature>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80097b6:	e005      	b.n	80097c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80097b8:	bf00      	nop
 80097ba:	e004      	b.n	80097c6 <USBH_CDC_Process+0x122>
      break;
 80097bc:	bf00      	nop
 80097be:	e002      	b.n	80097c6 <USBH_CDC_Process+0x122>
      break;
 80097c0:	bf00      	nop
 80097c2:	e000      	b.n	80097c6 <USBH_CDC_Process+0x122>
      break;
 80097c4:	bf00      	nop

  }

  return status;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	22a1      	movs	r2, #161	; 0xa1
 80097f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2221      	movs	r2, #33	; 0x21
 80097fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2207      	movs	r2, #7
 800980c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2207      	movs	r2, #7
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 f988 	bl	800ab2a <USBH_CtlReq>
 800981a:	4603      	mov	r3, r0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2221      	movs	r2, #33	; 0x21
 8009832:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2207      	movs	r2, #7
 800984a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2207      	movs	r2, #7
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 f969 	bl	800ab2a <USBH_CtlReq>
 8009858:	4603      	mov	r3, r0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af02      	add	r7, sp, #8
 8009868:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009874:	2300      	movs	r3, #0
 8009876:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800987e:	2b01      	cmp	r3, #1
 8009880:	d002      	beq.n	8009888 <CDC_ProcessTransmission+0x26>
 8009882:	2b02      	cmp	r3, #2
 8009884:	d023      	beq.n	80098ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009886:	e05e      	b.n	8009946 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	8b12      	ldrh	r2, [r2, #24]
 8009890:	4293      	cmp	r3, r2
 8009892:	d90b      	bls.n	80098ac <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	69d9      	ldr	r1, [r3, #28]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8b1a      	ldrh	r2, [r3, #24]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	7b5b      	ldrb	r3, [r3, #13]
 80098a0:	2001      	movs	r0, #1
 80098a2:	9000      	str	r0, [sp, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 fb4e 	bl	800af46 <USBH_BulkSendData>
 80098aa:	e00b      	b.n	80098c4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	7b5b      	ldrb	r3, [r3, #13]
 80098ba:	2001      	movs	r0, #1
 80098bc:	9000      	str	r0, [sp, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 fb41 	bl	800af46 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80098cc:	e03b      	b.n	8009946 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	7b5b      	ldrb	r3, [r3, #13]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 fe65 	bl	800b5a4 <USBH_LL_GetURBState>
 80098da:	4603      	mov	r3, r0
 80098dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d128      	bne.n	8009936 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	8b12      	ldrh	r2, [r2, #24]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d90e      	bls.n	800990e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	8b12      	ldrh	r2, [r2, #24]
 80098f8:	1a9a      	subs	r2, r3, r2
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	8b12      	ldrh	r2, [r2, #24]
 8009906:	441a      	add	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	61da      	str	r2, [r3, #28]
 800990c:	e002      	b.n	8009914 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009924:	e00e      	b.n	8009944 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f868 	bl	8009a04 <USBH_CDC_TransmitCallback>
      break;
 8009934:	e006      	b.n	8009944 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d103      	bne.n	8009944 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009944:	bf00      	nop
  }
}
 8009946:	bf00      	nop
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009960:	2300      	movs	r3, #0
 8009962:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800996a:	2b03      	cmp	r3, #3
 800996c:	d002      	beq.n	8009974 <CDC_ProcessReception+0x26>
 800996e:	2b04      	cmp	r3, #4
 8009970:	d00e      	beq.n	8009990 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009972:	e043      	b.n	80099fc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6a19      	ldr	r1, [r3, #32]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	8b5a      	ldrh	r2, [r3, #26]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	7b1b      	ldrb	r3, [r3, #12]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 fb05 	bl	800af90 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2204      	movs	r2, #4
 800998a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800998e:	e035      	b.n	80099fc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	7b1b      	ldrb	r3, [r3, #12]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fe04 	bl	800b5a4 <USBH_LL_GetURBState>
 800999c:	4603      	mov	r3, r0
 800999e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80099a0:	7cfb      	ldrb	r3, [r7, #19]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d129      	bne.n	80099fa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	7b1b      	ldrb	r3, [r3, #12]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 fd67 	bl	800b480 <USBH_LL_GetLastXferSize>
 80099b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d016      	beq.n	80099ec <CDC_ProcessReception+0x9e>
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	8b5b      	ldrh	r3, [r3, #26]
 80099c2:	461a      	mov	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d910      	bls.n	80099ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1ad2      	subs	r2, r2, r3
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	6a1a      	ldr	r2, [r3, #32]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	441a      	add	r2, r3
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2203      	movs	r2, #3
 80099e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80099ea:	e006      	b.n	80099fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f80f 	bl	8009a18 <USBH_CDC_ReceiveCallback>
      break;
 80099fa:	bf00      	nop
  }
}
 80099fc:	bf00      	nop
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009a54:	2302      	movs	r3, #2
 8009a56:	e029      	b.n	8009aac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	79fa      	ldrb	r2, [r7, #7]
 8009a5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 f81f 	bl	8009ab4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f001 fc37 	bl	800b318 <USBH_LL_Init>

  return USBH_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e009      	b.n	8009ada <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	33e0      	adds	r3, #224	; 0xe0
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b0e      	cmp	r3, #14
 8009ade:	d9f2      	bls.n	8009ac6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e009      	b.n	8009afa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3301      	adds	r3, #1
 8009af8:	60fb      	str	r3, [r7, #12]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b00:	d3f1      	bcc.n	8009ae6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2240      	movs	r2, #64	; 0x40
 8009b26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d016      	beq.n	8009b9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10e      	bne.n	8009b98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b80:	1c59      	adds	r1, r3, #1
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	33de      	adds	r3, #222	; 0xde
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
 8009b96:	e004      	b.n	8009ba2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	73fb      	strb	r3, [r7, #15]
 8009b9c:	e001      	b.n	8009ba2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d204      	bcs.n	8009bd6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009bd4:	e001      	b.n	8009bda <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	70fb      	strb	r3, [r7, #3]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	70bb      	strb	r3, [r7, #2]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009c10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c12:	e025      	b.n	8009c60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	221a      	movs	r2, #26
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4413      	add	r3, r2
 8009c22:	3302      	adds	r3, #2
 8009c24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	795b      	ldrb	r3, [r3, #5]
 8009c2a:	78fa      	ldrb	r2, [r7, #3]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d002      	beq.n	8009c36 <USBH_FindInterface+0x4e>
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	2bff      	cmp	r3, #255	; 0xff
 8009c34:	d111      	bne.n	8009c5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c3a:	78ba      	ldrb	r2, [r7, #2]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d002      	beq.n	8009c46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c40:	78bb      	ldrb	r3, [r7, #2]
 8009c42:	2bff      	cmp	r3, #255	; 0xff
 8009c44:	d109      	bne.n	8009c5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c4a:	787a      	ldrb	r2, [r7, #1]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d002      	beq.n	8009c56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c50:	787b      	ldrb	r3, [r7, #1]
 8009c52:	2bff      	cmp	r3, #255	; 0xff
 8009c54:	d101      	bne.n	8009c5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009c56:	7dfb      	ldrb	r3, [r7, #23]
 8009c58:	e006      	b.n	8009c68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d9d6      	bls.n	8009c14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009c66:	23ff      	movs	r3, #255	; 0xff
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fb87 	bl	800b390 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009c82:	2101      	movs	r1, #1
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 fca0 	bl	800b5ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b088      	sub	sp, #32
 8009c98:	af04      	add	r7, sp, #16
 8009c9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d102      	bne.n	8009cb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b0b      	cmp	r3, #11
 8009cbe:	f200 81b3 	bhi.w	800a028 <USBH_Process+0x394>
 8009cc2:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <USBH_Process+0x34>)
 8009cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc8:	08009cf9 	.word	0x08009cf9
 8009ccc:	08009d2b 	.word	0x08009d2b
 8009cd0:	08009d93 	.word	0x08009d93
 8009cd4:	08009fc3 	.word	0x08009fc3
 8009cd8:	0800a029 	.word	0x0800a029
 8009cdc:	08009e37 	.word	0x08009e37
 8009ce0:	08009f69 	.word	0x08009f69
 8009ce4:	08009e6d 	.word	0x08009e6d
 8009ce8:	08009e8d 	.word	0x08009e8d
 8009cec:	08009ead 	.word	0x08009ead
 8009cf0:	08009edb 	.word	0x08009edb
 8009cf4:	08009fab 	.word	0x08009fab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 8193 	beq.w	800a02c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009d0c:	20c8      	movs	r0, #200	; 0xc8
 8009d0e:	f001 fca3 	bl	800b658 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 fb99 	bl	800b44a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009d28:	e180      	b.n	800a02c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d107      	bne.n	8009d44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d42:	e182      	b.n	800a04a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d4e:	d914      	bls.n	8009d7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009d56:	3301      	adds	r3, #1
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d903      	bls.n	8009d72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	220d      	movs	r2, #13
 8009d6e:	701a      	strb	r2, [r3, #0]
      break;
 8009d70:	e16b      	b.n	800a04a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	701a      	strb	r2, [r3, #0]
      break;
 8009d78:	e167      	b.n	800a04a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d80:	f103 020a 	add.w	r2, r3, #10
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009d8a:	200a      	movs	r0, #10
 8009d8c:	f001 fc64 	bl	800b658 <USBH_Delay>
      break;
 8009d90:	e15b      	b.n	800a04a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009da2:	2104      	movs	r1, #4
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009da8:	2064      	movs	r0, #100	; 0x64
 8009daa:	f001 fc55 	bl	800b658 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 fb24 	bl	800b3fc <USBH_LL_GetSpeed>
 8009db4:	4603      	mov	r3, r0
 8009db6:	461a      	mov	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 f92f 	bl	800b02a <USBH_AllocPipe>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009dd4:	2180      	movs	r1, #128	; 0x80
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 f927 	bl	800b02a <USBH_AllocPipe>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	461a      	mov	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	7919      	ldrb	r1, [r3, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009df8:	b292      	uxth	r2, r2
 8009dfa:	9202      	str	r2, [sp, #8]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	9201      	str	r2, [sp, #4]
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4603      	mov	r3, r0
 8009e04:	2280      	movs	r2, #128	; 0x80
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f001 f8e0 	bl	800afcc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7959      	ldrb	r1, [r3, #5]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009e20:	b292      	uxth	r2, r2
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	2200      	movs	r2, #0
 8009e26:	9201      	str	r2, [sp, #4]
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 f8cc 	bl	800afcc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e34:	e109      	b.n	800a04a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f90c 	bl	800a054 <USBH_HandleEnum>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 80f3 	bne.w	800a030 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d103      	bne.n	8009e64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2208      	movs	r2, #8
 8009e60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e62:	e0e5      	b.n	800a030 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2207      	movs	r2, #7
 8009e68:	701a      	strb	r2, [r3, #0]
      break;
 8009e6a:	e0e1      	b.n	800a030 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80de 	beq.w	800a034 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e7e:	2101      	movs	r1, #1
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2208      	movs	r2, #8
 8009e88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009e8a:	e0d3      	b.n	800a034 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fc20 	bl	800a6dc <USBH_SetCfg>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f040 80ca 	bne.w	800a038 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2209      	movs	r2, #9
 8009ea8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009eaa:	e0c5      	b.n	800a038 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00b      	beq.n	8009ed2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009eba:	2101      	movs	r1, #1
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fc30 	bl	800a722 <USBH_SetFeature>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f040 80b9 	bne.w	800a03c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	220a      	movs	r2, #10
 8009ece:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ed0:	e0b4      	b.n	800a03c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	220a      	movs	r2, #10
 8009ed6:	701a      	strb	r2, [r3, #0]
      break;
 8009ed8:	e0b0      	b.n	800a03c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 80ad 	beq.w	800a040 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]
 8009ef2:	e016      	b.n	8009f22 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32de      	adds	r2, #222	; 0xde
 8009efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efe:	791a      	ldrb	r2, [r3, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d108      	bne.n	8009f1c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009f0a:	7bfa      	ldrb	r2, [r7, #15]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	32de      	adds	r2, #222	; 0xde
 8009f10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009f1a:	e005      	b.n	8009f28 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	73fb      	strb	r3, [r7, #15]
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0e5      	beq.n	8009ef4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d016      	beq.n	8009f60 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	4798      	blx	r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d109      	bne.n	8009f58 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2206      	movs	r2, #6
 8009f48:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f50:	2103      	movs	r1, #3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f56:	e073      	b.n	800a040 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	220d      	movs	r2, #13
 8009f5c:	701a      	strb	r2, [r3, #0]
      break;
 8009f5e:	e06f      	b.n	800a040 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	220d      	movs	r2, #13
 8009f64:	701a      	strb	r2, [r3, #0]
      break;
 8009f66:	e06b      	b.n	800a040 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d017      	beq.n	8009fa2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d103      	bne.n	8009f92 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	220b      	movs	r2, #11
 8009f8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f90:	e058      	b.n	800a044 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d154      	bne.n	800a044 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	220d      	movs	r2, #13
 8009f9e:	701a      	strb	r2, [r3, #0]
      break;
 8009fa0:	e050      	b.n	800a044 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	220d      	movs	r2, #13
 8009fa6:	701a      	strb	r2, [r3, #0]
      break;
 8009fa8:	e04c      	b.n	800a044 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d049      	beq.n	800a048 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	4798      	blx	r3
      }
      break;
 8009fc0:	e042      	b.n	800a048 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff fd72 	bl	8009ab4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ffe:	2105      	movs	r1, #5
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d107      	bne.n	800a020 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff fe2b 	bl	8009c74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a01e:	e014      	b.n	800a04a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f001 f9b5 	bl	800b390 <USBH_LL_Start>
      break;
 800a026:	e010      	b.n	800a04a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a028:	bf00      	nop
 800a02a:	e00e      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a02c:	bf00      	nop
 800a02e:	e00c      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a030:	bf00      	nop
 800a032:	e00a      	b.n	800a04a <USBH_Process+0x3b6>
    break;
 800a034:	bf00      	nop
 800a036:	e008      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a038:	bf00      	nop
 800a03a:	e006      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a03c:	bf00      	nop
 800a03e:	e004      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a040:	bf00      	nop
 800a042:	e002      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a044:	bf00      	nop
 800a046:	e000      	b.n	800a04a <USBH_Process+0x3b6>
      break;
 800a048:	bf00      	nop
  }
  return USBH_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af04      	add	r7, sp, #16
 800a05a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a05c:	2301      	movs	r3, #1
 800a05e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a060:	2301      	movs	r3, #1
 800a062:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	785b      	ldrb	r3, [r3, #1]
 800a068:	2b07      	cmp	r3, #7
 800a06a:	f200 81c1 	bhi.w	800a3f0 <USBH_HandleEnum+0x39c>
 800a06e:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <USBH_HandleEnum+0x20>)
 800a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a074:	0800a095 	.word	0x0800a095
 800a078:	0800a153 	.word	0x0800a153
 800a07c:	0800a1bd 	.word	0x0800a1bd
 800a080:	0800a24b 	.word	0x0800a24b
 800a084:	0800a2b5 	.word	0x0800a2b5
 800a088:	0800a325 	.word	0x0800a325
 800a08c:	0800a36b 	.word	0x0800a36b
 800a090:	0800a3b1 	.word	0x0800a3b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a094:	2108      	movs	r1, #8
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa50 	bl	800a53c <USBH_Get_DevDesc>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d130      	bne.n	800a108 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	7919      	ldrb	r1, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a0ca:	b292      	uxth	r2, r2
 800a0cc:	9202      	str	r2, [sp, #8]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	9201      	str	r2, [sp, #4]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2280      	movs	r2, #128	; 0x80
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 ff77 	bl	800afcc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	7959      	ldrb	r1, [r3, #5]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0f2:	b292      	uxth	r2, r2
 800a0f4:	9202      	str	r2, [sp, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	9201      	str	r2, [sp, #4]
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2200      	movs	r2, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 ff63 	bl	800afcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a106:	e175      	b.n	800a3f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	f040 8172 	bne.w	800a3f4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a116:	3301      	adds	r3, #1
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a126:	2b03      	cmp	r3, #3
 800a128:	d903      	bls.n	800a132 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	220d      	movs	r2, #13
 800a12e:	701a      	strb	r2, [r3, #0]
      break;
 800a130:	e160      	b.n	800a3f4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	795b      	ldrb	r3, [r3, #5]
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 ff97 	bl	800b06c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	791b      	ldrb	r3, [r3, #4]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 ff91 	bl	800b06c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]
      break;
 800a150:	e150      	b.n	800a3f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a152:	2112      	movs	r1, #18
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f9f1 	bl	800a53c <USBH_Get_DevDesc>
 800a15a:	4603      	mov	r3, r0
 800a15c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d103      	bne.n	800a16c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a16a:	e145      	b.n	800a3f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	2b03      	cmp	r3, #3
 800a170:	f040 8142 	bne.w	800a3f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a17a:	3301      	adds	r3, #1
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d903      	bls.n	800a196 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	220d      	movs	r2, #13
 800a192:	701a      	strb	r2, [r3, #0]
      break;
 800a194:	e130      	b.n	800a3f8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	795b      	ldrb	r3, [r3, #5]
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 ff65 	bl	800b06c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	791b      	ldrb	r3, [r3, #4]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 ff5f 	bl	800b06c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
      break;
 800a1ba:	e11d      	b.n	800a3f8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a1bc:	2101      	movs	r1, #1
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa68 	bl	800a694 <USBH_SetAddress>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d132      	bne.n	800a234 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a1ce:	2002      	movs	r0, #2
 800a1d0:	f001 fa42 	bl	800b658 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2203      	movs	r2, #3
 800a1e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7919      	ldrb	r1, [r3, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a1f6:	b292      	uxth	r2, r2
 800a1f8:	9202      	str	r2, [sp, #8]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	9201      	str	r2, [sp, #4]
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	4603      	mov	r3, r0
 800a202:	2280      	movs	r2, #128	; 0x80
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fee1 	bl	800afcc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	7959      	ldrb	r1, [r3, #5]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a21e:	b292      	uxth	r2, r2
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	2200      	movs	r2, #0
 800a224:	9201      	str	r2, [sp, #4]
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4603      	mov	r3, r0
 800a22a:	2200      	movs	r2, #0
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fecd 	bl	800afcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a232:	e0e3      	b.n	800a3fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a234:	7bbb      	ldrb	r3, [r7, #14]
 800a236:	2b03      	cmp	r3, #3
 800a238:	f040 80e0 	bne.w	800a3fc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	220d      	movs	r2, #13
 800a240:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	705a      	strb	r2, [r3, #1]
      break;
 800a248:	e0d8      	b.n	800a3fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a24a:	2109      	movs	r1, #9
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f99d 	bl	800a58c <USBH_Get_CfgDesc>
 800a252:	4603      	mov	r3, r0
 800a254:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d103      	bne.n	800a264 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2204      	movs	r2, #4
 800a260:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a262:	e0cd      	b.n	800a400 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	2b03      	cmp	r3, #3
 800a268:	f040 80ca 	bne.w	800a400 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a272:	3301      	adds	r3, #1
 800a274:	b2da      	uxtb	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a282:	2b03      	cmp	r3, #3
 800a284:	d903      	bls.n	800a28e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	220d      	movs	r2, #13
 800a28a:	701a      	strb	r2, [r3, #0]
      break;
 800a28c:	e0b8      	b.n	800a400 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fee9 	bl	800b06c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	791b      	ldrb	r3, [r3, #4]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fee3 	bl	800b06c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
      break;
 800a2b2:	e0a5      	b.n	800a400 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f965 	bl	800a58c <USBH_Get_CfgDesc>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d103      	bne.n	800a2d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2205      	movs	r2, #5
 800a2d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2d2:	e097      	b.n	800a404 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	f040 8094 	bne.w	800a404 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d903      	bls.n	800a2fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	220d      	movs	r2, #13
 800a2fa:	701a      	strb	r2, [r3, #0]
      break;
 800a2fc:	e082      	b.n	800a404 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	795b      	ldrb	r3, [r3, #5]
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 feb1 	bl	800b06c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 feab 	bl	800b06c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
      break;
 800a322:	e06f      	b.n	800a404 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d019      	beq.n	800a362 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a33a:	23ff      	movs	r3, #255	; 0xff
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f949 	bl	800a5d4 <USBH_Get_StringDesc>
 800a342:	4603      	mov	r3, r0
 800a344:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d103      	bne.n	800a354 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2206      	movs	r2, #6
 800a350:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a352:	e059      	b.n	800a408 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a354:	7bbb      	ldrb	r3, [r7, #14]
 800a356:	2b03      	cmp	r3, #3
 800a358:	d156      	bne.n	800a408 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2206      	movs	r2, #6
 800a35e:	705a      	strb	r2, [r3, #1]
      break;
 800a360:	e052      	b.n	800a408 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2206      	movs	r2, #6
 800a366:	705a      	strb	r2, [r3, #1]
      break;
 800a368:	e04e      	b.n	800a408 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a370:	2b00      	cmp	r3, #0
 800a372:	d019      	beq.n	800a3a8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a380:	23ff      	movs	r3, #255	; 0xff
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f926 	bl	800a5d4 <USBH_Get_StringDesc>
 800a388:	4603      	mov	r3, r0
 800a38a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2207      	movs	r2, #7
 800a396:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a398:	e038      	b.n	800a40c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d135      	bne.n	800a40c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2207      	movs	r2, #7
 800a3a4:	705a      	strb	r2, [r3, #1]
      break;
 800a3a6:	e031      	b.n	800a40c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2207      	movs	r2, #7
 800a3ac:	705a      	strb	r2, [r3, #1]
      break;
 800a3ae:	e02d      	b.n	800a40c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d017      	beq.n	800a3ea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a3c6:	23ff      	movs	r3, #255	; 0xff
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f903 	bl	800a5d4 <USBH_Get_StringDesc>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a3dc:	e018      	b.n	800a410 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d115      	bne.n	800a410 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e8:	e012      	b.n	800a410 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ee:	e00f      	b.n	800a410 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a3f0:	bf00      	nop
 800a3f2:	e00e      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a3f4:	bf00      	nop
 800a3f6:	e00c      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a3f8:	bf00      	nop
 800a3fa:	e00a      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a3fc:	bf00      	nop
 800a3fe:	e008      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a400:	bf00      	nop
 800a402:	e006      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a404:	bf00      	nop
 800a406:	e004      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a408:	bf00      	nop
 800a40a:	e002      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a40c:	bf00      	nop
 800a40e:	e000      	b.n	800a412 <USBH_HandleEnum+0x3be>
      break;
 800a410:	bf00      	nop
  }
  return Status;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f804 	bl	800a45e <USBH_HandleSof>
}
 800a456:	bf00      	nop
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b0b      	cmp	r3, #11
 800a46e:	d10a      	bne.n	800a486 <USBH_HandleSof+0x28>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
  }
}
 800a486:	bf00      	nop
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a49e:	bf00      	nop
}
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a4ba:	bf00      	nop
}
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 ff56 	bl	800b3c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	791b      	ldrb	r3, [r3, #4]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fda3 	bl	800b06c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	795b      	ldrb	r3, [r3, #5]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fd9d 	bl	800b06c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af02      	add	r7, sp, #8
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a54e:	78fb      	ldrb	r3, [r7, #3]
 800a550:	b29b      	uxth	r3, r3
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f864 	bl	800a62a <USBH_GetDescriptor>
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	b292      	uxth	r2, r2
 800a57c:	4619      	mov	r1, r3
 800a57e:	f000 f918 	bl	800a7b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a582:	7bfb      	ldrb	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af02      	add	r7, sp, #8
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	331c      	adds	r3, #28
 800a59c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a59e:	887b      	ldrh	r3, [r7, #2]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f83d 	bl	800a62a <USBH_GetDescriptor>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	72fb      	strb	r3, [r7, #11]
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d107      	bne.n	800a5ca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a5c0:	887a      	ldrh	r2, [r7, #2]
 800a5c2:	68f9      	ldr	r1, [r7, #12]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f964 	bl	800a892 <USBH_ParseCfgDesc>
  }

  return status;
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	72fb      	strb	r3, [r7, #11]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a5f0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a5f8:	893b      	ldrh	r3, [r7, #8]
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	2100      	movs	r1, #0
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 f812 	bl	800a62a <USBH_GetDescriptor>
 800a606:	4603      	mov	r3, r0
 800a608:	75fb      	strb	r3, [r7, #23]
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d107      	bne.n	800a620 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a616:	893a      	ldrh	r2, [r7, #8]
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fa37 	bl	800aa8e <USBH_ParseStringDesc>
  }

  return status;
 800a620:	7dfb      	ldrb	r3, [r7, #23]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	607b      	str	r3, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	72fb      	strb	r3, [r7, #11]
 800a638:	4613      	mov	r3, r2
 800a63a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	789b      	ldrb	r3, [r3, #2]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d11c      	bne.n	800a67e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a644:	7afb      	ldrb	r3, [r7, #11]
 800a646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2206      	movs	r2, #6
 800a654:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	893a      	ldrh	r2, [r7, #8]
 800a65a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a65c:	893b      	ldrh	r3, [r7, #8]
 800a65e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a666:	d104      	bne.n	800a672 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f240 4209 	movw	r2, #1033	; 0x409
 800a66e:	829a      	strh	r2, [r3, #20]
 800a670:	e002      	b.n	800a678 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8b3a      	ldrh	r2, [r7, #24]
 800a67c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a67e:	8b3b      	ldrh	r3, [r7, #24]
 800a680:	461a      	mov	r2, r3
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fa50 	bl	800ab2a <USBH_CtlReq>
 800a68a:	4603      	mov	r3, r0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	789b      	ldrb	r3, [r3, #2]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d10f      	bne.n	800a6c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2205      	movs	r2, #5
 800a6b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fa2c 	bl	800ab2a <USBH_CtlReq>
 800a6d2:	4603      	mov	r3, r0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	789b      	ldrb	r3, [r3, #2]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10e      	bne.n	800a70e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2209      	movs	r2, #9
 800a6fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	887a      	ldrh	r2, [r7, #2]
 800a700:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a70e:	2200      	movs	r2, #0
 800a710:	2100      	movs	r1, #0
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa09 	bl	800ab2a <USBH_CtlReq>
 800a718:	4603      	mov	r3, r0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	789b      	ldrb	r3, [r3, #2]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d10f      	bne.n	800a756 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2203      	movs	r2, #3
 800a740:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	b29a      	uxth	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a756:	2200      	movs	r2, #0
 800a758:	2100      	movs	r1, #0
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f9e5 	bl	800ab2a <USBH_CtlReq>
 800a760:	4603      	mov	r3, r0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	789b      	ldrb	r3, [r3, #2]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d10f      	bne.n	800a79e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	b29a      	uxth	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f9c1 	bl	800ab2a <USBH_CtlReq>
 800a7a8:	4603      	mov	r3, r0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	781a      	ldrb	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	785a      	ldrb	r2, [r3, #1]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	3303      	adds	r3, #3
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	791a      	ldrb	r2, [r3, #4]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	795a      	ldrb	r2, [r3, #5]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	799a      	ldrb	r2, [r3, #6]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	79da      	ldrb	r2, [r3, #7]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	2b08      	cmp	r3, #8
 800a810:	d939      	bls.n	800a886 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	3308      	adds	r3, #8
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	b29a      	uxth	r2, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	3309      	adds	r3, #9
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	b29b      	uxth	r3, r3
 800a826:	4313      	orrs	r3, r2
 800a828:	b29a      	uxth	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	330a      	adds	r3, #10
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b29a      	uxth	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	330b      	adds	r3, #11
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	021b      	lsls	r3, r3, #8
 800a840:	b29b      	uxth	r3, r3
 800a842:	4313      	orrs	r3, r2
 800a844:	b29a      	uxth	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	330c      	adds	r3, #12
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	b29a      	uxth	r2, r3
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	330d      	adds	r3, #13
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	021b      	lsls	r3, r3, #8
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	b29a      	uxth	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	7b9a      	ldrb	r2, [r3, #14]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	7bda      	ldrb	r2, [r3, #15]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	7c1a      	ldrb	r2, [r3, #16]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	7c5a      	ldrb	r2, [r3, #17]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	745a      	strb	r2, [r3, #17]
  }
}
 800a886:	bf00      	nop
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b08a      	sub	sp, #40	; 0x28
 800a896:	af00      	add	r7, sp, #0
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	4613      	mov	r3, r2
 800a89e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	781a      	ldrb	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	785a      	ldrb	r2, [r3, #1]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	3303      	adds	r3, #3
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	791a      	ldrb	r2, [r3, #4]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	795a      	ldrb	r2, [r3, #5]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	799a      	ldrb	r2, [r3, #6]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	79da      	ldrb	r2, [r3, #7]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	7a1a      	ldrb	r2, [r3, #8]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a908:	88fb      	ldrh	r3, [r7, #6]
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d95f      	bls.n	800a9ce <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a90e:	2309      	movs	r3, #9
 800a910:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a916:	e051      	b.n	800a9bc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a918:	f107 0316 	add.w	r3, r7, #22
 800a91c:	4619      	mov	r1, r3
 800a91e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a920:	f000 f8e8 	bl	800aaf4 <USBH_GetNextDesc>
 800a924:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	785b      	ldrb	r3, [r3, #1]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d146      	bne.n	800a9bc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a92e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a932:	221a      	movs	r2, #26
 800a934:	fb02 f303 	mul.w	r3, r2, r3
 800a938:	3308      	adds	r3, #8
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4413      	add	r3, r2
 800a93e:	3302      	adds	r3, #2
 800a940:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a944:	69f8      	ldr	r0, [r7, #28]
 800a946:	f000 f846 	bl	800a9d6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a950:	2300      	movs	r3, #0
 800a952:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a954:	e022      	b.n	800a99c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a956:	f107 0316 	add.w	r3, r7, #22
 800a95a:	4619      	mov	r1, r3
 800a95c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a95e:	f000 f8c9 	bl	800aaf4 <USBH_GetNextDesc>
 800a962:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2b05      	cmp	r3, #5
 800a96a:	d117      	bne.n	800a99c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a96c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a970:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a974:	3201      	adds	r2, #1
 800a976:	00d2      	lsls	r2, r2, #3
 800a978:	211a      	movs	r1, #26
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	4413      	add	r3, r2
 800a980:	3308      	adds	r3, #8
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4413      	add	r3, r2
 800a986:	3304      	adds	r3, #4
 800a988:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a98a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a98c:	69b8      	ldr	r0, [r7, #24]
 800a98e:	f000 f851 	bl	800aa34 <USBH_ParseEPDesc>
            ep_ix++;
 800a992:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a996:	3301      	adds	r3, #1
 800a998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	791b      	ldrb	r3, [r3, #4]
 800a9a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d204      	bcs.n	800a9b2 <USBH_ParseCfgDesc+0x120>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	885a      	ldrh	r2, [r3, #2]
 800a9ac:	8afb      	ldrh	r3, [r7, #22]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d8d1      	bhi.n	800a956 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a9b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a9bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d804      	bhi.n	800a9ce <USBH_ParseCfgDesc+0x13c>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	885a      	ldrh	r2, [r3, #2]
 800a9c8:	8afb      	ldrh	r3, [r7, #22]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d8a4      	bhi.n	800a918 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	3728      	adds	r7, #40	; 0x28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781a      	ldrb	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	785a      	ldrb	r2, [r3, #1]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	789a      	ldrb	r2, [r3, #2]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	78da      	ldrb	r2, [r3, #3]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	791a      	ldrb	r2, [r3, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	795a      	ldrb	r2, [r3, #5]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	799a      	ldrb	r2, [r3, #6]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	79da      	ldrb	r2, [r3, #7]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	7a1a      	ldrb	r2, [r3, #8]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	721a      	strb	r2, [r3, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	785a      	ldrb	r2, [r3, #1]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	789a      	ldrb	r2, [r3, #2]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	78da      	ldrb	r2, [r3, #3]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	3304      	adds	r3, #4
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	3305      	adds	r3, #5
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4313      	orrs	r3, r2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	799a      	ldrb	r2, [r3, #6]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	719a      	strb	r2, [r3, #6]
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b087      	sub	sp, #28
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d120      	bne.n	800aae8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	1e9a      	subs	r2, r3, #2
 800aaac:	88fb      	ldrh	r3, [r7, #6]
 800aaae:	4293      	cmp	r3, r2
 800aab0:	bf28      	it	cs
 800aab2:	4613      	movcs	r3, r2
 800aab4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3302      	adds	r3, #2
 800aaba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aabc:	2300      	movs	r3, #0
 800aabe:	82fb      	strh	r3, [r7, #22]
 800aac0:	e00b      	b.n	800aada <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aac2:	8afb      	ldrh	r3, [r7, #22]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3301      	adds	r3, #1
 800aad2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aad4:	8afb      	ldrh	r3, [r7, #22]
 800aad6:	3302      	adds	r3, #2
 800aad8:	82fb      	strh	r3, [r7, #22]
 800aada:	8afa      	ldrh	r2, [r7, #22]
 800aadc:	8abb      	ldrh	r3, [r7, #20]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d3ef      	bcc.n	800aac2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	701a      	strb	r2, [r3, #0]
  }
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	4413      	add	r3, r2
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4413      	add	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b086      	sub	sp, #24
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	4613      	mov	r3, r2
 800ab36:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	789b      	ldrb	r3, [r3, #2]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d002      	beq.n	800ab4a <USBH_CtlReq+0x20>
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d00f      	beq.n	800ab68 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ab48:	e027      	b.n	800ab9a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	88fa      	ldrh	r2, [r7, #6]
 800ab54:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ab62:	2301      	movs	r3, #1
 800ab64:	75fb      	strb	r3, [r7, #23]
      break;
 800ab66:	e018      	b.n	800ab9a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f81b 	bl	800aba4 <USBH_HandleControl>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <USBH_CtlReq+0x54>
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d106      	bne.n	800ab8c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2201      	movs	r2, #1
 800ab82:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	761a      	strb	r2, [r3, #24]
      break;
 800ab8a:	e005      	b.n	800ab98 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d102      	bne.n	800ab98 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	709a      	strb	r2, [r3, #2]
      break;
 800ab98:	bf00      	nop
  }
  return status;
 800ab9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af02      	add	r7, sp, #8
 800abaa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800abac:	2301      	movs	r3, #1
 800abae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7e1b      	ldrb	r3, [r3, #24]
 800abb8:	3b01      	subs	r3, #1
 800abba:	2b0a      	cmp	r3, #10
 800abbc:	f200 8156 	bhi.w	800ae6c <USBH_HandleControl+0x2c8>
 800abc0:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <USBH_HandleControl+0x24>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abf5 	.word	0x0800abf5
 800abcc:	0800ac0f 	.word	0x0800ac0f
 800abd0:	0800ac79 	.word	0x0800ac79
 800abd4:	0800ac9f 	.word	0x0800ac9f
 800abd8:	0800acd7 	.word	0x0800acd7
 800abdc:	0800ad01 	.word	0x0800ad01
 800abe0:	0800ad53 	.word	0x0800ad53
 800abe4:	0800ad75 	.word	0x0800ad75
 800abe8:	0800adb1 	.word	0x0800adb1
 800abec:	0800add7 	.word	0x0800add7
 800abf0:	0800ae15 	.word	0x0800ae15
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f103 0110 	add.w	r1, r3, #16
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	795b      	ldrb	r3, [r3, #5]
 800abfe:	461a      	mov	r2, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f943 	bl	800ae8c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2202      	movs	r2, #2
 800ac0a:	761a      	strb	r2, [r3, #24]
      break;
 800ac0c:	e139      	b.n	800ae82 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	795b      	ldrb	r3, [r3, #5]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fcc5 	bl	800b5a4 <USBH_LL_GetURBState>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d11e      	bne.n	800ac62 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7c1b      	ldrb	r3, [r3, #16]
 800ac28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac2c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	8adb      	ldrh	r3, [r3, #22]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00a      	beq.n	800ac4c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ac36:	7b7b      	ldrb	r3, [r7, #13]
 800ac38:	2b80      	cmp	r3, #128	; 0x80
 800ac3a:	d103      	bne.n	800ac44 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2203      	movs	r2, #3
 800ac40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac42:	e115      	b.n	800ae70 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2205      	movs	r2, #5
 800ac48:	761a      	strb	r2, [r3, #24]
      break;
 800ac4a:	e111      	b.n	800ae70 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ac4c:	7b7b      	ldrb	r3, [r7, #13]
 800ac4e:	2b80      	cmp	r3, #128	; 0x80
 800ac50:	d103      	bne.n	800ac5a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2209      	movs	r2, #9
 800ac56:	761a      	strb	r2, [r3, #24]
      break;
 800ac58:	e10a      	b.n	800ae70 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2207      	movs	r2, #7
 800ac5e:	761a      	strb	r2, [r3, #24]
      break;
 800ac60:	e106      	b.n	800ae70 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d003      	beq.n	800ac70 <USBH_HandleControl+0xcc>
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	f040 8100 	bne.w	800ae70 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	220b      	movs	r2, #11
 800ac74:	761a      	strb	r2, [r3, #24]
      break;
 800ac76:	e0fb      	b.n	800ae70 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6899      	ldr	r1, [r3, #8]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	899a      	ldrh	r2, [r3, #12]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	791b      	ldrb	r3, [r3, #4]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f93a 	bl	800af0a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	761a      	strb	r2, [r3, #24]
      break;
 800ac9c:	e0f1      	b.n	800ae82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	791b      	ldrb	r3, [r3, #4]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fc7d 	bl	800b5a4 <USBH_LL_GetURBState>
 800acaa:	4603      	mov	r3, r0
 800acac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d102      	bne.n	800acba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2209      	movs	r2, #9
 800acb8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	2b05      	cmp	r3, #5
 800acbe:	d102      	bne.n	800acc6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800acc0:	2303      	movs	r3, #3
 800acc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800acc4:	e0d6      	b.n	800ae74 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b04      	cmp	r3, #4
 800acca:	f040 80d3 	bne.w	800ae74 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	220b      	movs	r2, #11
 800acd2:	761a      	strb	r2, [r3, #24]
      break;
 800acd4:	e0ce      	b.n	800ae74 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6899      	ldr	r1, [r3, #8]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	899a      	ldrh	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	795b      	ldrb	r3, [r3, #5]
 800ace2:	2001      	movs	r0, #1
 800ace4:	9000      	str	r0, [sp, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f8ea 	bl	800aec0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2206      	movs	r2, #6
 800acfc:	761a      	strb	r2, [r3, #24]
      break;
 800acfe:	e0c0      	b.n	800ae82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	795b      	ldrb	r3, [r3, #5]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fc4c 	bl	800b5a4 <USBH_LL_GetURBState>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d103      	bne.n	800ad1e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2207      	movs	r2, #7
 800ad1a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad1c:	e0ac      	b.n	800ae78 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
 800ad20:	2b05      	cmp	r3, #5
 800ad22:	d105      	bne.n	800ad30 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	220c      	movs	r2, #12
 800ad28:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad2e:	e0a3      	b.n	800ae78 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d103      	bne.n	800ad3e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2205      	movs	r2, #5
 800ad3a:	761a      	strb	r2, [r3, #24]
      break;
 800ad3c:	e09c      	b.n	800ae78 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	f040 8099 	bne.w	800ae78 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	220b      	movs	r2, #11
 800ad4a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad50:	e092      	b.n	800ae78 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	791b      	ldrb	r3, [r3, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	2100      	movs	r1, #0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f8d5 	bl	800af0a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2208      	movs	r2, #8
 800ad70:	761a      	strb	r2, [r3, #24]

      break;
 800ad72:	e086      	b.n	800ae82 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	791b      	ldrb	r3, [r3, #4]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fc12 	bl	800b5a4 <USBH_LL_GetURBState>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d105      	bne.n	800ad96 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	220d      	movs	r2, #13
 800ad8e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad94:	e072      	b.n	800ae7c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d103      	bne.n	800ada4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	220b      	movs	r2, #11
 800ada0:	761a      	strb	r2, [r3, #24]
      break;
 800ada2:	e06b      	b.n	800ae7c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	d168      	bne.n	800ae7c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800adaa:	2303      	movs	r3, #3
 800adac:	73fb      	strb	r3, [r7, #15]
      break;
 800adae:	e065      	b.n	800ae7c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	795b      	ldrb	r3, [r3, #5]
 800adb4:	2201      	movs	r2, #1
 800adb6:	9200      	str	r2, [sp, #0]
 800adb8:	2200      	movs	r2, #0
 800adba:	2100      	movs	r1, #0
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f87f 	bl	800aec0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adc8:	b29a      	uxth	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	220a      	movs	r2, #10
 800add2:	761a      	strb	r2, [r3, #24]
      break;
 800add4:	e055      	b.n	800ae82 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	795b      	ldrb	r3, [r3, #5]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fbe1 	bl	800b5a4 <USBH_LL_GetURBState>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d105      	bne.n	800adf8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	220d      	movs	r2, #13
 800adf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adf6:	e043      	b.n	800ae80 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d103      	bne.n	800ae06 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2209      	movs	r2, #9
 800ae02:	761a      	strb	r2, [r3, #24]
      break;
 800ae04:	e03c      	b.n	800ae80 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d139      	bne.n	800ae80 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	220b      	movs	r2, #11
 800ae10:	761a      	strb	r2, [r3, #24]
      break;
 800ae12:	e035      	b.n	800ae80 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	7e5b      	ldrb	r3, [r3, #25]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	765a      	strb	r2, [r3, #25]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	7e5b      	ldrb	r3, [r3, #25]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d806      	bhi.n	800ae36 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ae34:	e025      	b.n	800ae82 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae3c:	2106      	movs	r1, #6
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	795b      	ldrb	r3, [r3, #5]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f90c 	bl	800b06c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	791b      	ldrb	r3, [r3, #4]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f906 	bl	800b06c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ae66:	2302      	movs	r3, #2
 800ae68:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6a:	e00a      	b.n	800ae82 <USBH_HandleControl+0x2de>

    default:
      break;
 800ae6c:	bf00      	nop
 800ae6e:	e008      	b.n	800ae82 <USBH_HandleControl+0x2de>
      break;
 800ae70:	bf00      	nop
 800ae72:	e006      	b.n	800ae82 <USBH_HandleControl+0x2de>
      break;
 800ae74:	bf00      	nop
 800ae76:	e004      	b.n	800ae82 <USBH_HandleControl+0x2de>
      break;
 800ae78:	bf00      	nop
 800ae7a:	e002      	b.n	800ae82 <USBH_HandleControl+0x2de>
      break;
 800ae7c:	bf00      	nop
 800ae7e:	e000      	b.n	800ae82 <USBH_HandleControl+0x2de>
      break;
 800ae80:	bf00      	nop
  }

  return status;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af04      	add	r7, sp, #16
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	4613      	mov	r3, r2
 800ae98:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae9a:	79f9      	ldrb	r1, [r7, #7]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	2308      	movs	r3, #8
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	2300      	movs	r3, #0
 800aeae:	2200      	movs	r2, #0
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 fb46 	bl	800b542 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af04      	add	r7, sp, #16
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4611      	mov	r1, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	460b      	mov	r3, r1
 800aed0:	80fb      	strh	r3, [r7, #6]
 800aed2:	4613      	mov	r3, r2
 800aed4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aee0:	2300      	movs	r3, #0
 800aee2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aee4:	7979      	ldrb	r1, [r7, #5]
 800aee6:	7e3b      	ldrb	r3, [r7, #24]
 800aee8:	9303      	str	r3, [sp, #12]
 800aeea:	88fb      	ldrh	r3, [r7, #6]
 800aeec:	9302      	str	r3, [sp, #8]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	2301      	movs	r3, #1
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	2300      	movs	r3, #0
 800aef8:	2200      	movs	r2, #0
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 fb21 	bl	800b542 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b088      	sub	sp, #32
 800af0e:	af04      	add	r7, sp, #16
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	4611      	mov	r1, r2
 800af16:	461a      	mov	r2, r3
 800af18:	460b      	mov	r3, r1
 800af1a:	80fb      	strh	r3, [r7, #6]
 800af1c:	4613      	mov	r3, r2
 800af1e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800af20:	7979      	ldrb	r1, [r7, #5]
 800af22:	2300      	movs	r3, #0
 800af24:	9303      	str	r3, [sp, #12]
 800af26:	88fb      	ldrh	r3, [r7, #6]
 800af28:	9302      	str	r3, [sp, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	2301      	movs	r3, #1
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	2201      	movs	r2, #1
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 fb03 	bl	800b542 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800af3c:	2300      	movs	r3, #0

}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b088      	sub	sp, #32
 800af4a:	af04      	add	r7, sp, #16
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	4611      	mov	r1, r2
 800af52:	461a      	mov	r2, r3
 800af54:	460b      	mov	r3, r1
 800af56:	80fb      	strh	r3, [r7, #6]
 800af58:	4613      	mov	r3, r2
 800af5a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800af6a:	7979      	ldrb	r1, [r7, #5]
 800af6c:	7e3b      	ldrb	r3, [r7, #24]
 800af6e:	9303      	str	r3, [sp, #12]
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	9302      	str	r3, [sp, #8]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	2301      	movs	r3, #1
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	2302      	movs	r3, #2
 800af7e:	2200      	movs	r2, #0
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 fade 	bl	800b542 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af04      	add	r7, sp, #16
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	4611      	mov	r1, r2
 800af9c:	461a      	mov	r2, r3
 800af9e:	460b      	mov	r3, r1
 800afa0:	80fb      	strh	r3, [r7, #6]
 800afa2:	4613      	mov	r3, r2
 800afa4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800afa6:	7979      	ldrb	r1, [r7, #5]
 800afa8:	2300      	movs	r3, #0
 800afaa:	9303      	str	r3, [sp, #12]
 800afac:	88fb      	ldrh	r3, [r7, #6]
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	2301      	movs	r3, #1
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	2302      	movs	r3, #2
 800afba:	2201      	movs	r2, #1
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 fac0 	bl	800b542 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af04      	add	r7, sp, #16
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	4608      	mov	r0, r1
 800afd6:	4611      	mov	r1, r2
 800afd8:	461a      	mov	r2, r3
 800afda:	4603      	mov	r3, r0
 800afdc:	70fb      	strb	r3, [r7, #3]
 800afde:	460b      	mov	r3, r1
 800afe0:	70bb      	strb	r3, [r7, #2]
 800afe2:	4613      	mov	r3, r2
 800afe4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800afe6:	7878      	ldrb	r0, [r7, #1]
 800afe8:	78ba      	ldrb	r2, [r7, #2]
 800afea:	78f9      	ldrb	r1, [r7, #3]
 800afec:	8b3b      	ldrh	r3, [r7, #24]
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	7d3b      	ldrb	r3, [r7, #20]
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	7c3b      	ldrb	r3, [r7, #16]
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	4603      	mov	r3, r0
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fa53 	bl	800b4a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b016:	78fb      	ldrb	r3, [r7, #3]
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa72 	bl	800b504 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f836 	bl	800b0a8 <USBH_GetFreePipe>
 800b03c:	4603      	mov	r3, r0
 800b03e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b040:	89fb      	ldrh	r3, [r7, #14]
 800b042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b046:	4293      	cmp	r3, r2
 800b048:	d00a      	beq.n	800b060 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b04a:	78fa      	ldrb	r2, [r7, #3]
 800b04c:	89fb      	ldrh	r3, [r7, #14]
 800b04e:	f003 030f 	and.w	r3, r3, #15
 800b052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	33e0      	adds	r3, #224	; 0xe0
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b060:	89fb      	ldrh	r3, [r7, #14]
 800b062:	b2db      	uxtb	r3, r3
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b078:	78fb      	ldrb	r3, [r7, #3]
 800b07a:	2b0a      	cmp	r3, #10
 800b07c:	d80d      	bhi.n	800b09a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	33e0      	adds	r3, #224	; 0xe0
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	33e0      	adds	r3, #224	; 0xe0
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
 800b0b8:	e00f      	b.n	800b0da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	33e0      	adds	r3, #224	; 0xe0
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d102      	bne.n	800b0d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	e007      	b.n	800b0e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	73fb      	strb	r3, [r7, #15]
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b0a      	cmp	r3, #10
 800b0de:	d9ec      	bls.n	800b0ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b0e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	490e      	ldr	r1, [pc, #56]	; (800b130 <MX_USB_HOST_Init+0x40>)
 800b0f8:	480e      	ldr	r0, [pc, #56]	; (800b134 <MX_USB_HOST_Init+0x44>)
 800b0fa:	f7fe fca1 	bl	8009a40 <USBH_Init>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b104:	f7f6 fd44 	bl	8001b90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b108:	490b      	ldr	r1, [pc, #44]	; (800b138 <MX_USB_HOST_Init+0x48>)
 800b10a:	480a      	ldr	r0, [pc, #40]	; (800b134 <MX_USB_HOST_Init+0x44>)
 800b10c:	f7fe fd26 	bl	8009b5c <USBH_RegisterClass>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b116:	f7f6 fd3b 	bl	8001b90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b11a:	4806      	ldr	r0, [pc, #24]	; (800b134 <MX_USB_HOST_Init+0x44>)
 800b11c:	f7fe fdaa 	bl	8009c74 <USBH_Start>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b126:	f7f6 fd33 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b12a:	bf00      	nop
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	0800b151 	.word	0x0800b151
 800b134:	20000478 	.word	0x20000478
 800b138:	2000001c 	.word	0x2000001c

0800b13c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b140:	4802      	ldr	r0, [pc, #8]	; (800b14c <MX_USB_HOST_Process+0x10>)
 800b142:	f7fe fda7 	bl	8009c94 <USBH_Process>
}
 800b146:	bf00      	nop
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000478 	.word	0x20000478

0800b150 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	3b01      	subs	r3, #1
 800b160:	2b04      	cmp	r3, #4
 800b162:	d819      	bhi.n	800b198 <USBH_UserProcess+0x48>
 800b164:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <USBH_UserProcess+0x1c>)
 800b166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16a:	bf00      	nop
 800b16c:	0800b199 	.word	0x0800b199
 800b170:	0800b189 	.word	0x0800b189
 800b174:	0800b199 	.word	0x0800b199
 800b178:	0800b191 	.word	0x0800b191
 800b17c:	0800b181 	.word	0x0800b181
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b180:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <USBH_UserProcess+0x58>)
 800b182:	2203      	movs	r2, #3
 800b184:	701a      	strb	r2, [r3, #0]
  break;
 800b186:	e008      	b.n	800b19a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b188:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <USBH_UserProcess+0x58>)
 800b18a:	2202      	movs	r2, #2
 800b18c:	701a      	strb	r2, [r3, #0]
  break;
 800b18e:	e004      	b.n	800b19a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b190:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <USBH_UserProcess+0x58>)
 800b192:	2201      	movs	r2, #1
 800b194:	701a      	strb	r2, [r3, #0]
  break;
 800b196:	e000      	b.n	800b19a <USBH_UserProcess+0x4a>

  default:
  break;
 800b198:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b19a:	bf00      	nop
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20000290 	.word	0x20000290

0800b1ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	; 0x28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1b4:	f107 0314 	add.w	r3, r7, #20
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	605a      	str	r2, [r3, #4]
 800b1be:	609a      	str	r2, [r3, #8]
 800b1c0:	60da      	str	r2, [r3, #12]
 800b1c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1cc:	d147      	bne.n	800b25e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	4b25      	ldr	r3, [pc, #148]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	4a24      	ldr	r2, [pc, #144]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b1d8:	f043 0301 	orr.w	r3, r3, #1
 800b1dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b1de:	4b22      	ldr	r3, [pc, #136]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	613b      	str	r3, [r7, #16]
 800b1e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b1ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b1f8:	f107 0314 	add.w	r3, r7, #20
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	481b      	ldr	r0, [pc, #108]	; (800b26c <HAL_HCD_MspInit+0xc0>)
 800b200:	f7f7 fa76 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b204:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b20a:	2302      	movs	r3, #2
 800b20c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b212:	2300      	movs	r3, #0
 800b214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b216:	230a      	movs	r3, #10
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b21a:	f107 0314 	add.w	r3, r7, #20
 800b21e:	4619      	mov	r1, r3
 800b220:	4812      	ldr	r0, [pc, #72]	; (800b26c <HAL_HCD_MspInit+0xc0>)
 800b222:	f7f7 fa65 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b226:	4b10      	ldr	r3, [pc, #64]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22a:	4a0f      	ldr	r2, [pc, #60]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b230:	6353      	str	r3, [r2, #52]	; 0x34
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23a:	4a0b      	ldr	r2, [pc, #44]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b23c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b240:	6453      	str	r3, [r2, #68]	; 0x44
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <HAL_HCD_MspInit+0xbc>)
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b24e:	2200      	movs	r2, #0
 800b250:	2100      	movs	r1, #0
 800b252:	2043      	movs	r0, #67	; 0x43
 800b254:	f7f7 f983 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b258:	2043      	movs	r0, #67	; 0x43
 800b25a:	f7f7 f99c 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b25e:	bf00      	nop
 800b260:	3728      	adds	r7, #40	; 0x28
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	40023800 	.word	0x40023800
 800b26c:	40020000 	.word	0x40020000

0800b270 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff f8db 	bl	800a43a <USBH_LL_IncTimer>
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff f913 	bl	800a4c6 <USBH_LL_Connect>
}
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff f91c 	bl	800a4f4 <USBH_LL_Disconnect>
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff f8cd 	bl	800a48e <USBH_LL_PortEnabled>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff f8cd 	bl	800a4aa <USBH_LL_PortDisabled>
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b326:	2b01      	cmp	r3, #1
 800b328:	d12a      	bne.n	800b380 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b32a:	4a18      	ldr	r2, [pc, #96]	; (800b38c <USBH_LL_Init+0x74>)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a15      	ldr	r2, [pc, #84]	; (800b38c <USBH_LL_Init+0x74>)
 800b336:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b33a:	4b14      	ldr	r3, [pc, #80]	; (800b38c <USBH_LL_Init+0x74>)
 800b33c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b340:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <USBH_LL_Init+0x74>)
 800b344:	2208      	movs	r2, #8
 800b346:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b348:	4b10      	ldr	r3, [pc, #64]	; (800b38c <USBH_LL_Init+0x74>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <USBH_LL_Init+0x74>)
 800b350:	2200      	movs	r2, #0
 800b352:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b354:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <USBH_LL_Init+0x74>)
 800b356:	2202      	movs	r2, #2
 800b358:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b35a:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <USBH_LL_Init+0x74>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b360:	480a      	ldr	r0, [pc, #40]	; (800b38c <USBH_LL_Init+0x74>)
 800b362:	f7f7 fb7a 	bl	8002a5a <HAL_HCD_Init>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b36c:	f7f6 fc10 	bl	8001b90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b370:	4806      	ldr	r0, [pc, #24]	; (800b38c <USBH_LL_Init+0x74>)
 800b372:	f7f7 ff5e 	bl	8003232 <HAL_HCD_GetCurrentFrame>
 800b376:	4603      	mov	r3, r0
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff f84e 	bl	800a41c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000850 	.word	0x20000850

0800b390 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f7 fecd 	bl	8003146 <HAL_HCD_Start>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 f95c 	bl	800b670 <USBH_Get_USB_Status>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7f7 fed5 	bl	800318c <HAL_HCD_Stop>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 f941 	bl	800b670 <USBH_Get_USB_Status>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b404:	2301      	movs	r3, #1
 800b406:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b40e:	4618      	mov	r0, r3
 800b410:	f7f7 ff1d 	bl	800324e <HAL_HCD_GetCurrentSpeed>
 800b414:	4603      	mov	r3, r0
 800b416:	2b02      	cmp	r3, #2
 800b418:	d00c      	beq.n	800b434 <USBH_LL_GetSpeed+0x38>
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d80d      	bhi.n	800b43a <USBH_LL_GetSpeed+0x3e>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <USBH_LL_GetSpeed+0x2c>
 800b422:	2b01      	cmp	r3, #1
 800b424:	d003      	beq.n	800b42e <USBH_LL_GetSpeed+0x32>
 800b426:	e008      	b.n	800b43a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]
    break;
 800b42c:	e008      	b.n	800b440 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b42e:	2301      	movs	r3, #1
 800b430:	73fb      	strb	r3, [r7, #15]
    break;
 800b432:	e005      	b.n	800b440 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b434:	2302      	movs	r3, #2
 800b436:	73fb      	strb	r3, [r7, #15]
    break;
 800b438:	e002      	b.n	800b440 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b43a:	2301      	movs	r3, #1
 800b43c:	73fb      	strb	r3, [r7, #15]
    break;
 800b43e:	bf00      	nop
  }
  return  speed;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b460:	4618      	mov	r0, r3
 800b462:	f7f7 feb0 	bl	80031c6 <HAL_HCD_ResetPort>
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f8ff 	bl	800b670 <USBH_Get_USB_Status>
 800b472:	4603      	mov	r3, r0
 800b474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b476:	7bbb      	ldrb	r3, [r7, #14]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b492:	78fa      	ldrb	r2, [r7, #3]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7f7 feb7 	bl	800320a <HAL_HCD_HC_GetXferCount>
 800b49c:	4603      	mov	r3, r0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b4a6:	b590      	push	{r4, r7, lr}
 800b4a8:	b089      	sub	sp, #36	; 0x24
 800b4aa:	af04      	add	r7, sp, #16
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	70fb      	strb	r3, [r7, #3]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70bb      	strb	r3, [r7, #2]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b4ce:	787c      	ldrb	r4, [r7, #1]
 800b4d0:	78ba      	ldrb	r2, [r7, #2]
 800b4d2:	78f9      	ldrb	r1, [r7, #3]
 800b4d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4d6:	9302      	str	r3, [sp, #8]
 800b4d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4623      	mov	r3, r4
 800b4e6:	f7f7 fb1a 	bl	8002b1e <HAL_HCD_HC_Init>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f8bd 	bl	800b670 <USBH_Get_USB_Status>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}

0800b504 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b51e:	78fa      	ldrb	r2, [r7, #3]
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7f7 fb8a 	bl	8002c3c <HAL_HCD_HC_Halt>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f89e 	bl	800b670 <USBH_Get_USB_Status>
 800b534:	4603      	mov	r3, r0
 800b536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b538:	7bbb      	ldrb	r3, [r7, #14]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b542:	b590      	push	{r4, r7, lr}
 800b544:	b089      	sub	sp, #36	; 0x24
 800b546:	af04      	add	r7, sp, #16
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	4608      	mov	r0, r1
 800b54c:	4611      	mov	r1, r2
 800b54e:	461a      	mov	r2, r3
 800b550:	4603      	mov	r3, r0
 800b552:	70fb      	strb	r3, [r7, #3]
 800b554:	460b      	mov	r3, r1
 800b556:	70bb      	strb	r3, [r7, #2]
 800b558:	4613      	mov	r3, r2
 800b55a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b56a:	787c      	ldrb	r4, [r7, #1]
 800b56c:	78ba      	ldrb	r2, [r7, #2]
 800b56e:	78f9      	ldrb	r1, [r7, #3]
 800b570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b574:	9303      	str	r3, [sp, #12]
 800b576:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b578:	9302      	str	r3, [sp, #8]
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	4623      	mov	r3, r4
 800b586:	f7f7 fb7d 	bl	8002c84 <HAL_HCD_HC_SubmitRequest>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
 800b590:	4618      	mov	r0, r3
 800b592:	f000 f86d 	bl	800b670 <USBH_Get_USB_Status>
 800b596:	4603      	mov	r3, r0
 800b598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd90      	pop	{r4, r7, pc}

0800b5a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5b6:	78fa      	ldrb	r2, [r7, #3]
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f7 fe11 	bl	80031e2 <HAL_HCD_HC_GetURBState>
 800b5c0:	4603      	mov	r3, r0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d103      	bne.n	800b5e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b5e0:	78fb      	ldrb	r3, [r7, #3]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 f870 	bl	800b6c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b5e8:	20c8      	movs	r0, #200	; 0xc8
 800b5ea:	f7f6 feb9 	bl	8002360 <HAL_Delay>
  return USBH_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	70fb      	strb	r3, [r7, #3]
 800b604:	4613      	mov	r3, r2
 800b606:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b60e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	212c      	movs	r1, #44	; 0x2c
 800b616:	fb01 f303 	mul.w	r3, r1, r3
 800b61a:	4413      	add	r3, r2
 800b61c:	333b      	adds	r3, #59	; 0x3b
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d009      	beq.n	800b638 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	212c      	movs	r1, #44	; 0x2c
 800b62a:	fb01 f303 	mul.w	r3, r1, r3
 800b62e:	4413      	add	r3, r2
 800b630:	3354      	adds	r3, #84	; 0x54
 800b632:	78ba      	ldrb	r2, [r7, #2]
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	e008      	b.n	800b64a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b638:	78fb      	ldrb	r3, [r7, #3]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	212c      	movs	r1, #44	; 0x2c
 800b63e:	fb01 f303 	mul.w	r3, r1, r3
 800b642:	4413      	add	r3, r2
 800b644:	3355      	adds	r3, #85	; 0x55
 800b646:	78ba      	ldrb	r2, [r7, #2]
 800b648:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7f6 fe7d 	bl	8002360 <HAL_Delay>
}
 800b666:	bf00      	nop
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b67e:	79fb      	ldrb	r3, [r7, #7]
 800b680:	2b03      	cmp	r3, #3
 800b682:	d817      	bhi.n	800b6b4 <USBH_Get_USB_Status+0x44>
 800b684:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <USBH_Get_USB_Status+0x1c>)
 800b686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68a:	bf00      	nop
 800b68c:	0800b69d 	.word	0x0800b69d
 800b690:	0800b6a3 	.word	0x0800b6a3
 800b694:	0800b6a9 	.word	0x0800b6a9
 800b698:	0800b6af 	.word	0x0800b6af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a0:	e00b      	b.n	800b6ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a6:	e008      	b.n	800b6ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ac:	e005      	b.n	800b6ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b2:	e002      	b.n	800b6ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b8:	bf00      	nop
  }
  return usb_status;
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b6d6:	79fb      	ldrb	r3, [r7, #7]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]
 800b6e0:	e001      	b.n	800b6e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	2101      	movs	r1, #1
 800b6ec:	4803      	ldr	r0, [pc, #12]	; (800b6fc <MX_DriverVbusFS+0x34>)
 800b6ee:	f7f7 f99b 	bl	8002a28 <HAL_GPIO_WritePin>
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	40020800 	.word	0x40020800

0800b700 <__errno>:
 800b700:	4b01      	ldr	r3, [pc, #4]	; (800b708 <__errno+0x8>)
 800b702:	6818      	ldr	r0, [r3, #0]
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	2000003c 	.word	0x2000003c

0800b70c <__libc_init_array>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	4d0d      	ldr	r5, [pc, #52]	; (800b744 <__libc_init_array+0x38>)
 800b710:	4c0d      	ldr	r4, [pc, #52]	; (800b748 <__libc_init_array+0x3c>)
 800b712:	1b64      	subs	r4, r4, r5
 800b714:	10a4      	asrs	r4, r4, #2
 800b716:	2600      	movs	r6, #0
 800b718:	42a6      	cmp	r6, r4
 800b71a:	d109      	bne.n	800b730 <__libc_init_array+0x24>
 800b71c:	4d0b      	ldr	r5, [pc, #44]	; (800b74c <__libc_init_array+0x40>)
 800b71e:	4c0c      	ldr	r4, [pc, #48]	; (800b750 <__libc_init_array+0x44>)
 800b720:	f002 feba 	bl	800e498 <_init>
 800b724:	1b64      	subs	r4, r4, r5
 800b726:	10a4      	asrs	r4, r4, #2
 800b728:	2600      	movs	r6, #0
 800b72a:	42a6      	cmp	r6, r4
 800b72c:	d105      	bne.n	800b73a <__libc_init_array+0x2e>
 800b72e:	bd70      	pop	{r4, r5, r6, pc}
 800b730:	f855 3b04 	ldr.w	r3, [r5], #4
 800b734:	4798      	blx	r3
 800b736:	3601      	adds	r6, #1
 800b738:	e7ee      	b.n	800b718 <__libc_init_array+0xc>
 800b73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73e:	4798      	blx	r3
 800b740:	3601      	adds	r6, #1
 800b742:	e7f2      	b.n	800b72a <__libc_init_array+0x1e>
 800b744:	0800e95c 	.word	0x0800e95c
 800b748:	0800e95c 	.word	0x0800e95c
 800b74c:	0800e95c 	.word	0x0800e95c
 800b750:	0800e960 	.word	0x0800e960

0800b754 <malloc>:
 800b754:	4b02      	ldr	r3, [pc, #8]	; (800b760 <malloc+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f000 b871 	b.w	800b840 <_malloc_r>
 800b75e:	bf00      	nop
 800b760:	2000003c 	.word	0x2000003c

0800b764 <free>:
 800b764:	4b02      	ldr	r3, [pc, #8]	; (800b770 <free+0xc>)
 800b766:	4601      	mov	r1, r0
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f000 b819 	b.w	800b7a0 <_free_r>
 800b76e:	bf00      	nop
 800b770:	2000003c 	.word	0x2000003c

0800b774 <memcpy>:
 800b774:	440a      	add	r2, r1
 800b776:	4291      	cmp	r1, r2
 800b778:	f100 33ff 	add.w	r3, r0, #4294967295
 800b77c:	d100      	bne.n	800b780 <memcpy+0xc>
 800b77e:	4770      	bx	lr
 800b780:	b510      	push	{r4, lr}
 800b782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b78a:	4291      	cmp	r1, r2
 800b78c:	d1f9      	bne.n	800b782 <memcpy+0xe>
 800b78e:	bd10      	pop	{r4, pc}

0800b790 <memset>:
 800b790:	4402      	add	r2, r0
 800b792:	4603      	mov	r3, r0
 800b794:	4293      	cmp	r3, r2
 800b796:	d100      	bne.n	800b79a <memset+0xa>
 800b798:	4770      	bx	lr
 800b79a:	f803 1b01 	strb.w	r1, [r3], #1
 800b79e:	e7f9      	b.n	800b794 <memset+0x4>

0800b7a0 <_free_r>:
 800b7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7a2:	2900      	cmp	r1, #0
 800b7a4:	d048      	beq.n	800b838 <_free_r+0x98>
 800b7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7aa:	9001      	str	r0, [sp, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b7b2:	bfb8      	it	lt
 800b7b4:	18e4      	addlt	r4, r4, r3
 800b7b6:	f001 fbb3 	bl	800cf20 <__malloc_lock>
 800b7ba:	4a20      	ldr	r2, [pc, #128]	; (800b83c <_free_r+0x9c>)
 800b7bc:	9801      	ldr	r0, [sp, #4]
 800b7be:	6813      	ldr	r3, [r2, #0]
 800b7c0:	4615      	mov	r5, r2
 800b7c2:	b933      	cbnz	r3, 800b7d2 <_free_r+0x32>
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	6014      	str	r4, [r2, #0]
 800b7c8:	b003      	add	sp, #12
 800b7ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ce:	f001 bbad 	b.w	800cf2c <__malloc_unlock>
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	d90b      	bls.n	800b7ee <_free_r+0x4e>
 800b7d6:	6821      	ldr	r1, [r4, #0]
 800b7d8:	1862      	adds	r2, r4, r1
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	bf04      	itt	eq
 800b7de:	681a      	ldreq	r2, [r3, #0]
 800b7e0:	685b      	ldreq	r3, [r3, #4]
 800b7e2:	6063      	str	r3, [r4, #4]
 800b7e4:	bf04      	itt	eq
 800b7e6:	1852      	addeq	r2, r2, r1
 800b7e8:	6022      	streq	r2, [r4, #0]
 800b7ea:	602c      	str	r4, [r5, #0]
 800b7ec:	e7ec      	b.n	800b7c8 <_free_r+0x28>
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	b10b      	cbz	r3, 800b7f8 <_free_r+0x58>
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	d9fa      	bls.n	800b7ee <_free_r+0x4e>
 800b7f8:	6811      	ldr	r1, [r2, #0]
 800b7fa:	1855      	adds	r5, r2, r1
 800b7fc:	42a5      	cmp	r5, r4
 800b7fe:	d10b      	bne.n	800b818 <_free_r+0x78>
 800b800:	6824      	ldr	r4, [r4, #0]
 800b802:	4421      	add	r1, r4
 800b804:	1854      	adds	r4, r2, r1
 800b806:	42a3      	cmp	r3, r4
 800b808:	6011      	str	r1, [r2, #0]
 800b80a:	d1dd      	bne.n	800b7c8 <_free_r+0x28>
 800b80c:	681c      	ldr	r4, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	6053      	str	r3, [r2, #4]
 800b812:	4421      	add	r1, r4
 800b814:	6011      	str	r1, [r2, #0]
 800b816:	e7d7      	b.n	800b7c8 <_free_r+0x28>
 800b818:	d902      	bls.n	800b820 <_free_r+0x80>
 800b81a:	230c      	movs	r3, #12
 800b81c:	6003      	str	r3, [r0, #0]
 800b81e:	e7d3      	b.n	800b7c8 <_free_r+0x28>
 800b820:	6825      	ldr	r5, [r4, #0]
 800b822:	1961      	adds	r1, r4, r5
 800b824:	428b      	cmp	r3, r1
 800b826:	bf04      	itt	eq
 800b828:	6819      	ldreq	r1, [r3, #0]
 800b82a:	685b      	ldreq	r3, [r3, #4]
 800b82c:	6063      	str	r3, [r4, #4]
 800b82e:	bf04      	itt	eq
 800b830:	1949      	addeq	r1, r1, r5
 800b832:	6021      	streq	r1, [r4, #0]
 800b834:	6054      	str	r4, [r2, #4]
 800b836:	e7c7      	b.n	800b7c8 <_free_r+0x28>
 800b838:	b003      	add	sp, #12
 800b83a:	bd30      	pop	{r4, r5, pc}
 800b83c:	20000294 	.word	0x20000294

0800b840 <_malloc_r>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	1ccd      	adds	r5, r1, #3
 800b844:	f025 0503 	bic.w	r5, r5, #3
 800b848:	3508      	adds	r5, #8
 800b84a:	2d0c      	cmp	r5, #12
 800b84c:	bf38      	it	cc
 800b84e:	250c      	movcc	r5, #12
 800b850:	2d00      	cmp	r5, #0
 800b852:	4606      	mov	r6, r0
 800b854:	db01      	blt.n	800b85a <_malloc_r+0x1a>
 800b856:	42a9      	cmp	r1, r5
 800b858:	d903      	bls.n	800b862 <_malloc_r+0x22>
 800b85a:	230c      	movs	r3, #12
 800b85c:	6033      	str	r3, [r6, #0]
 800b85e:	2000      	movs	r0, #0
 800b860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b862:	f001 fb5d 	bl	800cf20 <__malloc_lock>
 800b866:	4921      	ldr	r1, [pc, #132]	; (800b8ec <_malloc_r+0xac>)
 800b868:	680a      	ldr	r2, [r1, #0]
 800b86a:	4614      	mov	r4, r2
 800b86c:	b99c      	cbnz	r4, 800b896 <_malloc_r+0x56>
 800b86e:	4f20      	ldr	r7, [pc, #128]	; (800b8f0 <_malloc_r+0xb0>)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	b923      	cbnz	r3, 800b87e <_malloc_r+0x3e>
 800b874:	4621      	mov	r1, r4
 800b876:	4630      	mov	r0, r6
 800b878:	f000 fca6 	bl	800c1c8 <_sbrk_r>
 800b87c:	6038      	str	r0, [r7, #0]
 800b87e:	4629      	mov	r1, r5
 800b880:	4630      	mov	r0, r6
 800b882:	f000 fca1 	bl	800c1c8 <_sbrk_r>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d123      	bne.n	800b8d2 <_malloc_r+0x92>
 800b88a:	230c      	movs	r3, #12
 800b88c:	6033      	str	r3, [r6, #0]
 800b88e:	4630      	mov	r0, r6
 800b890:	f001 fb4c 	bl	800cf2c <__malloc_unlock>
 800b894:	e7e3      	b.n	800b85e <_malloc_r+0x1e>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	1b5b      	subs	r3, r3, r5
 800b89a:	d417      	bmi.n	800b8cc <_malloc_r+0x8c>
 800b89c:	2b0b      	cmp	r3, #11
 800b89e:	d903      	bls.n	800b8a8 <_malloc_r+0x68>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	441c      	add	r4, r3
 800b8a4:	6025      	str	r5, [r4, #0]
 800b8a6:	e004      	b.n	800b8b2 <_malloc_r+0x72>
 800b8a8:	6863      	ldr	r3, [r4, #4]
 800b8aa:	42a2      	cmp	r2, r4
 800b8ac:	bf0c      	ite	eq
 800b8ae:	600b      	streq	r3, [r1, #0]
 800b8b0:	6053      	strne	r3, [r2, #4]
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f001 fb3a 	bl	800cf2c <__malloc_unlock>
 800b8b8:	f104 000b 	add.w	r0, r4, #11
 800b8bc:	1d23      	adds	r3, r4, #4
 800b8be:	f020 0007 	bic.w	r0, r0, #7
 800b8c2:	1ac2      	subs	r2, r0, r3
 800b8c4:	d0cc      	beq.n	800b860 <_malloc_r+0x20>
 800b8c6:	1a1b      	subs	r3, r3, r0
 800b8c8:	50a3      	str	r3, [r4, r2]
 800b8ca:	e7c9      	b.n	800b860 <_malloc_r+0x20>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	6864      	ldr	r4, [r4, #4]
 800b8d0:	e7cc      	b.n	800b86c <_malloc_r+0x2c>
 800b8d2:	1cc4      	adds	r4, r0, #3
 800b8d4:	f024 0403 	bic.w	r4, r4, #3
 800b8d8:	42a0      	cmp	r0, r4
 800b8da:	d0e3      	beq.n	800b8a4 <_malloc_r+0x64>
 800b8dc:	1a21      	subs	r1, r4, r0
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f000 fc72 	bl	800c1c8 <_sbrk_r>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d1dd      	bne.n	800b8a4 <_malloc_r+0x64>
 800b8e8:	e7cf      	b.n	800b88a <_malloc_r+0x4a>
 800b8ea:	bf00      	nop
 800b8ec:	20000294 	.word	0x20000294
 800b8f0:	20000298 	.word	0x20000298

0800b8f4 <__cvt>:
 800b8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f8:	ec55 4b10 	vmov	r4, r5, d0
 800b8fc:	2d00      	cmp	r5, #0
 800b8fe:	460e      	mov	r6, r1
 800b900:	4619      	mov	r1, r3
 800b902:	462b      	mov	r3, r5
 800b904:	bfbb      	ittet	lt
 800b906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b90a:	461d      	movlt	r5, r3
 800b90c:	2300      	movge	r3, #0
 800b90e:	232d      	movlt	r3, #45	; 0x2d
 800b910:	700b      	strb	r3, [r1, #0]
 800b912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b914:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b918:	4691      	mov	r9, r2
 800b91a:	f023 0820 	bic.w	r8, r3, #32
 800b91e:	bfbc      	itt	lt
 800b920:	4622      	movlt	r2, r4
 800b922:	4614      	movlt	r4, r2
 800b924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b928:	d005      	beq.n	800b936 <__cvt+0x42>
 800b92a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b92e:	d100      	bne.n	800b932 <__cvt+0x3e>
 800b930:	3601      	adds	r6, #1
 800b932:	2102      	movs	r1, #2
 800b934:	e000      	b.n	800b938 <__cvt+0x44>
 800b936:	2103      	movs	r1, #3
 800b938:	ab03      	add	r3, sp, #12
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	ab02      	add	r3, sp, #8
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	ec45 4b10 	vmov	d0, r4, r5
 800b944:	4653      	mov	r3, sl
 800b946:	4632      	mov	r2, r6
 800b948:	f000 fcfa 	bl	800c340 <_dtoa_r>
 800b94c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b950:	4607      	mov	r7, r0
 800b952:	d102      	bne.n	800b95a <__cvt+0x66>
 800b954:	f019 0f01 	tst.w	r9, #1
 800b958:	d022      	beq.n	800b9a0 <__cvt+0xac>
 800b95a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b95e:	eb07 0906 	add.w	r9, r7, r6
 800b962:	d110      	bne.n	800b986 <__cvt+0x92>
 800b964:	783b      	ldrb	r3, [r7, #0]
 800b966:	2b30      	cmp	r3, #48	; 0x30
 800b968:	d10a      	bne.n	800b980 <__cvt+0x8c>
 800b96a:	2200      	movs	r2, #0
 800b96c:	2300      	movs	r3, #0
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	f7f5 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b976:	b918      	cbnz	r0, 800b980 <__cvt+0x8c>
 800b978:	f1c6 0601 	rsb	r6, r6, #1
 800b97c:	f8ca 6000 	str.w	r6, [sl]
 800b980:	f8da 3000 	ldr.w	r3, [sl]
 800b984:	4499      	add	r9, r3
 800b986:	2200      	movs	r2, #0
 800b988:	2300      	movs	r3, #0
 800b98a:	4620      	mov	r0, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	f7f5 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b992:	b108      	cbz	r0, 800b998 <__cvt+0xa4>
 800b994:	f8cd 900c 	str.w	r9, [sp, #12]
 800b998:	2230      	movs	r2, #48	; 0x30
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	454b      	cmp	r3, r9
 800b99e:	d307      	bcc.n	800b9b0 <__cvt+0xbc>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9a4:	1bdb      	subs	r3, r3, r7
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	b004      	add	sp, #16
 800b9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b0:	1c59      	adds	r1, r3, #1
 800b9b2:	9103      	str	r1, [sp, #12]
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	e7f0      	b.n	800b99a <__cvt+0xa6>

0800b9b8 <__exponent>:
 800b9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	bfb8      	it	lt
 800b9c0:	4249      	neglt	r1, r1
 800b9c2:	f803 2b02 	strb.w	r2, [r3], #2
 800b9c6:	bfb4      	ite	lt
 800b9c8:	222d      	movlt	r2, #45	; 0x2d
 800b9ca:	222b      	movge	r2, #43	; 0x2b
 800b9cc:	2909      	cmp	r1, #9
 800b9ce:	7042      	strb	r2, [r0, #1]
 800b9d0:	dd2a      	ble.n	800ba28 <__exponent+0x70>
 800b9d2:	f10d 0407 	add.w	r4, sp, #7
 800b9d6:	46a4      	mov	ip, r4
 800b9d8:	270a      	movs	r7, #10
 800b9da:	46a6      	mov	lr, r4
 800b9dc:	460a      	mov	r2, r1
 800b9de:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9e2:	fb07 1516 	mls	r5, r7, r6, r1
 800b9e6:	3530      	adds	r5, #48	; 0x30
 800b9e8:	2a63      	cmp	r2, #99	; 0x63
 800b9ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	dcf1      	bgt.n	800b9da <__exponent+0x22>
 800b9f6:	3130      	adds	r1, #48	; 0x30
 800b9f8:	f1ae 0502 	sub.w	r5, lr, #2
 800b9fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ba00:	1c44      	adds	r4, r0, #1
 800ba02:	4629      	mov	r1, r5
 800ba04:	4561      	cmp	r1, ip
 800ba06:	d30a      	bcc.n	800ba1e <__exponent+0x66>
 800ba08:	f10d 0209 	add.w	r2, sp, #9
 800ba0c:	eba2 020e 	sub.w	r2, r2, lr
 800ba10:	4565      	cmp	r5, ip
 800ba12:	bf88      	it	hi
 800ba14:	2200      	movhi	r2, #0
 800ba16:	4413      	add	r3, r2
 800ba18:	1a18      	subs	r0, r3, r0
 800ba1a:	b003      	add	sp, #12
 800ba1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba26:	e7ed      	b.n	800ba04 <__exponent+0x4c>
 800ba28:	2330      	movs	r3, #48	; 0x30
 800ba2a:	3130      	adds	r1, #48	; 0x30
 800ba2c:	7083      	strb	r3, [r0, #2]
 800ba2e:	70c1      	strb	r1, [r0, #3]
 800ba30:	1d03      	adds	r3, r0, #4
 800ba32:	e7f1      	b.n	800ba18 <__exponent+0x60>

0800ba34 <_printf_float>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	ed2d 8b02 	vpush	{d8}
 800ba3c:	b08d      	sub	sp, #52	; 0x34
 800ba3e:	460c      	mov	r4, r1
 800ba40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba44:	4616      	mov	r6, r2
 800ba46:	461f      	mov	r7, r3
 800ba48:	4605      	mov	r5, r0
 800ba4a:	f001 fa65 	bl	800cf18 <_localeconv_r>
 800ba4e:	f8d0 a000 	ldr.w	sl, [r0]
 800ba52:	4650      	mov	r0, sl
 800ba54:	f7f4 fbbc 	bl	80001d0 <strlen>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	f8d8 3000 	ldr.w	r3, [r8]
 800ba64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba68:	3307      	adds	r3, #7
 800ba6a:	f023 0307 	bic.w	r3, r3, #7
 800ba6e:	f103 0208 	add.w	r2, r3, #8
 800ba72:	f8c8 2000 	str.w	r2, [r8]
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba86:	9307      	str	r3, [sp, #28]
 800ba88:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba8c:	ee08 0a10 	vmov	s16, r0
 800ba90:	4b9f      	ldr	r3, [pc, #636]	; (800bd10 <_printf_float+0x2dc>)
 800ba92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba96:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9a:	f7f5 f847 	bl	8000b2c <__aeabi_dcmpun>
 800ba9e:	bb88      	cbnz	r0, 800bb04 <_printf_float+0xd0>
 800baa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baa4:	4b9a      	ldr	r3, [pc, #616]	; (800bd10 <_printf_float+0x2dc>)
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	f7f5 f821 	bl	8000af0 <__aeabi_dcmple>
 800baae:	bb48      	cbnz	r0, 800bb04 <_printf_float+0xd0>
 800bab0:	2200      	movs	r2, #0
 800bab2:	2300      	movs	r3, #0
 800bab4:	4640      	mov	r0, r8
 800bab6:	4649      	mov	r1, r9
 800bab8:	f7f5 f810 	bl	8000adc <__aeabi_dcmplt>
 800babc:	b110      	cbz	r0, 800bac4 <_printf_float+0x90>
 800babe:	232d      	movs	r3, #45	; 0x2d
 800bac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bac4:	4b93      	ldr	r3, [pc, #588]	; (800bd14 <_printf_float+0x2e0>)
 800bac6:	4894      	ldr	r0, [pc, #592]	; (800bd18 <_printf_float+0x2e4>)
 800bac8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bacc:	bf94      	ite	ls
 800bace:	4698      	movls	r8, r3
 800bad0:	4680      	movhi	r8, r0
 800bad2:	2303      	movs	r3, #3
 800bad4:	6123      	str	r3, [r4, #16]
 800bad6:	9b05      	ldr	r3, [sp, #20]
 800bad8:	f023 0204 	bic.w	r2, r3, #4
 800badc:	6022      	str	r2, [r4, #0]
 800bade:	f04f 0900 	mov.w	r9, #0
 800bae2:	9700      	str	r7, [sp, #0]
 800bae4:	4633      	mov	r3, r6
 800bae6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bae8:	4621      	mov	r1, r4
 800baea:	4628      	mov	r0, r5
 800baec:	f000 f9d8 	bl	800bea0 <_printf_common>
 800baf0:	3001      	adds	r0, #1
 800baf2:	f040 8090 	bne.w	800bc16 <_printf_float+0x1e2>
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bafa:	b00d      	add	sp, #52	; 0x34
 800bafc:	ecbd 8b02 	vpop	{d8}
 800bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb04:	4642      	mov	r2, r8
 800bb06:	464b      	mov	r3, r9
 800bb08:	4640      	mov	r0, r8
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	f7f5 f80e 	bl	8000b2c <__aeabi_dcmpun>
 800bb10:	b140      	cbz	r0, 800bb24 <_printf_float+0xf0>
 800bb12:	464b      	mov	r3, r9
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	bfbc      	itt	lt
 800bb18:	232d      	movlt	r3, #45	; 0x2d
 800bb1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb1e:	487f      	ldr	r0, [pc, #508]	; (800bd1c <_printf_float+0x2e8>)
 800bb20:	4b7f      	ldr	r3, [pc, #508]	; (800bd20 <_printf_float+0x2ec>)
 800bb22:	e7d1      	b.n	800bac8 <_printf_float+0x94>
 800bb24:	6863      	ldr	r3, [r4, #4]
 800bb26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb2a:	9206      	str	r2, [sp, #24]
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	d13f      	bne.n	800bbb0 <_printf_float+0x17c>
 800bb30:	2306      	movs	r3, #6
 800bb32:	6063      	str	r3, [r4, #4]
 800bb34:	9b05      	ldr	r3, [sp, #20]
 800bb36:	6861      	ldr	r1, [r4, #4]
 800bb38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9303      	str	r3, [sp, #12]
 800bb40:	ab0a      	add	r3, sp, #40	; 0x28
 800bb42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb46:	ab09      	add	r3, sp, #36	; 0x24
 800bb48:	ec49 8b10 	vmov	d0, r8, r9
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	6022      	str	r2, [r4, #0]
 800bb50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7ff fecd 	bl	800b8f4 <__cvt>
 800bb5a:	9b06      	ldr	r3, [sp, #24]
 800bb5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb5e:	2b47      	cmp	r3, #71	; 0x47
 800bb60:	4680      	mov	r8, r0
 800bb62:	d108      	bne.n	800bb76 <_printf_float+0x142>
 800bb64:	1cc8      	adds	r0, r1, #3
 800bb66:	db02      	blt.n	800bb6e <_printf_float+0x13a>
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	4299      	cmp	r1, r3
 800bb6c:	dd41      	ble.n	800bbf2 <_printf_float+0x1be>
 800bb6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb72:	fa5f fb8b 	uxtb.w	fp, fp
 800bb76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb7a:	d820      	bhi.n	800bbbe <_printf_float+0x18a>
 800bb7c:	3901      	subs	r1, #1
 800bb7e:	465a      	mov	r2, fp
 800bb80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb84:	9109      	str	r1, [sp, #36]	; 0x24
 800bb86:	f7ff ff17 	bl	800b9b8 <__exponent>
 800bb8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb8c:	1813      	adds	r3, r2, r0
 800bb8e:	2a01      	cmp	r2, #1
 800bb90:	4681      	mov	r9, r0
 800bb92:	6123      	str	r3, [r4, #16]
 800bb94:	dc02      	bgt.n	800bb9c <_printf_float+0x168>
 800bb96:	6822      	ldr	r2, [r4, #0]
 800bb98:	07d2      	lsls	r2, r2, #31
 800bb9a:	d501      	bpl.n	800bba0 <_printf_float+0x16c>
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d09c      	beq.n	800bae2 <_printf_float+0xae>
 800bba8:	232d      	movs	r3, #45	; 0x2d
 800bbaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbae:	e798      	b.n	800bae2 <_printf_float+0xae>
 800bbb0:	9a06      	ldr	r2, [sp, #24]
 800bbb2:	2a47      	cmp	r2, #71	; 0x47
 800bbb4:	d1be      	bne.n	800bb34 <_printf_float+0x100>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1bc      	bne.n	800bb34 <_printf_float+0x100>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e7b9      	b.n	800bb32 <_printf_float+0xfe>
 800bbbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bbc2:	d118      	bne.n	800bbf6 <_printf_float+0x1c2>
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	6863      	ldr	r3, [r4, #4]
 800bbc8:	dd0b      	ble.n	800bbe2 <_printf_float+0x1ae>
 800bbca:	6121      	str	r1, [r4, #16]
 800bbcc:	b913      	cbnz	r3, 800bbd4 <_printf_float+0x1a0>
 800bbce:	6822      	ldr	r2, [r4, #0]
 800bbd0:	07d0      	lsls	r0, r2, #31
 800bbd2:	d502      	bpl.n	800bbda <_printf_float+0x1a6>
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	440b      	add	r3, r1
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbdc:	f04f 0900 	mov.w	r9, #0
 800bbe0:	e7de      	b.n	800bba0 <_printf_float+0x16c>
 800bbe2:	b913      	cbnz	r3, 800bbea <_printf_float+0x1b6>
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	07d2      	lsls	r2, r2, #31
 800bbe8:	d501      	bpl.n	800bbee <_printf_float+0x1ba>
 800bbea:	3302      	adds	r3, #2
 800bbec:	e7f4      	b.n	800bbd8 <_printf_float+0x1a4>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e7f2      	b.n	800bbd8 <_printf_float+0x1a4>
 800bbf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf8:	4299      	cmp	r1, r3
 800bbfa:	db05      	blt.n	800bc08 <_printf_float+0x1d4>
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	6121      	str	r1, [r4, #16]
 800bc00:	07d8      	lsls	r0, r3, #31
 800bc02:	d5ea      	bpl.n	800bbda <_printf_float+0x1a6>
 800bc04:	1c4b      	adds	r3, r1, #1
 800bc06:	e7e7      	b.n	800bbd8 <_printf_float+0x1a4>
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	bfd4      	ite	le
 800bc0c:	f1c1 0202 	rsble	r2, r1, #2
 800bc10:	2201      	movgt	r2, #1
 800bc12:	4413      	add	r3, r2
 800bc14:	e7e0      	b.n	800bbd8 <_printf_float+0x1a4>
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	055a      	lsls	r2, r3, #21
 800bc1a:	d407      	bmi.n	800bc2c <_printf_float+0x1f8>
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	4642      	mov	r2, r8
 800bc20:	4631      	mov	r1, r6
 800bc22:	4628      	mov	r0, r5
 800bc24:	47b8      	blx	r7
 800bc26:	3001      	adds	r0, #1
 800bc28:	d12c      	bne.n	800bc84 <_printf_float+0x250>
 800bc2a:	e764      	b.n	800baf6 <_printf_float+0xc2>
 800bc2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc30:	f240 80e0 	bls.w	800bdf4 <_printf_float+0x3c0>
 800bc34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f7f4 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d034      	beq.n	800bcae <_printf_float+0x27a>
 800bc44:	4a37      	ldr	r2, [pc, #220]	; (800bd24 <_printf_float+0x2f0>)
 800bc46:	2301      	movs	r3, #1
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	47b8      	blx	r7
 800bc4e:	3001      	adds	r0, #1
 800bc50:	f43f af51 	beq.w	800baf6 <_printf_float+0xc2>
 800bc54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	db02      	blt.n	800bc62 <_printf_float+0x22e>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	07d8      	lsls	r0, r3, #31
 800bc60:	d510      	bpl.n	800bc84 <_printf_float+0x250>
 800bc62:	ee18 3a10 	vmov	r3, s16
 800bc66:	4652      	mov	r2, sl
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f43f af41 	beq.w	800baf6 <_printf_float+0xc2>
 800bc74:	f04f 0800 	mov.w	r8, #0
 800bc78:	f104 091a 	add.w	r9, r4, #26
 800bc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	4543      	cmp	r3, r8
 800bc82:	dc09      	bgt.n	800bc98 <_printf_float+0x264>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	079b      	lsls	r3, r3, #30
 800bc88:	f100 8105 	bmi.w	800be96 <_printf_float+0x462>
 800bc8c:	68e0      	ldr	r0, [r4, #12]
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc90:	4298      	cmp	r0, r3
 800bc92:	bfb8      	it	lt
 800bc94:	4618      	movlt	r0, r3
 800bc96:	e730      	b.n	800bafa <_printf_float+0xc6>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	464a      	mov	r2, r9
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	f43f af27 	beq.w	800baf6 <_printf_float+0xc2>
 800bca8:	f108 0801 	add.w	r8, r8, #1
 800bcac:	e7e6      	b.n	800bc7c <_printf_float+0x248>
 800bcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc39      	bgt.n	800bd28 <_printf_float+0x2f4>
 800bcb4:	4a1b      	ldr	r2, [pc, #108]	; (800bd24 <_printf_float+0x2f0>)
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f43f af19 	beq.w	800baf6 <_printf_float+0xc2>
 800bcc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	d102      	bne.n	800bcd2 <_printf_float+0x29e>
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	d5d8      	bpl.n	800bc84 <_printf_float+0x250>
 800bcd2:	ee18 3a10 	vmov	r3, s16
 800bcd6:	4652      	mov	r2, sl
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b8      	blx	r7
 800bcde:	3001      	adds	r0, #1
 800bce0:	f43f af09 	beq.w	800baf6 <_printf_float+0xc2>
 800bce4:	f04f 0900 	mov.w	r9, #0
 800bce8:	f104 0a1a 	add.w	sl, r4, #26
 800bcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcee:	425b      	negs	r3, r3
 800bcf0:	454b      	cmp	r3, r9
 800bcf2:	dc01      	bgt.n	800bcf8 <_printf_float+0x2c4>
 800bcf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf6:	e792      	b.n	800bc1e <_printf_float+0x1ea>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	47b8      	blx	r7
 800bd02:	3001      	adds	r0, #1
 800bd04:	f43f aef7 	beq.w	800baf6 <_printf_float+0xc2>
 800bd08:	f109 0901 	add.w	r9, r9, #1
 800bd0c:	e7ee      	b.n	800bcec <_printf_float+0x2b8>
 800bd0e:	bf00      	nop
 800bd10:	7fefffff 	.word	0x7fefffff
 800bd14:	0800e574 	.word	0x0800e574
 800bd18:	0800e578 	.word	0x0800e578
 800bd1c:	0800e580 	.word	0x0800e580
 800bd20:	0800e57c 	.word	0x0800e57c
 800bd24:	0800e584 	.word	0x0800e584
 800bd28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	bfa8      	it	ge
 800bd30:	461a      	movge	r2, r3
 800bd32:	2a00      	cmp	r2, #0
 800bd34:	4691      	mov	r9, r2
 800bd36:	dc37      	bgt.n	800bda8 <_printf_float+0x374>
 800bd38:	f04f 0b00 	mov.w	fp, #0
 800bd3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd40:	f104 021a 	add.w	r2, r4, #26
 800bd44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	eba3 0309 	sub.w	r3, r3, r9
 800bd4c:	455b      	cmp	r3, fp
 800bd4e:	dc33      	bgt.n	800bdb8 <_printf_float+0x384>
 800bd50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd54:	429a      	cmp	r2, r3
 800bd56:	db3b      	blt.n	800bdd0 <_printf_float+0x39c>
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	07da      	lsls	r2, r3, #31
 800bd5c:	d438      	bmi.n	800bdd0 <_printf_float+0x39c>
 800bd5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd60:	9b05      	ldr	r3, [sp, #20]
 800bd62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	eba2 0901 	sub.w	r9, r2, r1
 800bd6a:	4599      	cmp	r9, r3
 800bd6c:	bfa8      	it	ge
 800bd6e:	4699      	movge	r9, r3
 800bd70:	f1b9 0f00 	cmp.w	r9, #0
 800bd74:	dc35      	bgt.n	800bde2 <_printf_float+0x3ae>
 800bd76:	f04f 0800 	mov.w	r8, #0
 800bd7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd7e:	f104 0a1a 	add.w	sl, r4, #26
 800bd82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd86:	1a9b      	subs	r3, r3, r2
 800bd88:	eba3 0309 	sub.w	r3, r3, r9
 800bd8c:	4543      	cmp	r3, r8
 800bd8e:	f77f af79 	ble.w	800bc84 <_printf_float+0x250>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4652      	mov	r2, sl
 800bd96:	4631      	mov	r1, r6
 800bd98:	4628      	mov	r0, r5
 800bd9a:	47b8      	blx	r7
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	f43f aeaa 	beq.w	800baf6 <_printf_float+0xc2>
 800bda2:	f108 0801 	add.w	r8, r8, #1
 800bda6:	e7ec      	b.n	800bd82 <_printf_float+0x34e>
 800bda8:	4613      	mov	r3, r2
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4642      	mov	r2, r8
 800bdae:	4628      	mov	r0, r5
 800bdb0:	47b8      	blx	r7
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	d1c0      	bne.n	800bd38 <_printf_float+0x304>
 800bdb6:	e69e      	b.n	800baf6 <_printf_float+0xc2>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	9205      	str	r2, [sp, #20]
 800bdc0:	47b8      	blx	r7
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	f43f ae97 	beq.w	800baf6 <_printf_float+0xc2>
 800bdc8:	9a05      	ldr	r2, [sp, #20]
 800bdca:	f10b 0b01 	add.w	fp, fp, #1
 800bdce:	e7b9      	b.n	800bd44 <_printf_float+0x310>
 800bdd0:	ee18 3a10 	vmov	r3, s16
 800bdd4:	4652      	mov	r2, sl
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b8      	blx	r7
 800bddc:	3001      	adds	r0, #1
 800bdde:	d1be      	bne.n	800bd5e <_printf_float+0x32a>
 800bde0:	e689      	b.n	800baf6 <_printf_float+0xc2>
 800bde2:	9a05      	ldr	r2, [sp, #20]
 800bde4:	464b      	mov	r3, r9
 800bde6:	4442      	add	r2, r8
 800bde8:	4631      	mov	r1, r6
 800bdea:	4628      	mov	r0, r5
 800bdec:	47b8      	blx	r7
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d1c1      	bne.n	800bd76 <_printf_float+0x342>
 800bdf2:	e680      	b.n	800baf6 <_printf_float+0xc2>
 800bdf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdf6:	2a01      	cmp	r2, #1
 800bdf8:	dc01      	bgt.n	800bdfe <_printf_float+0x3ca>
 800bdfa:	07db      	lsls	r3, r3, #31
 800bdfc:	d538      	bpl.n	800be70 <_printf_float+0x43c>
 800bdfe:	2301      	movs	r3, #1
 800be00:	4642      	mov	r2, r8
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	f43f ae74 	beq.w	800baf6 <_printf_float+0xc2>
 800be0e:	ee18 3a10 	vmov	r3, s16
 800be12:	4652      	mov	r2, sl
 800be14:	4631      	mov	r1, r6
 800be16:	4628      	mov	r0, r5
 800be18:	47b8      	blx	r7
 800be1a:	3001      	adds	r0, #1
 800be1c:	f43f ae6b 	beq.w	800baf6 <_printf_float+0xc2>
 800be20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be24:	2200      	movs	r2, #0
 800be26:	2300      	movs	r3, #0
 800be28:	f7f4 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800be2c:	b9d8      	cbnz	r0, 800be66 <_printf_float+0x432>
 800be2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be30:	f108 0201 	add.w	r2, r8, #1
 800be34:	3b01      	subs	r3, #1
 800be36:	4631      	mov	r1, r6
 800be38:	4628      	mov	r0, r5
 800be3a:	47b8      	blx	r7
 800be3c:	3001      	adds	r0, #1
 800be3e:	d10e      	bne.n	800be5e <_printf_float+0x42a>
 800be40:	e659      	b.n	800baf6 <_printf_float+0xc2>
 800be42:	2301      	movs	r3, #1
 800be44:	4652      	mov	r2, sl
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	f43f ae52 	beq.w	800baf6 <_printf_float+0xc2>
 800be52:	f108 0801 	add.w	r8, r8, #1
 800be56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be58:	3b01      	subs	r3, #1
 800be5a:	4543      	cmp	r3, r8
 800be5c:	dcf1      	bgt.n	800be42 <_printf_float+0x40e>
 800be5e:	464b      	mov	r3, r9
 800be60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be64:	e6dc      	b.n	800bc20 <_printf_float+0x1ec>
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	f104 0a1a 	add.w	sl, r4, #26
 800be6e:	e7f2      	b.n	800be56 <_printf_float+0x422>
 800be70:	2301      	movs	r3, #1
 800be72:	4642      	mov	r2, r8
 800be74:	e7df      	b.n	800be36 <_printf_float+0x402>
 800be76:	2301      	movs	r3, #1
 800be78:	464a      	mov	r2, r9
 800be7a:	4631      	mov	r1, r6
 800be7c:	4628      	mov	r0, r5
 800be7e:	47b8      	blx	r7
 800be80:	3001      	adds	r0, #1
 800be82:	f43f ae38 	beq.w	800baf6 <_printf_float+0xc2>
 800be86:	f108 0801 	add.w	r8, r8, #1
 800be8a:	68e3      	ldr	r3, [r4, #12]
 800be8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be8e:	1a5b      	subs	r3, r3, r1
 800be90:	4543      	cmp	r3, r8
 800be92:	dcf0      	bgt.n	800be76 <_printf_float+0x442>
 800be94:	e6fa      	b.n	800bc8c <_printf_float+0x258>
 800be96:	f04f 0800 	mov.w	r8, #0
 800be9a:	f104 0919 	add.w	r9, r4, #25
 800be9e:	e7f4      	b.n	800be8a <_printf_float+0x456>

0800bea0 <_printf_common>:
 800bea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea4:	4616      	mov	r6, r2
 800bea6:	4699      	mov	r9, r3
 800bea8:	688a      	ldr	r2, [r1, #8]
 800beaa:	690b      	ldr	r3, [r1, #16]
 800beac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800beb0:	4293      	cmp	r3, r2
 800beb2:	bfb8      	it	lt
 800beb4:	4613      	movlt	r3, r2
 800beb6:	6033      	str	r3, [r6, #0]
 800beb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bebc:	4607      	mov	r7, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	b10a      	cbz	r2, 800bec6 <_printf_common+0x26>
 800bec2:	3301      	adds	r3, #1
 800bec4:	6033      	str	r3, [r6, #0]
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	0699      	lsls	r1, r3, #26
 800beca:	bf42      	ittt	mi
 800becc:	6833      	ldrmi	r3, [r6, #0]
 800bece:	3302      	addmi	r3, #2
 800bed0:	6033      	strmi	r3, [r6, #0]
 800bed2:	6825      	ldr	r5, [r4, #0]
 800bed4:	f015 0506 	ands.w	r5, r5, #6
 800bed8:	d106      	bne.n	800bee8 <_printf_common+0x48>
 800beda:	f104 0a19 	add.w	sl, r4, #25
 800bede:	68e3      	ldr	r3, [r4, #12]
 800bee0:	6832      	ldr	r2, [r6, #0]
 800bee2:	1a9b      	subs	r3, r3, r2
 800bee4:	42ab      	cmp	r3, r5
 800bee6:	dc26      	bgt.n	800bf36 <_printf_common+0x96>
 800bee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800beec:	1e13      	subs	r3, r2, #0
 800beee:	6822      	ldr	r2, [r4, #0]
 800bef0:	bf18      	it	ne
 800bef2:	2301      	movne	r3, #1
 800bef4:	0692      	lsls	r2, r2, #26
 800bef6:	d42b      	bmi.n	800bf50 <_printf_common+0xb0>
 800bef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800befc:	4649      	mov	r1, r9
 800befe:	4638      	mov	r0, r7
 800bf00:	47c0      	blx	r8
 800bf02:	3001      	adds	r0, #1
 800bf04:	d01e      	beq.n	800bf44 <_printf_common+0xa4>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	68e5      	ldr	r5, [r4, #12]
 800bf0a:	6832      	ldr	r2, [r6, #0]
 800bf0c:	f003 0306 	and.w	r3, r3, #6
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	bf08      	it	eq
 800bf14:	1aad      	subeq	r5, r5, r2
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	6922      	ldr	r2, [r4, #16]
 800bf1a:	bf0c      	ite	eq
 800bf1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf20:	2500      	movne	r5, #0
 800bf22:	4293      	cmp	r3, r2
 800bf24:	bfc4      	itt	gt
 800bf26:	1a9b      	subgt	r3, r3, r2
 800bf28:	18ed      	addgt	r5, r5, r3
 800bf2a:	2600      	movs	r6, #0
 800bf2c:	341a      	adds	r4, #26
 800bf2e:	42b5      	cmp	r5, r6
 800bf30:	d11a      	bne.n	800bf68 <_printf_common+0xc8>
 800bf32:	2000      	movs	r0, #0
 800bf34:	e008      	b.n	800bf48 <_printf_common+0xa8>
 800bf36:	2301      	movs	r3, #1
 800bf38:	4652      	mov	r2, sl
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	47c0      	blx	r8
 800bf40:	3001      	adds	r0, #1
 800bf42:	d103      	bne.n	800bf4c <_printf_common+0xac>
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4c:	3501      	adds	r5, #1
 800bf4e:	e7c6      	b.n	800bede <_printf_common+0x3e>
 800bf50:	18e1      	adds	r1, r4, r3
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	2030      	movs	r0, #48	; 0x30
 800bf56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf5a:	4422      	add	r2, r4
 800bf5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf64:	3302      	adds	r3, #2
 800bf66:	e7c7      	b.n	800bef8 <_printf_common+0x58>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	4638      	mov	r0, r7
 800bf70:	47c0      	blx	r8
 800bf72:	3001      	adds	r0, #1
 800bf74:	d0e6      	beq.n	800bf44 <_printf_common+0xa4>
 800bf76:	3601      	adds	r6, #1
 800bf78:	e7d9      	b.n	800bf2e <_printf_common+0x8e>
	...

0800bf7c <_printf_i>:
 800bf7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf80:	460c      	mov	r4, r1
 800bf82:	4691      	mov	r9, r2
 800bf84:	7e27      	ldrb	r7, [r4, #24]
 800bf86:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf88:	2f78      	cmp	r7, #120	; 0x78
 800bf8a:	4680      	mov	r8, r0
 800bf8c:	469a      	mov	sl, r3
 800bf8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf92:	d807      	bhi.n	800bfa4 <_printf_i+0x28>
 800bf94:	2f62      	cmp	r7, #98	; 0x62
 800bf96:	d80a      	bhi.n	800bfae <_printf_i+0x32>
 800bf98:	2f00      	cmp	r7, #0
 800bf9a:	f000 80d8 	beq.w	800c14e <_printf_i+0x1d2>
 800bf9e:	2f58      	cmp	r7, #88	; 0x58
 800bfa0:	f000 80a3 	beq.w	800c0ea <_printf_i+0x16e>
 800bfa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfac:	e03a      	b.n	800c024 <_printf_i+0xa8>
 800bfae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfb2:	2b15      	cmp	r3, #21
 800bfb4:	d8f6      	bhi.n	800bfa4 <_printf_i+0x28>
 800bfb6:	a001      	add	r0, pc, #4	; (adr r0, 800bfbc <_printf_i+0x40>)
 800bfb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfbc:	0800c015 	.word	0x0800c015
 800bfc0:	0800c029 	.word	0x0800c029
 800bfc4:	0800bfa5 	.word	0x0800bfa5
 800bfc8:	0800bfa5 	.word	0x0800bfa5
 800bfcc:	0800bfa5 	.word	0x0800bfa5
 800bfd0:	0800bfa5 	.word	0x0800bfa5
 800bfd4:	0800c029 	.word	0x0800c029
 800bfd8:	0800bfa5 	.word	0x0800bfa5
 800bfdc:	0800bfa5 	.word	0x0800bfa5
 800bfe0:	0800bfa5 	.word	0x0800bfa5
 800bfe4:	0800bfa5 	.word	0x0800bfa5
 800bfe8:	0800c135 	.word	0x0800c135
 800bfec:	0800c059 	.word	0x0800c059
 800bff0:	0800c117 	.word	0x0800c117
 800bff4:	0800bfa5 	.word	0x0800bfa5
 800bff8:	0800bfa5 	.word	0x0800bfa5
 800bffc:	0800c157 	.word	0x0800c157
 800c000:	0800bfa5 	.word	0x0800bfa5
 800c004:	0800c059 	.word	0x0800c059
 800c008:	0800bfa5 	.word	0x0800bfa5
 800c00c:	0800bfa5 	.word	0x0800bfa5
 800c010:	0800c11f 	.word	0x0800c11f
 800c014:	680b      	ldr	r3, [r1, #0]
 800c016:	1d1a      	adds	r2, r3, #4
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	600a      	str	r2, [r1, #0]
 800c01c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c024:	2301      	movs	r3, #1
 800c026:	e0a3      	b.n	800c170 <_printf_i+0x1f4>
 800c028:	6825      	ldr	r5, [r4, #0]
 800c02a:	6808      	ldr	r0, [r1, #0]
 800c02c:	062e      	lsls	r6, r5, #24
 800c02e:	f100 0304 	add.w	r3, r0, #4
 800c032:	d50a      	bpl.n	800c04a <_printf_i+0xce>
 800c034:	6805      	ldr	r5, [r0, #0]
 800c036:	600b      	str	r3, [r1, #0]
 800c038:	2d00      	cmp	r5, #0
 800c03a:	da03      	bge.n	800c044 <_printf_i+0xc8>
 800c03c:	232d      	movs	r3, #45	; 0x2d
 800c03e:	426d      	negs	r5, r5
 800c040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c044:	485e      	ldr	r0, [pc, #376]	; (800c1c0 <_printf_i+0x244>)
 800c046:	230a      	movs	r3, #10
 800c048:	e019      	b.n	800c07e <_printf_i+0x102>
 800c04a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c04e:	6805      	ldr	r5, [r0, #0]
 800c050:	600b      	str	r3, [r1, #0]
 800c052:	bf18      	it	ne
 800c054:	b22d      	sxthne	r5, r5
 800c056:	e7ef      	b.n	800c038 <_printf_i+0xbc>
 800c058:	680b      	ldr	r3, [r1, #0]
 800c05a:	6825      	ldr	r5, [r4, #0]
 800c05c:	1d18      	adds	r0, r3, #4
 800c05e:	6008      	str	r0, [r1, #0]
 800c060:	0628      	lsls	r0, r5, #24
 800c062:	d501      	bpl.n	800c068 <_printf_i+0xec>
 800c064:	681d      	ldr	r5, [r3, #0]
 800c066:	e002      	b.n	800c06e <_printf_i+0xf2>
 800c068:	0669      	lsls	r1, r5, #25
 800c06a:	d5fb      	bpl.n	800c064 <_printf_i+0xe8>
 800c06c:	881d      	ldrh	r5, [r3, #0]
 800c06e:	4854      	ldr	r0, [pc, #336]	; (800c1c0 <_printf_i+0x244>)
 800c070:	2f6f      	cmp	r7, #111	; 0x6f
 800c072:	bf0c      	ite	eq
 800c074:	2308      	moveq	r3, #8
 800c076:	230a      	movne	r3, #10
 800c078:	2100      	movs	r1, #0
 800c07a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c07e:	6866      	ldr	r6, [r4, #4]
 800c080:	60a6      	str	r6, [r4, #8]
 800c082:	2e00      	cmp	r6, #0
 800c084:	bfa2      	ittt	ge
 800c086:	6821      	ldrge	r1, [r4, #0]
 800c088:	f021 0104 	bicge.w	r1, r1, #4
 800c08c:	6021      	strge	r1, [r4, #0]
 800c08e:	b90d      	cbnz	r5, 800c094 <_printf_i+0x118>
 800c090:	2e00      	cmp	r6, #0
 800c092:	d04d      	beq.n	800c130 <_printf_i+0x1b4>
 800c094:	4616      	mov	r6, r2
 800c096:	fbb5 f1f3 	udiv	r1, r5, r3
 800c09a:	fb03 5711 	mls	r7, r3, r1, r5
 800c09e:	5dc7      	ldrb	r7, [r0, r7]
 800c0a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0a4:	462f      	mov	r7, r5
 800c0a6:	42bb      	cmp	r3, r7
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	d9f4      	bls.n	800c096 <_printf_i+0x11a>
 800c0ac:	2b08      	cmp	r3, #8
 800c0ae:	d10b      	bne.n	800c0c8 <_printf_i+0x14c>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	07df      	lsls	r7, r3, #31
 800c0b4:	d508      	bpl.n	800c0c8 <_printf_i+0x14c>
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	6861      	ldr	r1, [r4, #4]
 800c0ba:	4299      	cmp	r1, r3
 800c0bc:	bfde      	ittt	le
 800c0be:	2330      	movle	r3, #48	; 0x30
 800c0c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0c8:	1b92      	subs	r2, r2, r6
 800c0ca:	6122      	str	r2, [r4, #16]
 800c0cc:	f8cd a000 	str.w	sl, [sp]
 800c0d0:	464b      	mov	r3, r9
 800c0d2:	aa03      	add	r2, sp, #12
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	f7ff fee2 	bl	800bea0 <_printf_common>
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d14c      	bne.n	800c17a <_printf_i+0x1fe>
 800c0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e4:	b004      	add	sp, #16
 800c0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ea:	4835      	ldr	r0, [pc, #212]	; (800c1c0 <_printf_i+0x244>)
 800c0ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	680e      	ldr	r6, [r1, #0]
 800c0f4:	061f      	lsls	r7, r3, #24
 800c0f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c0fa:	600e      	str	r6, [r1, #0]
 800c0fc:	d514      	bpl.n	800c128 <_printf_i+0x1ac>
 800c0fe:	07d9      	lsls	r1, r3, #31
 800c100:	bf44      	itt	mi
 800c102:	f043 0320 	orrmi.w	r3, r3, #32
 800c106:	6023      	strmi	r3, [r4, #0]
 800c108:	b91d      	cbnz	r5, 800c112 <_printf_i+0x196>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f023 0320 	bic.w	r3, r3, #32
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	2310      	movs	r3, #16
 800c114:	e7b0      	b.n	800c078 <_printf_i+0xfc>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	f043 0320 	orr.w	r3, r3, #32
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	2378      	movs	r3, #120	; 0x78
 800c120:	4828      	ldr	r0, [pc, #160]	; (800c1c4 <_printf_i+0x248>)
 800c122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c126:	e7e3      	b.n	800c0f0 <_printf_i+0x174>
 800c128:	065e      	lsls	r6, r3, #25
 800c12a:	bf48      	it	mi
 800c12c:	b2ad      	uxthmi	r5, r5
 800c12e:	e7e6      	b.n	800c0fe <_printf_i+0x182>
 800c130:	4616      	mov	r6, r2
 800c132:	e7bb      	b.n	800c0ac <_printf_i+0x130>
 800c134:	680b      	ldr	r3, [r1, #0]
 800c136:	6826      	ldr	r6, [r4, #0]
 800c138:	6960      	ldr	r0, [r4, #20]
 800c13a:	1d1d      	adds	r5, r3, #4
 800c13c:	600d      	str	r5, [r1, #0]
 800c13e:	0635      	lsls	r5, r6, #24
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	d501      	bpl.n	800c148 <_printf_i+0x1cc>
 800c144:	6018      	str	r0, [r3, #0]
 800c146:	e002      	b.n	800c14e <_printf_i+0x1d2>
 800c148:	0671      	lsls	r1, r6, #25
 800c14a:	d5fb      	bpl.n	800c144 <_printf_i+0x1c8>
 800c14c:	8018      	strh	r0, [r3, #0]
 800c14e:	2300      	movs	r3, #0
 800c150:	6123      	str	r3, [r4, #16]
 800c152:	4616      	mov	r6, r2
 800c154:	e7ba      	b.n	800c0cc <_printf_i+0x150>
 800c156:	680b      	ldr	r3, [r1, #0]
 800c158:	1d1a      	adds	r2, r3, #4
 800c15a:	600a      	str	r2, [r1, #0]
 800c15c:	681e      	ldr	r6, [r3, #0]
 800c15e:	6862      	ldr	r2, [r4, #4]
 800c160:	2100      	movs	r1, #0
 800c162:	4630      	mov	r0, r6
 800c164:	f7f4 f83c 	bl	80001e0 <memchr>
 800c168:	b108      	cbz	r0, 800c16e <_printf_i+0x1f2>
 800c16a:	1b80      	subs	r0, r0, r6
 800c16c:	6060      	str	r0, [r4, #4]
 800c16e:	6863      	ldr	r3, [r4, #4]
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	2300      	movs	r3, #0
 800c174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c178:	e7a8      	b.n	800c0cc <_printf_i+0x150>
 800c17a:	6923      	ldr	r3, [r4, #16]
 800c17c:	4632      	mov	r2, r6
 800c17e:	4649      	mov	r1, r9
 800c180:	4640      	mov	r0, r8
 800c182:	47d0      	blx	sl
 800c184:	3001      	adds	r0, #1
 800c186:	d0ab      	beq.n	800c0e0 <_printf_i+0x164>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	079b      	lsls	r3, r3, #30
 800c18c:	d413      	bmi.n	800c1b6 <_printf_i+0x23a>
 800c18e:	68e0      	ldr	r0, [r4, #12]
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	4298      	cmp	r0, r3
 800c194:	bfb8      	it	lt
 800c196:	4618      	movlt	r0, r3
 800c198:	e7a4      	b.n	800c0e4 <_printf_i+0x168>
 800c19a:	2301      	movs	r3, #1
 800c19c:	4632      	mov	r2, r6
 800c19e:	4649      	mov	r1, r9
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	47d0      	blx	sl
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d09b      	beq.n	800c0e0 <_printf_i+0x164>
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	68e3      	ldr	r3, [r4, #12]
 800c1ac:	9903      	ldr	r1, [sp, #12]
 800c1ae:	1a5b      	subs	r3, r3, r1
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	dcf2      	bgt.n	800c19a <_printf_i+0x21e>
 800c1b4:	e7eb      	b.n	800c18e <_printf_i+0x212>
 800c1b6:	2500      	movs	r5, #0
 800c1b8:	f104 0619 	add.w	r6, r4, #25
 800c1bc:	e7f5      	b.n	800c1aa <_printf_i+0x22e>
 800c1be:	bf00      	nop
 800c1c0:	0800e586 	.word	0x0800e586
 800c1c4:	0800e597 	.word	0x0800e597

0800c1c8 <_sbrk_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_sbrk_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f5 fe56 	bl	8001e84 <_sbrk>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_sbrk_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_sbrk_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20000b54 	.word	0x20000b54

0800c1e8 <siprintf>:
 800c1e8:	b40e      	push	{r1, r2, r3}
 800c1ea:	b500      	push	{lr}
 800c1ec:	b09c      	sub	sp, #112	; 0x70
 800c1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c1f0:	9002      	str	r0, [sp, #8]
 800c1f2:	9006      	str	r0, [sp, #24]
 800c1f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1f8:	4809      	ldr	r0, [pc, #36]	; (800c220 <siprintf+0x38>)
 800c1fa:	9107      	str	r1, [sp, #28]
 800c1fc:	9104      	str	r1, [sp, #16]
 800c1fe:	4909      	ldr	r1, [pc, #36]	; (800c224 <siprintf+0x3c>)
 800c200:	f853 2b04 	ldr.w	r2, [r3], #4
 800c204:	9105      	str	r1, [sp, #20]
 800c206:	6800      	ldr	r0, [r0, #0]
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	a902      	add	r1, sp, #8
 800c20c:	f001 fa7c 	bl	800d708 <_svfiprintf_r>
 800c210:	9b02      	ldr	r3, [sp, #8]
 800c212:	2200      	movs	r2, #0
 800c214:	701a      	strb	r2, [r3, #0]
 800c216:	b01c      	add	sp, #112	; 0x70
 800c218:	f85d eb04 	ldr.w	lr, [sp], #4
 800c21c:	b003      	add	sp, #12
 800c21e:	4770      	bx	lr
 800c220:	2000003c 	.word	0x2000003c
 800c224:	ffff0208 	.word	0xffff0208

0800c228 <quorem>:
 800c228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	6903      	ldr	r3, [r0, #16]
 800c22e:	690c      	ldr	r4, [r1, #16]
 800c230:	42a3      	cmp	r3, r4
 800c232:	4607      	mov	r7, r0
 800c234:	f2c0 8081 	blt.w	800c33a <quorem+0x112>
 800c238:	3c01      	subs	r4, #1
 800c23a:	f101 0814 	add.w	r8, r1, #20
 800c23e:	f100 0514 	add.w	r5, r0, #20
 800c242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c24c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c250:	3301      	adds	r3, #1
 800c252:	429a      	cmp	r2, r3
 800c254:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c258:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c25c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c260:	d331      	bcc.n	800c2c6 <quorem+0x9e>
 800c262:	f04f 0e00 	mov.w	lr, #0
 800c266:	4640      	mov	r0, r8
 800c268:	46ac      	mov	ip, r5
 800c26a:	46f2      	mov	sl, lr
 800c26c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c270:	b293      	uxth	r3, r2
 800c272:	fb06 e303 	mla	r3, r6, r3, lr
 800c276:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	ebaa 0303 	sub.w	r3, sl, r3
 800c280:	0c12      	lsrs	r2, r2, #16
 800c282:	f8dc a000 	ldr.w	sl, [ip]
 800c286:	fb06 e202 	mla	r2, r6, r2, lr
 800c28a:	fa13 f38a 	uxtah	r3, r3, sl
 800c28e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c292:	fa1f fa82 	uxth.w	sl, r2
 800c296:	f8dc 2000 	ldr.w	r2, [ip]
 800c29a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c29e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2a8:	4581      	cmp	r9, r0
 800c2aa:	f84c 3b04 	str.w	r3, [ip], #4
 800c2ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2b2:	d2db      	bcs.n	800c26c <quorem+0x44>
 800c2b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2b8:	b92b      	cbnz	r3, 800c2c6 <quorem+0x9e>
 800c2ba:	9b01      	ldr	r3, [sp, #4]
 800c2bc:	3b04      	subs	r3, #4
 800c2be:	429d      	cmp	r5, r3
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	d32e      	bcc.n	800c322 <quorem+0xfa>
 800c2c4:	613c      	str	r4, [r7, #16]
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f001 f8b4 	bl	800d434 <__mcmp>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	db24      	blt.n	800c31a <quorem+0xf2>
 800c2d0:	3601      	adds	r6, #1
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f04f 0c00 	mov.w	ip, #0
 800c2d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2dc:	f8d0 e000 	ldr.w	lr, [r0]
 800c2e0:	b293      	uxth	r3, r2
 800c2e2:	ebac 0303 	sub.w	r3, ip, r3
 800c2e6:	0c12      	lsrs	r2, r2, #16
 800c2e8:	fa13 f38e 	uxtah	r3, r3, lr
 800c2ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2fa:	45c1      	cmp	r9, r8
 800c2fc:	f840 3b04 	str.w	r3, [r0], #4
 800c300:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c304:	d2e8      	bcs.n	800c2d8 <quorem+0xb0>
 800c306:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c30e:	b922      	cbnz	r2, 800c31a <quorem+0xf2>
 800c310:	3b04      	subs	r3, #4
 800c312:	429d      	cmp	r5, r3
 800c314:	461a      	mov	r2, r3
 800c316:	d30a      	bcc.n	800c32e <quorem+0x106>
 800c318:	613c      	str	r4, [r7, #16]
 800c31a:	4630      	mov	r0, r6
 800c31c:	b003      	add	sp, #12
 800c31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c322:	6812      	ldr	r2, [r2, #0]
 800c324:	3b04      	subs	r3, #4
 800c326:	2a00      	cmp	r2, #0
 800c328:	d1cc      	bne.n	800c2c4 <quorem+0x9c>
 800c32a:	3c01      	subs	r4, #1
 800c32c:	e7c7      	b.n	800c2be <quorem+0x96>
 800c32e:	6812      	ldr	r2, [r2, #0]
 800c330:	3b04      	subs	r3, #4
 800c332:	2a00      	cmp	r2, #0
 800c334:	d1f0      	bne.n	800c318 <quorem+0xf0>
 800c336:	3c01      	subs	r4, #1
 800c338:	e7eb      	b.n	800c312 <quorem+0xea>
 800c33a:	2000      	movs	r0, #0
 800c33c:	e7ee      	b.n	800c31c <quorem+0xf4>
	...

0800c340 <_dtoa_r>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	ed2d 8b02 	vpush	{d8}
 800c348:	ec57 6b10 	vmov	r6, r7, d0
 800c34c:	b095      	sub	sp, #84	; 0x54
 800c34e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c354:	9105      	str	r1, [sp, #20]
 800c356:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c35a:	4604      	mov	r4, r0
 800c35c:	9209      	str	r2, [sp, #36]	; 0x24
 800c35e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c360:	b975      	cbnz	r5, 800c380 <_dtoa_r+0x40>
 800c362:	2010      	movs	r0, #16
 800c364:	f7ff f9f6 	bl	800b754 <malloc>
 800c368:	4602      	mov	r2, r0
 800c36a:	6260      	str	r0, [r4, #36]	; 0x24
 800c36c:	b920      	cbnz	r0, 800c378 <_dtoa_r+0x38>
 800c36e:	4bb2      	ldr	r3, [pc, #712]	; (800c638 <_dtoa_r+0x2f8>)
 800c370:	21ea      	movs	r1, #234	; 0xea
 800c372:	48b2      	ldr	r0, [pc, #712]	; (800c63c <_dtoa_r+0x2fc>)
 800c374:	f001 fac8 	bl	800d908 <__assert_func>
 800c378:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c37c:	6005      	str	r5, [r0, #0]
 800c37e:	60c5      	str	r5, [r0, #12]
 800c380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c382:	6819      	ldr	r1, [r3, #0]
 800c384:	b151      	cbz	r1, 800c39c <_dtoa_r+0x5c>
 800c386:	685a      	ldr	r2, [r3, #4]
 800c388:	604a      	str	r2, [r1, #4]
 800c38a:	2301      	movs	r3, #1
 800c38c:	4093      	lsls	r3, r2
 800c38e:	608b      	str	r3, [r1, #8]
 800c390:	4620      	mov	r0, r4
 800c392:	f000 fe11 	bl	800cfb8 <_Bfree>
 800c396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	1e3b      	subs	r3, r7, #0
 800c39e:	bfb9      	ittee	lt
 800c3a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3a4:	9303      	strlt	r3, [sp, #12]
 800c3a6:	2300      	movge	r3, #0
 800c3a8:	f8c8 3000 	strge.w	r3, [r8]
 800c3ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c3b0:	4ba3      	ldr	r3, [pc, #652]	; (800c640 <_dtoa_r+0x300>)
 800c3b2:	bfbc      	itt	lt
 800c3b4:	2201      	movlt	r2, #1
 800c3b6:	f8c8 2000 	strlt.w	r2, [r8]
 800c3ba:	ea33 0309 	bics.w	r3, r3, r9
 800c3be:	d11b      	bne.n	800c3f8 <_dtoa_r+0xb8>
 800c3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3cc:	4333      	orrs	r3, r6
 800c3ce:	f000 857a 	beq.w	800cec6 <_dtoa_r+0xb86>
 800c3d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3d4:	b963      	cbnz	r3, 800c3f0 <_dtoa_r+0xb0>
 800c3d6:	4b9b      	ldr	r3, [pc, #620]	; (800c644 <_dtoa_r+0x304>)
 800c3d8:	e024      	b.n	800c424 <_dtoa_r+0xe4>
 800c3da:	4b9b      	ldr	r3, [pc, #620]	; (800c648 <_dtoa_r+0x308>)
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	9800      	ldr	r0, [sp, #0]
 800c3e6:	b015      	add	sp, #84	; 0x54
 800c3e8:	ecbd 8b02 	vpop	{d8}
 800c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f0:	4b94      	ldr	r3, [pc, #592]	; (800c644 <_dtoa_r+0x304>)
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	3303      	adds	r3, #3
 800c3f6:	e7f3      	b.n	800c3e0 <_dtoa_r+0xa0>
 800c3f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	ec51 0b17 	vmov	r0, r1, d7
 800c402:	2300      	movs	r3, #0
 800c404:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c408:	f7f4 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c40c:	4680      	mov	r8, r0
 800c40e:	b158      	cbz	r0, 800c428 <_dtoa_r+0xe8>
 800c410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c412:	2301      	movs	r3, #1
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 8551 	beq.w	800cec0 <_dtoa_r+0xb80>
 800c41e:	488b      	ldr	r0, [pc, #556]	; (800c64c <_dtoa_r+0x30c>)
 800c420:	6018      	str	r0, [r3, #0]
 800c422:	1e43      	subs	r3, r0, #1
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	e7dd      	b.n	800c3e4 <_dtoa_r+0xa4>
 800c428:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c42c:	aa12      	add	r2, sp, #72	; 0x48
 800c42e:	a913      	add	r1, sp, #76	; 0x4c
 800c430:	4620      	mov	r0, r4
 800c432:	f001 f8a3 	bl	800d57c <__d2b>
 800c436:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c43a:	4683      	mov	fp, r0
 800c43c:	2d00      	cmp	r5, #0
 800c43e:	d07c      	beq.n	800c53a <_dtoa_r+0x1fa>
 800c440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c442:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c44a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c44e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c452:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c45a:	4b7d      	ldr	r3, [pc, #500]	; (800c650 <_dtoa_r+0x310>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4630      	mov	r0, r6
 800c460:	4639      	mov	r1, r7
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	a36e      	add	r3, pc, #440	; (adr r3, 800c620 <_dtoa_r+0x2e0>)
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f7f4 f8c4 	bl	80005f8 <__aeabi_dmul>
 800c470:	a36d      	add	r3, pc, #436	; (adr r3, 800c628 <_dtoa_r+0x2e8>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f3 ff09 	bl	800028c <__adddf3>
 800c47a:	4606      	mov	r6, r0
 800c47c:	4628      	mov	r0, r5
 800c47e:	460f      	mov	r7, r1
 800c480:	f7f4 f850 	bl	8000524 <__aeabi_i2d>
 800c484:	a36a      	add	r3, pc, #424	; (adr r3, 800c630 <_dtoa_r+0x2f0>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f4 f8b5 	bl	80005f8 <__aeabi_dmul>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	4630      	mov	r0, r6
 800c494:	4639      	mov	r1, r7
 800c496:	f7f3 fef9 	bl	800028c <__adddf3>
 800c49a:	4606      	mov	r6, r0
 800c49c:	460f      	mov	r7, r1
 800c49e:	f7f4 fb5b 	bl	8000b58 <__aeabi_d2iz>
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4682      	mov	sl, r0
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	f7f4 fb16 	bl	8000adc <__aeabi_dcmplt>
 800c4b0:	b148      	cbz	r0, 800c4c6 <_dtoa_r+0x186>
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f7f4 f836 	bl	8000524 <__aeabi_i2d>
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	f7f4 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4c0:	b908      	cbnz	r0, 800c4c6 <_dtoa_r+0x186>
 800c4c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4c6:	f1ba 0f16 	cmp.w	sl, #22
 800c4ca:	d854      	bhi.n	800c576 <_dtoa_r+0x236>
 800c4cc:	4b61      	ldr	r3, [pc, #388]	; (800c654 <_dtoa_r+0x314>)
 800c4ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4da:	f7f4 faff 	bl	8000adc <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d04b      	beq.n	800c57a <_dtoa_r+0x23a>
 800c4e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	930e      	str	r3, [sp, #56]	; 0x38
 800c4ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4ec:	1b5d      	subs	r5, r3, r5
 800c4ee:	1e6b      	subs	r3, r5, #1
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	bf43      	ittte	mi
 800c4f4:	2300      	movmi	r3, #0
 800c4f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c4fa:	9304      	strmi	r3, [sp, #16]
 800c4fc:	f04f 0800 	movpl.w	r8, #0
 800c500:	f1ba 0f00 	cmp.w	sl, #0
 800c504:	db3b      	blt.n	800c57e <_dtoa_r+0x23e>
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c50c:	4453      	add	r3, sl
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	2300      	movs	r3, #0
 800c512:	9306      	str	r3, [sp, #24]
 800c514:	9b05      	ldr	r3, [sp, #20]
 800c516:	2b09      	cmp	r3, #9
 800c518:	d869      	bhi.n	800c5ee <_dtoa_r+0x2ae>
 800c51a:	2b05      	cmp	r3, #5
 800c51c:	bfc4      	itt	gt
 800c51e:	3b04      	subgt	r3, #4
 800c520:	9305      	strgt	r3, [sp, #20]
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	f1a3 0302 	sub.w	r3, r3, #2
 800c528:	bfcc      	ite	gt
 800c52a:	2500      	movgt	r5, #0
 800c52c:	2501      	movle	r5, #1
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d869      	bhi.n	800c606 <_dtoa_r+0x2c6>
 800c532:	e8df f003 	tbb	[pc, r3]
 800c536:	4e2c      	.short	0x4e2c
 800c538:	5a4c      	.short	0x5a4c
 800c53a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c53e:	441d      	add	r5, r3
 800c540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c544:	2b20      	cmp	r3, #32
 800c546:	bfc1      	itttt	gt
 800c548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c54c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c550:	fa09 f303 	lslgt.w	r3, r9, r3
 800c554:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c558:	bfda      	itte	le
 800c55a:	f1c3 0320 	rsble	r3, r3, #32
 800c55e:	fa06 f003 	lslle.w	r0, r6, r3
 800c562:	4318      	orrgt	r0, r3
 800c564:	f7f3 ffce 	bl	8000504 <__aeabi_ui2d>
 800c568:	2301      	movs	r3, #1
 800c56a:	4606      	mov	r6, r0
 800c56c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c570:	3d01      	subs	r5, #1
 800c572:	9310      	str	r3, [sp, #64]	; 0x40
 800c574:	e771      	b.n	800c45a <_dtoa_r+0x11a>
 800c576:	2301      	movs	r3, #1
 800c578:	e7b6      	b.n	800c4e8 <_dtoa_r+0x1a8>
 800c57a:	900e      	str	r0, [sp, #56]	; 0x38
 800c57c:	e7b5      	b.n	800c4ea <_dtoa_r+0x1aa>
 800c57e:	f1ca 0300 	rsb	r3, sl, #0
 800c582:	9306      	str	r3, [sp, #24]
 800c584:	2300      	movs	r3, #0
 800c586:	eba8 080a 	sub.w	r8, r8, sl
 800c58a:	930d      	str	r3, [sp, #52]	; 0x34
 800c58c:	e7c2      	b.n	800c514 <_dtoa_r+0x1d4>
 800c58e:	2300      	movs	r3, #0
 800c590:	9308      	str	r3, [sp, #32]
 800c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	dc39      	bgt.n	800c60c <_dtoa_r+0x2cc>
 800c598:	f04f 0901 	mov.w	r9, #1
 800c59c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c5a0:	464b      	mov	r3, r9
 800c5a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c5a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	6042      	str	r2, [r0, #4]
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	f102 0614 	add.w	r6, r2, #20
 800c5b2:	429e      	cmp	r6, r3
 800c5b4:	6841      	ldr	r1, [r0, #4]
 800c5b6:	d92f      	bls.n	800c618 <_dtoa_r+0x2d8>
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f000 fcbd 	bl	800cf38 <_Balloc>
 800c5be:	9000      	str	r0, [sp, #0]
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d14b      	bne.n	800c65c <_dtoa_r+0x31c>
 800c5c4:	4b24      	ldr	r3, [pc, #144]	; (800c658 <_dtoa_r+0x318>)
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c5cc:	e6d1      	b.n	800c372 <_dtoa_r+0x32>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e7de      	b.n	800c590 <_dtoa_r+0x250>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	9308      	str	r3, [sp, #32]
 800c5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d8:	eb0a 0903 	add.w	r9, sl, r3
 800c5dc:	f109 0301 	add.w	r3, r9, #1
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	bfb8      	it	lt
 800c5e6:	2301      	movlt	r3, #1
 800c5e8:	e7dd      	b.n	800c5a6 <_dtoa_r+0x266>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e7f2      	b.n	800c5d4 <_dtoa_r+0x294>
 800c5ee:	2501      	movs	r5, #1
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9305      	str	r3, [sp, #20]
 800c5f4:	9508      	str	r5, [sp, #32]
 800c5f6:	f04f 39ff 	mov.w	r9, #4294967295
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c600:	2312      	movs	r3, #18
 800c602:	9209      	str	r2, [sp, #36]	; 0x24
 800c604:	e7cf      	b.n	800c5a6 <_dtoa_r+0x266>
 800c606:	2301      	movs	r3, #1
 800c608:	9308      	str	r3, [sp, #32]
 800c60a:	e7f4      	b.n	800c5f6 <_dtoa_r+0x2b6>
 800c60c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c610:	f8cd 9004 	str.w	r9, [sp, #4]
 800c614:	464b      	mov	r3, r9
 800c616:	e7c6      	b.n	800c5a6 <_dtoa_r+0x266>
 800c618:	3101      	adds	r1, #1
 800c61a:	6041      	str	r1, [r0, #4]
 800c61c:	0052      	lsls	r2, r2, #1
 800c61e:	e7c6      	b.n	800c5ae <_dtoa_r+0x26e>
 800c620:	636f4361 	.word	0x636f4361
 800c624:	3fd287a7 	.word	0x3fd287a7
 800c628:	8b60c8b3 	.word	0x8b60c8b3
 800c62c:	3fc68a28 	.word	0x3fc68a28
 800c630:	509f79fb 	.word	0x509f79fb
 800c634:	3fd34413 	.word	0x3fd34413
 800c638:	0800e5b5 	.word	0x0800e5b5
 800c63c:	0800e5cc 	.word	0x0800e5cc
 800c640:	7ff00000 	.word	0x7ff00000
 800c644:	0800e5b1 	.word	0x0800e5b1
 800c648:	0800e5a8 	.word	0x0800e5a8
 800c64c:	0800e585 	.word	0x0800e585
 800c650:	3ff80000 	.word	0x3ff80000
 800c654:	0800e6c8 	.word	0x0800e6c8
 800c658:	0800e62b 	.word	0x0800e62b
 800c65c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c65e:	9a00      	ldr	r2, [sp, #0]
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	9b01      	ldr	r3, [sp, #4]
 800c664:	2b0e      	cmp	r3, #14
 800c666:	f200 80ad 	bhi.w	800c7c4 <_dtoa_r+0x484>
 800c66a:	2d00      	cmp	r5, #0
 800c66c:	f000 80aa 	beq.w	800c7c4 <_dtoa_r+0x484>
 800c670:	f1ba 0f00 	cmp.w	sl, #0
 800c674:	dd36      	ble.n	800c6e4 <_dtoa_r+0x3a4>
 800c676:	4ac3      	ldr	r2, [pc, #780]	; (800c984 <_dtoa_r+0x644>)
 800c678:	f00a 030f 	and.w	r3, sl, #15
 800c67c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c680:	ed93 7b00 	vldr	d7, [r3]
 800c684:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c688:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c68c:	eeb0 8a47 	vmov.f32	s16, s14
 800c690:	eef0 8a67 	vmov.f32	s17, s15
 800c694:	d016      	beq.n	800c6c4 <_dtoa_r+0x384>
 800c696:	4bbc      	ldr	r3, [pc, #752]	; (800c988 <_dtoa_r+0x648>)
 800c698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c69c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6a0:	f7f4 f8d4 	bl	800084c <__aeabi_ddiv>
 800c6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6a8:	f007 070f 	and.w	r7, r7, #15
 800c6ac:	2503      	movs	r5, #3
 800c6ae:	4eb6      	ldr	r6, [pc, #728]	; (800c988 <_dtoa_r+0x648>)
 800c6b0:	b957      	cbnz	r7, 800c6c8 <_dtoa_r+0x388>
 800c6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b6:	ec53 2b18 	vmov	r2, r3, d8
 800c6ba:	f7f4 f8c7 	bl	800084c <__aeabi_ddiv>
 800c6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c2:	e029      	b.n	800c718 <_dtoa_r+0x3d8>
 800c6c4:	2502      	movs	r5, #2
 800c6c6:	e7f2      	b.n	800c6ae <_dtoa_r+0x36e>
 800c6c8:	07f9      	lsls	r1, r7, #31
 800c6ca:	d508      	bpl.n	800c6de <_dtoa_r+0x39e>
 800c6cc:	ec51 0b18 	vmov	r0, r1, d8
 800c6d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6d4:	f7f3 ff90 	bl	80005f8 <__aeabi_dmul>
 800c6d8:	ec41 0b18 	vmov	d8, r0, r1
 800c6dc:	3501      	adds	r5, #1
 800c6de:	107f      	asrs	r7, r7, #1
 800c6e0:	3608      	adds	r6, #8
 800c6e2:	e7e5      	b.n	800c6b0 <_dtoa_r+0x370>
 800c6e4:	f000 80a6 	beq.w	800c834 <_dtoa_r+0x4f4>
 800c6e8:	f1ca 0600 	rsb	r6, sl, #0
 800c6ec:	4ba5      	ldr	r3, [pc, #660]	; (800c984 <_dtoa_r+0x644>)
 800c6ee:	4fa6      	ldr	r7, [pc, #664]	; (800c988 <_dtoa_r+0x648>)
 800c6f0:	f006 020f 	and.w	r2, r6, #15
 800c6f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c700:	f7f3 ff7a 	bl	80005f8 <__aeabi_dmul>
 800c704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c708:	1136      	asrs	r6, r6, #4
 800c70a:	2300      	movs	r3, #0
 800c70c:	2502      	movs	r5, #2
 800c70e:	2e00      	cmp	r6, #0
 800c710:	f040 8085 	bne.w	800c81e <_dtoa_r+0x4de>
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1d2      	bne.n	800c6be <_dtoa_r+0x37e>
 800c718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 808c 	beq.w	800c838 <_dtoa_r+0x4f8>
 800c720:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c724:	4b99      	ldr	r3, [pc, #612]	; (800c98c <_dtoa_r+0x64c>)
 800c726:	2200      	movs	r2, #0
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	f7f4 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800c730:	2800      	cmp	r0, #0
 800c732:	f000 8081 	beq.w	800c838 <_dtoa_r+0x4f8>
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d07d      	beq.n	800c838 <_dtoa_r+0x4f8>
 800c73c:	f1b9 0f00 	cmp.w	r9, #0
 800c740:	dd3c      	ble.n	800c7bc <_dtoa_r+0x47c>
 800c742:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c746:	9307      	str	r3, [sp, #28]
 800c748:	2200      	movs	r2, #0
 800c74a:	4b91      	ldr	r3, [pc, #580]	; (800c990 <_dtoa_r+0x650>)
 800c74c:	4630      	mov	r0, r6
 800c74e:	4639      	mov	r1, r7
 800c750:	f7f3 ff52 	bl	80005f8 <__aeabi_dmul>
 800c754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c758:	3501      	adds	r5, #1
 800c75a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c75e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c762:	4628      	mov	r0, r5
 800c764:	f7f3 fede 	bl	8000524 <__aeabi_i2d>
 800c768:	4632      	mov	r2, r6
 800c76a:	463b      	mov	r3, r7
 800c76c:	f7f3 ff44 	bl	80005f8 <__aeabi_dmul>
 800c770:	4b88      	ldr	r3, [pc, #544]	; (800c994 <_dtoa_r+0x654>)
 800c772:	2200      	movs	r2, #0
 800c774:	f7f3 fd8a 	bl	800028c <__adddf3>
 800c778:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c77c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c784:	2b00      	cmp	r3, #0
 800c786:	d15c      	bne.n	800c842 <_dtoa_r+0x502>
 800c788:	4b83      	ldr	r3, [pc, #524]	; (800c998 <_dtoa_r+0x658>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	4630      	mov	r0, r6
 800c78e:	4639      	mov	r1, r7
 800c790:	f7f3 fd7a 	bl	8000288 <__aeabi_dsub>
 800c794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c798:	4606      	mov	r6, r0
 800c79a:	460f      	mov	r7, r1
 800c79c:	f7f4 f9bc 	bl	8000b18 <__aeabi_dcmpgt>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	f040 8296 	bne.w	800ccd2 <_dtoa_r+0x992>
 800c7a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	f7f4 f993 	bl	8000adc <__aeabi_dcmplt>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f040 8288 	bne.w	800cccc <_dtoa_r+0x98c>
 800c7bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c7c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f2c0 8158 	blt.w	800ca7c <_dtoa_r+0x73c>
 800c7cc:	f1ba 0f0e 	cmp.w	sl, #14
 800c7d0:	f300 8154 	bgt.w	800ca7c <_dtoa_r+0x73c>
 800c7d4:	4b6b      	ldr	r3, [pc, #428]	; (800c984 <_dtoa_r+0x644>)
 800c7d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c7da:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f280 80e3 	bge.w	800c9ac <_dtoa_r+0x66c>
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f300 80df 	bgt.w	800c9ac <_dtoa_r+0x66c>
 800c7ee:	f040 826d 	bne.w	800cccc <_dtoa_r+0x98c>
 800c7f2:	4b69      	ldr	r3, [pc, #420]	; (800c998 <_dtoa_r+0x658>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4640      	mov	r0, r8
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	f7f3 fefd 	bl	80005f8 <__aeabi_dmul>
 800c7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c802:	f7f4 f97f 	bl	8000b04 <__aeabi_dcmpge>
 800c806:	9e01      	ldr	r6, [sp, #4]
 800c808:	4637      	mov	r7, r6
 800c80a:	2800      	cmp	r0, #0
 800c80c:	f040 8243 	bne.w	800cc96 <_dtoa_r+0x956>
 800c810:	9d00      	ldr	r5, [sp, #0]
 800c812:	2331      	movs	r3, #49	; 0x31
 800c814:	f805 3b01 	strb.w	r3, [r5], #1
 800c818:	f10a 0a01 	add.w	sl, sl, #1
 800c81c:	e23f      	b.n	800cc9e <_dtoa_r+0x95e>
 800c81e:	07f2      	lsls	r2, r6, #31
 800c820:	d505      	bpl.n	800c82e <_dtoa_r+0x4ee>
 800c822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c826:	f7f3 fee7 	bl	80005f8 <__aeabi_dmul>
 800c82a:	3501      	adds	r5, #1
 800c82c:	2301      	movs	r3, #1
 800c82e:	1076      	asrs	r6, r6, #1
 800c830:	3708      	adds	r7, #8
 800c832:	e76c      	b.n	800c70e <_dtoa_r+0x3ce>
 800c834:	2502      	movs	r5, #2
 800c836:	e76f      	b.n	800c718 <_dtoa_r+0x3d8>
 800c838:	9b01      	ldr	r3, [sp, #4]
 800c83a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c83e:	930c      	str	r3, [sp, #48]	; 0x30
 800c840:	e78d      	b.n	800c75e <_dtoa_r+0x41e>
 800c842:	9900      	ldr	r1, [sp, #0]
 800c844:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c848:	4b4e      	ldr	r3, [pc, #312]	; (800c984 <_dtoa_r+0x644>)
 800c84a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c84e:	4401      	add	r1, r0
 800c850:	9102      	str	r1, [sp, #8]
 800c852:	9908      	ldr	r1, [sp, #32]
 800c854:	eeb0 8a47 	vmov.f32	s16, s14
 800c858:	eef0 8a67 	vmov.f32	s17, s15
 800c85c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c864:	2900      	cmp	r1, #0
 800c866:	d045      	beq.n	800c8f4 <_dtoa_r+0x5b4>
 800c868:	494c      	ldr	r1, [pc, #304]	; (800c99c <_dtoa_r+0x65c>)
 800c86a:	2000      	movs	r0, #0
 800c86c:	f7f3 ffee 	bl	800084c <__aeabi_ddiv>
 800c870:	ec53 2b18 	vmov	r2, r3, d8
 800c874:	f7f3 fd08 	bl	8000288 <__aeabi_dsub>
 800c878:	9d00      	ldr	r5, [sp, #0]
 800c87a:	ec41 0b18 	vmov	d8, r0, r1
 800c87e:	4639      	mov	r1, r7
 800c880:	4630      	mov	r0, r6
 800c882:	f7f4 f969 	bl	8000b58 <__aeabi_d2iz>
 800c886:	900c      	str	r0, [sp, #48]	; 0x30
 800c888:	f7f3 fe4c 	bl	8000524 <__aeabi_i2d>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f3 fcf8 	bl	8000288 <__aeabi_dsub>
 800c898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c89a:	3330      	adds	r3, #48	; 0x30
 800c89c:	f805 3b01 	strb.w	r3, [r5], #1
 800c8a0:	ec53 2b18 	vmov	r2, r3, d8
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	460f      	mov	r7, r1
 800c8a8:	f7f4 f918 	bl	8000adc <__aeabi_dcmplt>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d165      	bne.n	800c97c <_dtoa_r+0x63c>
 800c8b0:	4632      	mov	r2, r6
 800c8b2:	463b      	mov	r3, r7
 800c8b4:	4935      	ldr	r1, [pc, #212]	; (800c98c <_dtoa_r+0x64c>)
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	f7f3 fce6 	bl	8000288 <__aeabi_dsub>
 800c8bc:	ec53 2b18 	vmov	r2, r3, d8
 800c8c0:	f7f4 f90c 	bl	8000adc <__aeabi_dcmplt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f040 80b9 	bne.w	800ca3c <_dtoa_r+0x6fc>
 800c8ca:	9b02      	ldr	r3, [sp, #8]
 800c8cc:	429d      	cmp	r5, r3
 800c8ce:	f43f af75 	beq.w	800c7bc <_dtoa_r+0x47c>
 800c8d2:	4b2f      	ldr	r3, [pc, #188]	; (800c990 <_dtoa_r+0x650>)
 800c8d4:	ec51 0b18 	vmov	r0, r1, d8
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fe8d 	bl	80005f8 <__aeabi_dmul>
 800c8de:	4b2c      	ldr	r3, [pc, #176]	; (800c990 <_dtoa_r+0x650>)
 800c8e0:	ec41 0b18 	vmov	d8, r0, r1
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f3 fe85 	bl	80005f8 <__aeabi_dmul>
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	460f      	mov	r7, r1
 800c8f2:	e7c4      	b.n	800c87e <_dtoa_r+0x53e>
 800c8f4:	ec51 0b17 	vmov	r0, r1, d7
 800c8f8:	f7f3 fe7e 	bl	80005f8 <__aeabi_dmul>
 800c8fc:	9b02      	ldr	r3, [sp, #8]
 800c8fe:	9d00      	ldr	r5, [sp, #0]
 800c900:	930c      	str	r3, [sp, #48]	; 0x30
 800c902:	ec41 0b18 	vmov	d8, r0, r1
 800c906:	4639      	mov	r1, r7
 800c908:	4630      	mov	r0, r6
 800c90a:	f7f4 f925 	bl	8000b58 <__aeabi_d2iz>
 800c90e:	9011      	str	r0, [sp, #68]	; 0x44
 800c910:	f7f3 fe08 	bl	8000524 <__aeabi_i2d>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4630      	mov	r0, r6
 800c91a:	4639      	mov	r1, r7
 800c91c:	f7f3 fcb4 	bl	8000288 <__aeabi_dsub>
 800c920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c922:	3330      	adds	r3, #48	; 0x30
 800c924:	f805 3b01 	strb.w	r3, [r5], #1
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	429d      	cmp	r5, r3
 800c92c:	4606      	mov	r6, r0
 800c92e:	460f      	mov	r7, r1
 800c930:	f04f 0200 	mov.w	r2, #0
 800c934:	d134      	bne.n	800c9a0 <_dtoa_r+0x660>
 800c936:	4b19      	ldr	r3, [pc, #100]	; (800c99c <_dtoa_r+0x65c>)
 800c938:	ec51 0b18 	vmov	r0, r1, d8
 800c93c:	f7f3 fca6 	bl	800028c <__adddf3>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4630      	mov	r0, r6
 800c946:	4639      	mov	r1, r7
 800c948:	f7f4 f8e6 	bl	8000b18 <__aeabi_dcmpgt>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d175      	bne.n	800ca3c <_dtoa_r+0x6fc>
 800c950:	ec53 2b18 	vmov	r2, r3, d8
 800c954:	4911      	ldr	r1, [pc, #68]	; (800c99c <_dtoa_r+0x65c>)
 800c956:	2000      	movs	r0, #0
 800c958:	f7f3 fc96 	bl	8000288 <__aeabi_dsub>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4630      	mov	r0, r6
 800c962:	4639      	mov	r1, r7
 800c964:	f7f4 f8ba 	bl	8000adc <__aeabi_dcmplt>
 800c968:	2800      	cmp	r0, #0
 800c96a:	f43f af27 	beq.w	800c7bc <_dtoa_r+0x47c>
 800c96e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c970:	1e6b      	subs	r3, r5, #1
 800c972:	930c      	str	r3, [sp, #48]	; 0x30
 800c974:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c978:	2b30      	cmp	r3, #48	; 0x30
 800c97a:	d0f8      	beq.n	800c96e <_dtoa_r+0x62e>
 800c97c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c980:	e04a      	b.n	800ca18 <_dtoa_r+0x6d8>
 800c982:	bf00      	nop
 800c984:	0800e6c8 	.word	0x0800e6c8
 800c988:	0800e6a0 	.word	0x0800e6a0
 800c98c:	3ff00000 	.word	0x3ff00000
 800c990:	40240000 	.word	0x40240000
 800c994:	401c0000 	.word	0x401c0000
 800c998:	40140000 	.word	0x40140000
 800c99c:	3fe00000 	.word	0x3fe00000
 800c9a0:	4baf      	ldr	r3, [pc, #700]	; (800cc60 <_dtoa_r+0x920>)
 800c9a2:	f7f3 fe29 	bl	80005f8 <__aeabi_dmul>
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	e7ac      	b.n	800c906 <_dtoa_r+0x5c6>
 800c9ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c9b0:	9d00      	ldr	r5, [sp, #0]
 800c9b2:	4642      	mov	r2, r8
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	f7f3 ff47 	bl	800084c <__aeabi_ddiv>
 800c9be:	f7f4 f8cb 	bl	8000b58 <__aeabi_d2iz>
 800c9c2:	9002      	str	r0, [sp, #8]
 800c9c4:	f7f3 fdae 	bl	8000524 <__aeabi_i2d>
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	464b      	mov	r3, r9
 800c9cc:	f7f3 fe14 	bl	80005f8 <__aeabi_dmul>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	f7f3 fc56 	bl	8000288 <__aeabi_dsub>
 800c9dc:	9e02      	ldr	r6, [sp, #8]
 800c9de:	9f01      	ldr	r7, [sp, #4]
 800c9e0:	3630      	adds	r6, #48	; 0x30
 800c9e2:	f805 6b01 	strb.w	r6, [r5], #1
 800c9e6:	9e00      	ldr	r6, [sp, #0]
 800c9e8:	1bae      	subs	r6, r5, r6
 800c9ea:	42b7      	cmp	r7, r6
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	d137      	bne.n	800ca62 <_dtoa_r+0x722>
 800c9f2:	f7f3 fc4b 	bl	800028c <__adddf3>
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	f7f4 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 800ca02:	b9c8      	cbnz	r0, 800ca38 <_dtoa_r+0x6f8>
 800ca04:	4642      	mov	r2, r8
 800ca06:	464b      	mov	r3, r9
 800ca08:	4630      	mov	r0, r6
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	f7f4 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca10:	b110      	cbz	r0, 800ca18 <_dtoa_r+0x6d8>
 800ca12:	9b02      	ldr	r3, [sp, #8]
 800ca14:	07d9      	lsls	r1, r3, #31
 800ca16:	d40f      	bmi.n	800ca38 <_dtoa_r+0x6f8>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4659      	mov	r1, fp
 800ca1c:	f000 facc 	bl	800cfb8 <_Bfree>
 800ca20:	2300      	movs	r3, #0
 800ca22:	702b      	strb	r3, [r5, #0]
 800ca24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca26:	f10a 0001 	add.w	r0, sl, #1
 800ca2a:	6018      	str	r0, [r3, #0]
 800ca2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f43f acd8 	beq.w	800c3e4 <_dtoa_r+0xa4>
 800ca34:	601d      	str	r5, [r3, #0]
 800ca36:	e4d5      	b.n	800c3e4 <_dtoa_r+0xa4>
 800ca38:	f8cd a01c 	str.w	sl, [sp, #28]
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	461d      	mov	r5, r3
 800ca40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca44:	2a39      	cmp	r2, #57	; 0x39
 800ca46:	d108      	bne.n	800ca5a <_dtoa_r+0x71a>
 800ca48:	9a00      	ldr	r2, [sp, #0]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d1f7      	bne.n	800ca3e <_dtoa_r+0x6fe>
 800ca4e:	9a07      	ldr	r2, [sp, #28]
 800ca50:	9900      	ldr	r1, [sp, #0]
 800ca52:	3201      	adds	r2, #1
 800ca54:	9207      	str	r2, [sp, #28]
 800ca56:	2230      	movs	r2, #48	; 0x30
 800ca58:	700a      	strb	r2, [r1, #0]
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	3201      	adds	r2, #1
 800ca5e:	701a      	strb	r2, [r3, #0]
 800ca60:	e78c      	b.n	800c97c <_dtoa_r+0x63c>
 800ca62:	4b7f      	ldr	r3, [pc, #508]	; (800cc60 <_dtoa_r+0x920>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	f7f3 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4606      	mov	r6, r0
 800ca70:	460f      	mov	r7, r1
 800ca72:	f7f4 f829 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d09b      	beq.n	800c9b2 <_dtoa_r+0x672>
 800ca7a:	e7cd      	b.n	800ca18 <_dtoa_r+0x6d8>
 800ca7c:	9a08      	ldr	r2, [sp, #32]
 800ca7e:	2a00      	cmp	r2, #0
 800ca80:	f000 80c4 	beq.w	800cc0c <_dtoa_r+0x8cc>
 800ca84:	9a05      	ldr	r2, [sp, #20]
 800ca86:	2a01      	cmp	r2, #1
 800ca88:	f300 80a8 	bgt.w	800cbdc <_dtoa_r+0x89c>
 800ca8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca8e:	2a00      	cmp	r2, #0
 800ca90:	f000 80a0 	beq.w	800cbd4 <_dtoa_r+0x894>
 800ca94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca98:	9e06      	ldr	r6, [sp, #24]
 800ca9a:	4645      	mov	r5, r8
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	2101      	movs	r1, #1
 800caa0:	441a      	add	r2, r3
 800caa2:	4620      	mov	r0, r4
 800caa4:	4498      	add	r8, r3
 800caa6:	9204      	str	r2, [sp, #16]
 800caa8:	f000 fb42 	bl	800d130 <__i2b>
 800caac:	4607      	mov	r7, r0
 800caae:	2d00      	cmp	r5, #0
 800cab0:	dd0b      	ble.n	800caca <_dtoa_r+0x78a>
 800cab2:	9b04      	ldr	r3, [sp, #16]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	dd08      	ble.n	800caca <_dtoa_r+0x78a>
 800cab8:	42ab      	cmp	r3, r5
 800caba:	9a04      	ldr	r2, [sp, #16]
 800cabc:	bfa8      	it	ge
 800cabe:	462b      	movge	r3, r5
 800cac0:	eba8 0803 	sub.w	r8, r8, r3
 800cac4:	1aed      	subs	r5, r5, r3
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	9304      	str	r3, [sp, #16]
 800caca:	9b06      	ldr	r3, [sp, #24]
 800cacc:	b1fb      	cbz	r3, 800cb0e <_dtoa_r+0x7ce>
 800cace:	9b08      	ldr	r3, [sp, #32]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 809f 	beq.w	800cc14 <_dtoa_r+0x8d4>
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	dd11      	ble.n	800cafe <_dtoa_r+0x7be>
 800cada:	4639      	mov	r1, r7
 800cadc:	4632      	mov	r2, r6
 800cade:	4620      	mov	r0, r4
 800cae0:	f000 fbe2 	bl	800d2a8 <__pow5mult>
 800cae4:	465a      	mov	r2, fp
 800cae6:	4601      	mov	r1, r0
 800cae8:	4607      	mov	r7, r0
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fb36 	bl	800d15c <__multiply>
 800caf0:	4659      	mov	r1, fp
 800caf2:	9007      	str	r0, [sp, #28]
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 fa5f 	bl	800cfb8 <_Bfree>
 800cafa:	9b07      	ldr	r3, [sp, #28]
 800cafc:	469b      	mov	fp, r3
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	1b9a      	subs	r2, r3, r6
 800cb02:	d004      	beq.n	800cb0e <_dtoa_r+0x7ce>
 800cb04:	4659      	mov	r1, fp
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 fbce 	bl	800d2a8 <__pow5mult>
 800cb0c:	4683      	mov	fp, r0
 800cb0e:	2101      	movs	r1, #1
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 fb0d 	bl	800d130 <__i2b>
 800cb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	dd7c      	ble.n	800cc18 <_dtoa_r+0x8d8>
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4601      	mov	r1, r0
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 fbc0 	bl	800d2a8 <__pow5mult>
 800cb28:	9b05      	ldr	r3, [sp, #20]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	dd76      	ble.n	800cc1e <_dtoa_r+0x8de>
 800cb30:	2300      	movs	r3, #0
 800cb32:	9306      	str	r3, [sp, #24]
 800cb34:	6933      	ldr	r3, [r6, #16]
 800cb36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb3a:	6918      	ldr	r0, [r3, #16]
 800cb3c:	f000 faa8 	bl	800d090 <__hi0bits>
 800cb40:	f1c0 0020 	rsb	r0, r0, #32
 800cb44:	9b04      	ldr	r3, [sp, #16]
 800cb46:	4418      	add	r0, r3
 800cb48:	f010 001f 	ands.w	r0, r0, #31
 800cb4c:	f000 8086 	beq.w	800cc5c <_dtoa_r+0x91c>
 800cb50:	f1c0 0320 	rsb	r3, r0, #32
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	dd7f      	ble.n	800cc58 <_dtoa_r+0x918>
 800cb58:	f1c0 001c 	rsb	r0, r0, #28
 800cb5c:	9b04      	ldr	r3, [sp, #16]
 800cb5e:	4403      	add	r3, r0
 800cb60:	4480      	add	r8, r0
 800cb62:	4405      	add	r5, r0
 800cb64:	9304      	str	r3, [sp, #16]
 800cb66:	f1b8 0f00 	cmp.w	r8, #0
 800cb6a:	dd05      	ble.n	800cb78 <_dtoa_r+0x838>
 800cb6c:	4659      	mov	r1, fp
 800cb6e:	4642      	mov	r2, r8
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 fbf3 	bl	800d35c <__lshift>
 800cb76:	4683      	mov	fp, r0
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dd05      	ble.n	800cb8a <_dtoa_r+0x84a>
 800cb7e:	4631      	mov	r1, r6
 800cb80:	461a      	mov	r2, r3
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 fbea 	bl	800d35c <__lshift>
 800cb88:	4606      	mov	r6, r0
 800cb8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d069      	beq.n	800cc64 <_dtoa_r+0x924>
 800cb90:	4631      	mov	r1, r6
 800cb92:	4658      	mov	r0, fp
 800cb94:	f000 fc4e 	bl	800d434 <__mcmp>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	da63      	bge.n	800cc64 <_dtoa_r+0x924>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4659      	mov	r1, fp
 800cba0:	220a      	movs	r2, #10
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 fa2a 	bl	800cffc <__multadd>
 800cba8:	9b08      	ldr	r3, [sp, #32]
 800cbaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbae:	4683      	mov	fp, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 818f 	beq.w	800ced4 <_dtoa_r+0xb94>
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	2300      	movs	r3, #0
 800cbba:	220a      	movs	r2, #10
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f000 fa1d 	bl	800cffc <__multadd>
 800cbc2:	f1b9 0f00 	cmp.w	r9, #0
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	f300 808e 	bgt.w	800cce8 <_dtoa_r+0x9a8>
 800cbcc:	9b05      	ldr	r3, [sp, #20]
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	dc50      	bgt.n	800cc74 <_dtoa_r+0x934>
 800cbd2:	e089      	b.n	800cce8 <_dtoa_r+0x9a8>
 800cbd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbda:	e75d      	b.n	800ca98 <_dtoa_r+0x758>
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	1e5e      	subs	r6, r3, #1
 800cbe0:	9b06      	ldr	r3, [sp, #24]
 800cbe2:	42b3      	cmp	r3, r6
 800cbe4:	bfbf      	itttt	lt
 800cbe6:	9b06      	ldrlt	r3, [sp, #24]
 800cbe8:	9606      	strlt	r6, [sp, #24]
 800cbea:	1af2      	sublt	r2, r6, r3
 800cbec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cbee:	bfb6      	itet	lt
 800cbf0:	189b      	addlt	r3, r3, r2
 800cbf2:	1b9e      	subge	r6, r3, r6
 800cbf4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cbf6:	9b01      	ldr	r3, [sp, #4]
 800cbf8:	bfb8      	it	lt
 800cbfa:	2600      	movlt	r6, #0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	bfb5      	itete	lt
 800cc00:	eba8 0503 	sublt.w	r5, r8, r3
 800cc04:	9b01      	ldrge	r3, [sp, #4]
 800cc06:	2300      	movlt	r3, #0
 800cc08:	4645      	movge	r5, r8
 800cc0a:	e747      	b.n	800ca9c <_dtoa_r+0x75c>
 800cc0c:	9e06      	ldr	r6, [sp, #24]
 800cc0e:	9f08      	ldr	r7, [sp, #32]
 800cc10:	4645      	mov	r5, r8
 800cc12:	e74c      	b.n	800caae <_dtoa_r+0x76e>
 800cc14:	9a06      	ldr	r2, [sp, #24]
 800cc16:	e775      	b.n	800cb04 <_dtoa_r+0x7c4>
 800cc18:	9b05      	ldr	r3, [sp, #20]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	dc18      	bgt.n	800cc50 <_dtoa_r+0x910>
 800cc1e:	9b02      	ldr	r3, [sp, #8]
 800cc20:	b9b3      	cbnz	r3, 800cc50 <_dtoa_r+0x910>
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc28:	b9a3      	cbnz	r3, 800cc54 <_dtoa_r+0x914>
 800cc2a:	9b03      	ldr	r3, [sp, #12]
 800cc2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc30:	0d1b      	lsrs	r3, r3, #20
 800cc32:	051b      	lsls	r3, r3, #20
 800cc34:	b12b      	cbz	r3, 800cc42 <_dtoa_r+0x902>
 800cc36:	9b04      	ldr	r3, [sp, #16]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	f108 0801 	add.w	r8, r8, #1
 800cc40:	2301      	movs	r3, #1
 800cc42:	9306      	str	r3, [sp, #24]
 800cc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f47f af74 	bne.w	800cb34 <_dtoa_r+0x7f4>
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	e779      	b.n	800cb44 <_dtoa_r+0x804>
 800cc50:	2300      	movs	r3, #0
 800cc52:	e7f6      	b.n	800cc42 <_dtoa_r+0x902>
 800cc54:	9b02      	ldr	r3, [sp, #8]
 800cc56:	e7f4      	b.n	800cc42 <_dtoa_r+0x902>
 800cc58:	d085      	beq.n	800cb66 <_dtoa_r+0x826>
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	301c      	adds	r0, #28
 800cc5e:	e77d      	b.n	800cb5c <_dtoa_r+0x81c>
 800cc60:	40240000 	.word	0x40240000
 800cc64:	9b01      	ldr	r3, [sp, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	dc38      	bgt.n	800ccdc <_dtoa_r+0x99c>
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	dd35      	ble.n	800ccdc <_dtoa_r+0x99c>
 800cc70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cc74:	f1b9 0f00 	cmp.w	r9, #0
 800cc78:	d10d      	bne.n	800cc96 <_dtoa_r+0x956>
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	464b      	mov	r3, r9
 800cc7e:	2205      	movs	r2, #5
 800cc80:	4620      	mov	r0, r4
 800cc82:	f000 f9bb 	bl	800cffc <__multadd>
 800cc86:	4601      	mov	r1, r0
 800cc88:	4606      	mov	r6, r0
 800cc8a:	4658      	mov	r0, fp
 800cc8c:	f000 fbd2 	bl	800d434 <__mcmp>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f73f adbd 	bgt.w	800c810 <_dtoa_r+0x4d0>
 800cc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc98:	9d00      	ldr	r5, [sp, #0]
 800cc9a:	ea6f 0a03 	mvn.w	sl, r3
 800cc9e:	f04f 0800 	mov.w	r8, #0
 800cca2:	4631      	mov	r1, r6
 800cca4:	4620      	mov	r0, r4
 800cca6:	f000 f987 	bl	800cfb8 <_Bfree>
 800ccaa:	2f00      	cmp	r7, #0
 800ccac:	f43f aeb4 	beq.w	800ca18 <_dtoa_r+0x6d8>
 800ccb0:	f1b8 0f00 	cmp.w	r8, #0
 800ccb4:	d005      	beq.n	800ccc2 <_dtoa_r+0x982>
 800ccb6:	45b8      	cmp	r8, r7
 800ccb8:	d003      	beq.n	800ccc2 <_dtoa_r+0x982>
 800ccba:	4641      	mov	r1, r8
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 f97b 	bl	800cfb8 <_Bfree>
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f000 f977 	bl	800cfb8 <_Bfree>
 800ccca:	e6a5      	b.n	800ca18 <_dtoa_r+0x6d8>
 800cccc:	2600      	movs	r6, #0
 800ccce:	4637      	mov	r7, r6
 800ccd0:	e7e1      	b.n	800cc96 <_dtoa_r+0x956>
 800ccd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ccd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ccd8:	4637      	mov	r7, r6
 800ccda:	e599      	b.n	800c810 <_dtoa_r+0x4d0>
 800ccdc:	9b08      	ldr	r3, [sp, #32]
 800ccde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80fd 	beq.w	800cee2 <_dtoa_r+0xba2>
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	dd05      	ble.n	800ccf8 <_dtoa_r+0x9b8>
 800ccec:	4639      	mov	r1, r7
 800ccee:	462a      	mov	r2, r5
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fb33 	bl	800d35c <__lshift>
 800ccf6:	4607      	mov	r7, r0
 800ccf8:	9b06      	ldr	r3, [sp, #24]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d05c      	beq.n	800cdb8 <_dtoa_r+0xa78>
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 f919 	bl	800cf38 <_Balloc>
 800cd06:	4605      	mov	r5, r0
 800cd08:	b928      	cbnz	r0, 800cd16 <_dtoa_r+0x9d6>
 800cd0a:	4b80      	ldr	r3, [pc, #512]	; (800cf0c <_dtoa_r+0xbcc>)
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd12:	f7ff bb2e 	b.w	800c372 <_dtoa_r+0x32>
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	3202      	adds	r2, #2
 800cd1a:	0092      	lsls	r2, r2, #2
 800cd1c:	f107 010c 	add.w	r1, r7, #12
 800cd20:	300c      	adds	r0, #12
 800cd22:	f7fe fd27 	bl	800b774 <memcpy>
 800cd26:	2201      	movs	r2, #1
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f000 fb16 	bl	800d35c <__lshift>
 800cd30:	9b00      	ldr	r3, [sp, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	444b      	add	r3, r9
 800cd3a:	9307      	str	r3, [sp, #28]
 800cd3c:	9b02      	ldr	r3, [sp, #8]
 800cd3e:	f003 0301 	and.w	r3, r3, #1
 800cd42:	46b8      	mov	r8, r7
 800cd44:	9306      	str	r3, [sp, #24]
 800cd46:	4607      	mov	r7, r0
 800cd48:	9b01      	ldr	r3, [sp, #4]
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	4658      	mov	r0, fp
 800cd50:	9302      	str	r3, [sp, #8]
 800cd52:	f7ff fa69 	bl	800c228 <quorem>
 800cd56:	4603      	mov	r3, r0
 800cd58:	3330      	adds	r3, #48	; 0x30
 800cd5a:	9004      	str	r0, [sp, #16]
 800cd5c:	4641      	mov	r1, r8
 800cd5e:	4658      	mov	r0, fp
 800cd60:	9308      	str	r3, [sp, #32]
 800cd62:	f000 fb67 	bl	800d434 <__mcmp>
 800cd66:	463a      	mov	r2, r7
 800cd68:	4681      	mov	r9, r0
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 fb7d 	bl	800d46c <__mdiff>
 800cd72:	68c2      	ldr	r2, [r0, #12]
 800cd74:	9b08      	ldr	r3, [sp, #32]
 800cd76:	4605      	mov	r5, r0
 800cd78:	bb02      	cbnz	r2, 800cdbc <_dtoa_r+0xa7c>
 800cd7a:	4601      	mov	r1, r0
 800cd7c:	4658      	mov	r0, fp
 800cd7e:	f000 fb59 	bl	800d434 <__mcmp>
 800cd82:	9b08      	ldr	r3, [sp, #32]
 800cd84:	4602      	mov	r2, r0
 800cd86:	4629      	mov	r1, r5
 800cd88:	4620      	mov	r0, r4
 800cd8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cd8e:	f000 f913 	bl	800cfb8 <_Bfree>
 800cd92:	9b05      	ldr	r3, [sp, #20]
 800cd94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd96:	9d01      	ldr	r5, [sp, #4]
 800cd98:	ea43 0102 	orr.w	r1, r3, r2
 800cd9c:	9b06      	ldr	r3, [sp, #24]
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	9b08      	ldr	r3, [sp, #32]
 800cda2:	d10d      	bne.n	800cdc0 <_dtoa_r+0xa80>
 800cda4:	2b39      	cmp	r3, #57	; 0x39
 800cda6:	d029      	beq.n	800cdfc <_dtoa_r+0xabc>
 800cda8:	f1b9 0f00 	cmp.w	r9, #0
 800cdac:	dd01      	ble.n	800cdb2 <_dtoa_r+0xa72>
 800cdae:	9b04      	ldr	r3, [sp, #16]
 800cdb0:	3331      	adds	r3, #49	; 0x31
 800cdb2:	9a02      	ldr	r2, [sp, #8]
 800cdb4:	7013      	strb	r3, [r2, #0]
 800cdb6:	e774      	b.n	800cca2 <_dtoa_r+0x962>
 800cdb8:	4638      	mov	r0, r7
 800cdba:	e7b9      	b.n	800cd30 <_dtoa_r+0x9f0>
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	e7e2      	b.n	800cd86 <_dtoa_r+0xa46>
 800cdc0:	f1b9 0f00 	cmp.w	r9, #0
 800cdc4:	db06      	blt.n	800cdd4 <_dtoa_r+0xa94>
 800cdc6:	9905      	ldr	r1, [sp, #20]
 800cdc8:	ea41 0909 	orr.w	r9, r1, r9
 800cdcc:	9906      	ldr	r1, [sp, #24]
 800cdce:	ea59 0101 	orrs.w	r1, r9, r1
 800cdd2:	d120      	bne.n	800ce16 <_dtoa_r+0xad6>
 800cdd4:	2a00      	cmp	r2, #0
 800cdd6:	ddec      	ble.n	800cdb2 <_dtoa_r+0xa72>
 800cdd8:	4659      	mov	r1, fp
 800cdda:	2201      	movs	r2, #1
 800cddc:	4620      	mov	r0, r4
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	f000 fabc 	bl	800d35c <__lshift>
 800cde4:	4631      	mov	r1, r6
 800cde6:	4683      	mov	fp, r0
 800cde8:	f000 fb24 	bl	800d434 <__mcmp>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	9b01      	ldr	r3, [sp, #4]
 800cdf0:	dc02      	bgt.n	800cdf8 <_dtoa_r+0xab8>
 800cdf2:	d1de      	bne.n	800cdb2 <_dtoa_r+0xa72>
 800cdf4:	07da      	lsls	r2, r3, #31
 800cdf6:	d5dc      	bpl.n	800cdb2 <_dtoa_r+0xa72>
 800cdf8:	2b39      	cmp	r3, #57	; 0x39
 800cdfa:	d1d8      	bne.n	800cdae <_dtoa_r+0xa6e>
 800cdfc:	9a02      	ldr	r2, [sp, #8]
 800cdfe:	2339      	movs	r3, #57	; 0x39
 800ce00:	7013      	strb	r3, [r2, #0]
 800ce02:	462b      	mov	r3, r5
 800ce04:	461d      	mov	r5, r3
 800ce06:	3b01      	subs	r3, #1
 800ce08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce0c:	2a39      	cmp	r2, #57	; 0x39
 800ce0e:	d050      	beq.n	800ceb2 <_dtoa_r+0xb72>
 800ce10:	3201      	adds	r2, #1
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	e745      	b.n	800cca2 <_dtoa_r+0x962>
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	dd03      	ble.n	800ce22 <_dtoa_r+0xae2>
 800ce1a:	2b39      	cmp	r3, #57	; 0x39
 800ce1c:	d0ee      	beq.n	800cdfc <_dtoa_r+0xabc>
 800ce1e:	3301      	adds	r3, #1
 800ce20:	e7c7      	b.n	800cdb2 <_dtoa_r+0xa72>
 800ce22:	9a01      	ldr	r2, [sp, #4]
 800ce24:	9907      	ldr	r1, [sp, #28]
 800ce26:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce2a:	428a      	cmp	r2, r1
 800ce2c:	d02a      	beq.n	800ce84 <_dtoa_r+0xb44>
 800ce2e:	4659      	mov	r1, fp
 800ce30:	2300      	movs	r3, #0
 800ce32:	220a      	movs	r2, #10
 800ce34:	4620      	mov	r0, r4
 800ce36:	f000 f8e1 	bl	800cffc <__multadd>
 800ce3a:	45b8      	cmp	r8, r7
 800ce3c:	4683      	mov	fp, r0
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	f04f 020a 	mov.w	r2, #10
 800ce46:	4641      	mov	r1, r8
 800ce48:	4620      	mov	r0, r4
 800ce4a:	d107      	bne.n	800ce5c <_dtoa_r+0xb1c>
 800ce4c:	f000 f8d6 	bl	800cffc <__multadd>
 800ce50:	4680      	mov	r8, r0
 800ce52:	4607      	mov	r7, r0
 800ce54:	9b01      	ldr	r3, [sp, #4]
 800ce56:	3301      	adds	r3, #1
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	e775      	b.n	800cd48 <_dtoa_r+0xa08>
 800ce5c:	f000 f8ce 	bl	800cffc <__multadd>
 800ce60:	4639      	mov	r1, r7
 800ce62:	4680      	mov	r8, r0
 800ce64:	2300      	movs	r3, #0
 800ce66:	220a      	movs	r2, #10
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 f8c7 	bl	800cffc <__multadd>
 800ce6e:	4607      	mov	r7, r0
 800ce70:	e7f0      	b.n	800ce54 <_dtoa_r+0xb14>
 800ce72:	f1b9 0f00 	cmp.w	r9, #0
 800ce76:	9a00      	ldr	r2, [sp, #0]
 800ce78:	bfcc      	ite	gt
 800ce7a:	464d      	movgt	r5, r9
 800ce7c:	2501      	movle	r5, #1
 800ce7e:	4415      	add	r5, r2
 800ce80:	f04f 0800 	mov.w	r8, #0
 800ce84:	4659      	mov	r1, fp
 800ce86:	2201      	movs	r2, #1
 800ce88:	4620      	mov	r0, r4
 800ce8a:	9301      	str	r3, [sp, #4]
 800ce8c:	f000 fa66 	bl	800d35c <__lshift>
 800ce90:	4631      	mov	r1, r6
 800ce92:	4683      	mov	fp, r0
 800ce94:	f000 face 	bl	800d434 <__mcmp>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	dcb2      	bgt.n	800ce02 <_dtoa_r+0xac2>
 800ce9c:	d102      	bne.n	800cea4 <_dtoa_r+0xb64>
 800ce9e:	9b01      	ldr	r3, [sp, #4]
 800cea0:	07db      	lsls	r3, r3, #31
 800cea2:	d4ae      	bmi.n	800ce02 <_dtoa_r+0xac2>
 800cea4:	462b      	mov	r3, r5
 800cea6:	461d      	mov	r5, r3
 800cea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceac:	2a30      	cmp	r2, #48	; 0x30
 800ceae:	d0fa      	beq.n	800cea6 <_dtoa_r+0xb66>
 800ceb0:	e6f7      	b.n	800cca2 <_dtoa_r+0x962>
 800ceb2:	9a00      	ldr	r2, [sp, #0]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d1a5      	bne.n	800ce04 <_dtoa_r+0xac4>
 800ceb8:	f10a 0a01 	add.w	sl, sl, #1
 800cebc:	2331      	movs	r3, #49	; 0x31
 800cebe:	e779      	b.n	800cdb4 <_dtoa_r+0xa74>
 800cec0:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <_dtoa_r+0xbd0>)
 800cec2:	f7ff baaf 	b.w	800c424 <_dtoa_r+0xe4>
 800cec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f47f aa86 	bne.w	800c3da <_dtoa_r+0x9a>
 800cece:	4b11      	ldr	r3, [pc, #68]	; (800cf14 <_dtoa_r+0xbd4>)
 800ced0:	f7ff baa8 	b.w	800c424 <_dtoa_r+0xe4>
 800ced4:	f1b9 0f00 	cmp.w	r9, #0
 800ced8:	dc03      	bgt.n	800cee2 <_dtoa_r+0xba2>
 800ceda:	9b05      	ldr	r3, [sp, #20]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	f73f aec9 	bgt.w	800cc74 <_dtoa_r+0x934>
 800cee2:	9d00      	ldr	r5, [sp, #0]
 800cee4:	4631      	mov	r1, r6
 800cee6:	4658      	mov	r0, fp
 800cee8:	f7ff f99e 	bl	800c228 <quorem>
 800ceec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cef0:	f805 3b01 	strb.w	r3, [r5], #1
 800cef4:	9a00      	ldr	r2, [sp, #0]
 800cef6:	1aaa      	subs	r2, r5, r2
 800cef8:	4591      	cmp	r9, r2
 800cefa:	ddba      	ble.n	800ce72 <_dtoa_r+0xb32>
 800cefc:	4659      	mov	r1, fp
 800cefe:	2300      	movs	r3, #0
 800cf00:	220a      	movs	r2, #10
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 f87a 	bl	800cffc <__multadd>
 800cf08:	4683      	mov	fp, r0
 800cf0a:	e7eb      	b.n	800cee4 <_dtoa_r+0xba4>
 800cf0c:	0800e62b 	.word	0x0800e62b
 800cf10:	0800e584 	.word	0x0800e584
 800cf14:	0800e5a8 	.word	0x0800e5a8

0800cf18 <_localeconv_r>:
 800cf18:	4800      	ldr	r0, [pc, #0]	; (800cf1c <_localeconv_r+0x4>)
 800cf1a:	4770      	bx	lr
 800cf1c:	20000190 	.word	0x20000190

0800cf20 <__malloc_lock>:
 800cf20:	4801      	ldr	r0, [pc, #4]	; (800cf28 <__malloc_lock+0x8>)
 800cf22:	f000 bd22 	b.w	800d96a <__retarget_lock_acquire_recursive>
 800cf26:	bf00      	nop
 800cf28:	20000b5c 	.word	0x20000b5c

0800cf2c <__malloc_unlock>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	; (800cf34 <__malloc_unlock+0x8>)
 800cf2e:	f000 bd1d 	b.w	800d96c <__retarget_lock_release_recursive>
 800cf32:	bf00      	nop
 800cf34:	20000b5c 	.word	0x20000b5c

0800cf38 <_Balloc>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	b976      	cbnz	r6, 800cf60 <_Balloc+0x28>
 800cf42:	2010      	movs	r0, #16
 800cf44:	f7fe fc06 	bl	800b754 <malloc>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf4c:	b920      	cbnz	r0, 800cf58 <_Balloc+0x20>
 800cf4e:	4b18      	ldr	r3, [pc, #96]	; (800cfb0 <_Balloc+0x78>)
 800cf50:	4818      	ldr	r0, [pc, #96]	; (800cfb4 <_Balloc+0x7c>)
 800cf52:	2166      	movs	r1, #102	; 0x66
 800cf54:	f000 fcd8 	bl	800d908 <__assert_func>
 800cf58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf5c:	6006      	str	r6, [r0, #0]
 800cf5e:	60c6      	str	r6, [r0, #12]
 800cf60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf62:	68f3      	ldr	r3, [r6, #12]
 800cf64:	b183      	cbz	r3, 800cf88 <_Balloc+0x50>
 800cf66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf6e:	b9b8      	cbnz	r0, 800cfa0 <_Balloc+0x68>
 800cf70:	2101      	movs	r1, #1
 800cf72:	fa01 f605 	lsl.w	r6, r1, r5
 800cf76:	1d72      	adds	r2, r6, #5
 800cf78:	0092      	lsls	r2, r2, #2
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 fb5a 	bl	800d634 <_calloc_r>
 800cf80:	b160      	cbz	r0, 800cf9c <_Balloc+0x64>
 800cf82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf86:	e00e      	b.n	800cfa6 <_Balloc+0x6e>
 800cf88:	2221      	movs	r2, #33	; 0x21
 800cf8a:	2104      	movs	r1, #4
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f000 fb51 	bl	800d634 <_calloc_r>
 800cf92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf94:	60f0      	str	r0, [r6, #12]
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1e4      	bne.n	800cf66 <_Balloc+0x2e>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	6802      	ldr	r2, [r0, #0]
 800cfa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfac:	e7f7      	b.n	800cf9e <_Balloc+0x66>
 800cfae:	bf00      	nop
 800cfb0:	0800e5b5 	.word	0x0800e5b5
 800cfb4:	0800e63c 	.word	0x0800e63c

0800cfb8 <_Bfree>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	b976      	cbnz	r6, 800cfe0 <_Bfree+0x28>
 800cfc2:	2010      	movs	r0, #16
 800cfc4:	f7fe fbc6 	bl	800b754 <malloc>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	6268      	str	r0, [r5, #36]	; 0x24
 800cfcc:	b920      	cbnz	r0, 800cfd8 <_Bfree+0x20>
 800cfce:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <_Bfree+0x3c>)
 800cfd0:	4809      	ldr	r0, [pc, #36]	; (800cff8 <_Bfree+0x40>)
 800cfd2:	218a      	movs	r1, #138	; 0x8a
 800cfd4:	f000 fc98 	bl	800d908 <__assert_func>
 800cfd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfdc:	6006      	str	r6, [r0, #0]
 800cfde:	60c6      	str	r6, [r0, #12]
 800cfe0:	b13c      	cbz	r4, 800cff2 <_Bfree+0x3a>
 800cfe2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfe4:	6862      	ldr	r2, [r4, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfec:	6021      	str	r1, [r4, #0]
 800cfee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cff2:	bd70      	pop	{r4, r5, r6, pc}
 800cff4:	0800e5b5 	.word	0x0800e5b5
 800cff8:	0800e63c 	.word	0x0800e63c

0800cffc <__multadd>:
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d000:	690e      	ldr	r6, [r1, #16]
 800d002:	4607      	mov	r7, r0
 800d004:	4698      	mov	r8, r3
 800d006:	460c      	mov	r4, r1
 800d008:	f101 0014 	add.w	r0, r1, #20
 800d00c:	2300      	movs	r3, #0
 800d00e:	6805      	ldr	r5, [r0, #0]
 800d010:	b2a9      	uxth	r1, r5
 800d012:	fb02 8101 	mla	r1, r2, r1, r8
 800d016:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d01a:	0c2d      	lsrs	r5, r5, #16
 800d01c:	fb02 c505 	mla	r5, r2, r5, ip
 800d020:	b289      	uxth	r1, r1
 800d022:	3301      	adds	r3, #1
 800d024:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d028:	429e      	cmp	r6, r3
 800d02a:	f840 1b04 	str.w	r1, [r0], #4
 800d02e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d032:	dcec      	bgt.n	800d00e <__multadd+0x12>
 800d034:	f1b8 0f00 	cmp.w	r8, #0
 800d038:	d022      	beq.n	800d080 <__multadd+0x84>
 800d03a:	68a3      	ldr	r3, [r4, #8]
 800d03c:	42b3      	cmp	r3, r6
 800d03e:	dc19      	bgt.n	800d074 <__multadd+0x78>
 800d040:	6861      	ldr	r1, [r4, #4]
 800d042:	4638      	mov	r0, r7
 800d044:	3101      	adds	r1, #1
 800d046:	f7ff ff77 	bl	800cf38 <_Balloc>
 800d04a:	4605      	mov	r5, r0
 800d04c:	b928      	cbnz	r0, 800d05a <__multadd+0x5e>
 800d04e:	4602      	mov	r2, r0
 800d050:	4b0d      	ldr	r3, [pc, #52]	; (800d088 <__multadd+0x8c>)
 800d052:	480e      	ldr	r0, [pc, #56]	; (800d08c <__multadd+0x90>)
 800d054:	21b5      	movs	r1, #181	; 0xb5
 800d056:	f000 fc57 	bl	800d908 <__assert_func>
 800d05a:	6922      	ldr	r2, [r4, #16]
 800d05c:	3202      	adds	r2, #2
 800d05e:	f104 010c 	add.w	r1, r4, #12
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	300c      	adds	r0, #12
 800d066:	f7fe fb85 	bl	800b774 <memcpy>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4638      	mov	r0, r7
 800d06e:	f7ff ffa3 	bl	800cfb8 <_Bfree>
 800d072:	462c      	mov	r4, r5
 800d074:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d078:	3601      	adds	r6, #1
 800d07a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d07e:	6126      	str	r6, [r4, #16]
 800d080:	4620      	mov	r0, r4
 800d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d086:	bf00      	nop
 800d088:	0800e62b 	.word	0x0800e62b
 800d08c:	0800e63c 	.word	0x0800e63c

0800d090 <__hi0bits>:
 800d090:	0c03      	lsrs	r3, r0, #16
 800d092:	041b      	lsls	r3, r3, #16
 800d094:	b9d3      	cbnz	r3, 800d0cc <__hi0bits+0x3c>
 800d096:	0400      	lsls	r0, r0, #16
 800d098:	2310      	movs	r3, #16
 800d09a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d09e:	bf04      	itt	eq
 800d0a0:	0200      	lsleq	r0, r0, #8
 800d0a2:	3308      	addeq	r3, #8
 800d0a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d0a8:	bf04      	itt	eq
 800d0aa:	0100      	lsleq	r0, r0, #4
 800d0ac:	3304      	addeq	r3, #4
 800d0ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0b2:	bf04      	itt	eq
 800d0b4:	0080      	lsleq	r0, r0, #2
 800d0b6:	3302      	addeq	r3, #2
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	db05      	blt.n	800d0c8 <__hi0bits+0x38>
 800d0bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0c0:	f103 0301 	add.w	r3, r3, #1
 800d0c4:	bf08      	it	eq
 800d0c6:	2320      	moveq	r3, #32
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	4770      	bx	lr
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	e7e4      	b.n	800d09a <__hi0bits+0xa>

0800d0d0 <__lo0bits>:
 800d0d0:	6803      	ldr	r3, [r0, #0]
 800d0d2:	f013 0207 	ands.w	r2, r3, #7
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	d00b      	beq.n	800d0f2 <__lo0bits+0x22>
 800d0da:	07da      	lsls	r2, r3, #31
 800d0dc:	d424      	bmi.n	800d128 <__lo0bits+0x58>
 800d0de:	0798      	lsls	r0, r3, #30
 800d0e0:	bf49      	itett	mi
 800d0e2:	085b      	lsrmi	r3, r3, #1
 800d0e4:	089b      	lsrpl	r3, r3, #2
 800d0e6:	2001      	movmi	r0, #1
 800d0e8:	600b      	strmi	r3, [r1, #0]
 800d0ea:	bf5c      	itt	pl
 800d0ec:	600b      	strpl	r3, [r1, #0]
 800d0ee:	2002      	movpl	r0, #2
 800d0f0:	4770      	bx	lr
 800d0f2:	b298      	uxth	r0, r3
 800d0f4:	b9b0      	cbnz	r0, 800d124 <__lo0bits+0x54>
 800d0f6:	0c1b      	lsrs	r3, r3, #16
 800d0f8:	2010      	movs	r0, #16
 800d0fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d0fe:	bf04      	itt	eq
 800d100:	0a1b      	lsreq	r3, r3, #8
 800d102:	3008      	addeq	r0, #8
 800d104:	071a      	lsls	r2, r3, #28
 800d106:	bf04      	itt	eq
 800d108:	091b      	lsreq	r3, r3, #4
 800d10a:	3004      	addeq	r0, #4
 800d10c:	079a      	lsls	r2, r3, #30
 800d10e:	bf04      	itt	eq
 800d110:	089b      	lsreq	r3, r3, #2
 800d112:	3002      	addeq	r0, #2
 800d114:	07da      	lsls	r2, r3, #31
 800d116:	d403      	bmi.n	800d120 <__lo0bits+0x50>
 800d118:	085b      	lsrs	r3, r3, #1
 800d11a:	f100 0001 	add.w	r0, r0, #1
 800d11e:	d005      	beq.n	800d12c <__lo0bits+0x5c>
 800d120:	600b      	str	r3, [r1, #0]
 800d122:	4770      	bx	lr
 800d124:	4610      	mov	r0, r2
 800d126:	e7e8      	b.n	800d0fa <__lo0bits+0x2a>
 800d128:	2000      	movs	r0, #0
 800d12a:	4770      	bx	lr
 800d12c:	2020      	movs	r0, #32
 800d12e:	4770      	bx	lr

0800d130 <__i2b>:
 800d130:	b510      	push	{r4, lr}
 800d132:	460c      	mov	r4, r1
 800d134:	2101      	movs	r1, #1
 800d136:	f7ff feff 	bl	800cf38 <_Balloc>
 800d13a:	4602      	mov	r2, r0
 800d13c:	b928      	cbnz	r0, 800d14a <__i2b+0x1a>
 800d13e:	4b05      	ldr	r3, [pc, #20]	; (800d154 <__i2b+0x24>)
 800d140:	4805      	ldr	r0, [pc, #20]	; (800d158 <__i2b+0x28>)
 800d142:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d146:	f000 fbdf 	bl	800d908 <__assert_func>
 800d14a:	2301      	movs	r3, #1
 800d14c:	6144      	str	r4, [r0, #20]
 800d14e:	6103      	str	r3, [r0, #16]
 800d150:	bd10      	pop	{r4, pc}
 800d152:	bf00      	nop
 800d154:	0800e62b 	.word	0x0800e62b
 800d158:	0800e63c 	.word	0x0800e63c

0800d15c <__multiply>:
 800d15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	4614      	mov	r4, r2
 800d162:	690a      	ldr	r2, [r1, #16]
 800d164:	6923      	ldr	r3, [r4, #16]
 800d166:	429a      	cmp	r2, r3
 800d168:	bfb8      	it	lt
 800d16a:	460b      	movlt	r3, r1
 800d16c:	460d      	mov	r5, r1
 800d16e:	bfbc      	itt	lt
 800d170:	4625      	movlt	r5, r4
 800d172:	461c      	movlt	r4, r3
 800d174:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d178:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d17c:	68ab      	ldr	r3, [r5, #8]
 800d17e:	6869      	ldr	r1, [r5, #4]
 800d180:	eb0a 0709 	add.w	r7, sl, r9
 800d184:	42bb      	cmp	r3, r7
 800d186:	b085      	sub	sp, #20
 800d188:	bfb8      	it	lt
 800d18a:	3101      	addlt	r1, #1
 800d18c:	f7ff fed4 	bl	800cf38 <_Balloc>
 800d190:	b930      	cbnz	r0, 800d1a0 <__multiply+0x44>
 800d192:	4602      	mov	r2, r0
 800d194:	4b42      	ldr	r3, [pc, #264]	; (800d2a0 <__multiply+0x144>)
 800d196:	4843      	ldr	r0, [pc, #268]	; (800d2a4 <__multiply+0x148>)
 800d198:	f240 115d 	movw	r1, #349	; 0x15d
 800d19c:	f000 fbb4 	bl	800d908 <__assert_func>
 800d1a0:	f100 0614 	add.w	r6, r0, #20
 800d1a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d1a8:	4633      	mov	r3, r6
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4543      	cmp	r3, r8
 800d1ae:	d31e      	bcc.n	800d1ee <__multiply+0x92>
 800d1b0:	f105 0c14 	add.w	ip, r5, #20
 800d1b4:	f104 0314 	add.w	r3, r4, #20
 800d1b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d1bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d1c0:	9202      	str	r2, [sp, #8]
 800d1c2:	ebac 0205 	sub.w	r2, ip, r5
 800d1c6:	3a15      	subs	r2, #21
 800d1c8:	f022 0203 	bic.w	r2, r2, #3
 800d1cc:	3204      	adds	r2, #4
 800d1ce:	f105 0115 	add.w	r1, r5, #21
 800d1d2:	458c      	cmp	ip, r1
 800d1d4:	bf38      	it	cc
 800d1d6:	2204      	movcc	r2, #4
 800d1d8:	9201      	str	r2, [sp, #4]
 800d1da:	9a02      	ldr	r2, [sp, #8]
 800d1dc:	9303      	str	r3, [sp, #12]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d808      	bhi.n	800d1f4 <__multiply+0x98>
 800d1e2:	2f00      	cmp	r7, #0
 800d1e4:	dc55      	bgt.n	800d292 <__multiply+0x136>
 800d1e6:	6107      	str	r7, [r0, #16]
 800d1e8:	b005      	add	sp, #20
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	f843 2b04 	str.w	r2, [r3], #4
 800d1f2:	e7db      	b.n	800d1ac <__multiply+0x50>
 800d1f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1f8:	f1ba 0f00 	cmp.w	sl, #0
 800d1fc:	d020      	beq.n	800d240 <__multiply+0xe4>
 800d1fe:	f105 0e14 	add.w	lr, r5, #20
 800d202:	46b1      	mov	r9, r6
 800d204:	2200      	movs	r2, #0
 800d206:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d20a:	f8d9 b000 	ldr.w	fp, [r9]
 800d20e:	b2a1      	uxth	r1, r4
 800d210:	fa1f fb8b 	uxth.w	fp, fp
 800d214:	fb0a b101 	mla	r1, sl, r1, fp
 800d218:	4411      	add	r1, r2
 800d21a:	f8d9 2000 	ldr.w	r2, [r9]
 800d21e:	0c24      	lsrs	r4, r4, #16
 800d220:	0c12      	lsrs	r2, r2, #16
 800d222:	fb0a 2404 	mla	r4, sl, r4, r2
 800d226:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d22a:	b289      	uxth	r1, r1
 800d22c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d230:	45f4      	cmp	ip, lr
 800d232:	f849 1b04 	str.w	r1, [r9], #4
 800d236:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d23a:	d8e4      	bhi.n	800d206 <__multiply+0xaa>
 800d23c:	9901      	ldr	r1, [sp, #4]
 800d23e:	5072      	str	r2, [r6, r1]
 800d240:	9a03      	ldr	r2, [sp, #12]
 800d242:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d246:	3304      	adds	r3, #4
 800d248:	f1b9 0f00 	cmp.w	r9, #0
 800d24c:	d01f      	beq.n	800d28e <__multiply+0x132>
 800d24e:	6834      	ldr	r4, [r6, #0]
 800d250:	f105 0114 	add.w	r1, r5, #20
 800d254:	46b6      	mov	lr, r6
 800d256:	f04f 0a00 	mov.w	sl, #0
 800d25a:	880a      	ldrh	r2, [r1, #0]
 800d25c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d260:	fb09 b202 	mla	r2, r9, r2, fp
 800d264:	4492      	add	sl, r2
 800d266:	b2a4      	uxth	r4, r4
 800d268:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d26c:	f84e 4b04 	str.w	r4, [lr], #4
 800d270:	f851 4b04 	ldr.w	r4, [r1], #4
 800d274:	f8be 2000 	ldrh.w	r2, [lr]
 800d278:	0c24      	lsrs	r4, r4, #16
 800d27a:	fb09 2404 	mla	r4, r9, r4, r2
 800d27e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d282:	458c      	cmp	ip, r1
 800d284:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d288:	d8e7      	bhi.n	800d25a <__multiply+0xfe>
 800d28a:	9a01      	ldr	r2, [sp, #4]
 800d28c:	50b4      	str	r4, [r6, r2]
 800d28e:	3604      	adds	r6, #4
 800d290:	e7a3      	b.n	800d1da <__multiply+0x7e>
 800d292:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1a5      	bne.n	800d1e6 <__multiply+0x8a>
 800d29a:	3f01      	subs	r7, #1
 800d29c:	e7a1      	b.n	800d1e2 <__multiply+0x86>
 800d29e:	bf00      	nop
 800d2a0:	0800e62b 	.word	0x0800e62b
 800d2a4:	0800e63c 	.word	0x0800e63c

0800d2a8 <__pow5mult>:
 800d2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	f012 0203 	ands.w	r2, r2, #3
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	d007      	beq.n	800d2c8 <__pow5mult+0x20>
 800d2b8:	4c25      	ldr	r4, [pc, #148]	; (800d350 <__pow5mult+0xa8>)
 800d2ba:	3a01      	subs	r2, #1
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2c2:	f7ff fe9b 	bl	800cffc <__multadd>
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	10ad      	asrs	r5, r5, #2
 800d2ca:	d03d      	beq.n	800d348 <__pow5mult+0xa0>
 800d2cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2ce:	b97c      	cbnz	r4, 800d2f0 <__pow5mult+0x48>
 800d2d0:	2010      	movs	r0, #16
 800d2d2:	f7fe fa3f 	bl	800b754 <malloc>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d2da:	b928      	cbnz	r0, 800d2e8 <__pow5mult+0x40>
 800d2dc:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <__pow5mult+0xac>)
 800d2de:	481e      	ldr	r0, [pc, #120]	; (800d358 <__pow5mult+0xb0>)
 800d2e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d2e4:	f000 fb10 	bl	800d908 <__assert_func>
 800d2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2ec:	6004      	str	r4, [r0, #0]
 800d2ee:	60c4      	str	r4, [r0, #12]
 800d2f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2f8:	b94c      	cbnz	r4, 800d30e <__pow5mult+0x66>
 800d2fa:	f240 2171 	movw	r1, #625	; 0x271
 800d2fe:	4630      	mov	r0, r6
 800d300:	f7ff ff16 	bl	800d130 <__i2b>
 800d304:	2300      	movs	r3, #0
 800d306:	f8c8 0008 	str.w	r0, [r8, #8]
 800d30a:	4604      	mov	r4, r0
 800d30c:	6003      	str	r3, [r0, #0]
 800d30e:	f04f 0900 	mov.w	r9, #0
 800d312:	07eb      	lsls	r3, r5, #31
 800d314:	d50a      	bpl.n	800d32c <__pow5mult+0x84>
 800d316:	4639      	mov	r1, r7
 800d318:	4622      	mov	r2, r4
 800d31a:	4630      	mov	r0, r6
 800d31c:	f7ff ff1e 	bl	800d15c <__multiply>
 800d320:	4639      	mov	r1, r7
 800d322:	4680      	mov	r8, r0
 800d324:	4630      	mov	r0, r6
 800d326:	f7ff fe47 	bl	800cfb8 <_Bfree>
 800d32a:	4647      	mov	r7, r8
 800d32c:	106d      	asrs	r5, r5, #1
 800d32e:	d00b      	beq.n	800d348 <__pow5mult+0xa0>
 800d330:	6820      	ldr	r0, [r4, #0]
 800d332:	b938      	cbnz	r0, 800d344 <__pow5mult+0x9c>
 800d334:	4622      	mov	r2, r4
 800d336:	4621      	mov	r1, r4
 800d338:	4630      	mov	r0, r6
 800d33a:	f7ff ff0f 	bl	800d15c <__multiply>
 800d33e:	6020      	str	r0, [r4, #0]
 800d340:	f8c0 9000 	str.w	r9, [r0]
 800d344:	4604      	mov	r4, r0
 800d346:	e7e4      	b.n	800d312 <__pow5mult+0x6a>
 800d348:	4638      	mov	r0, r7
 800d34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d34e:	bf00      	nop
 800d350:	0800e790 	.word	0x0800e790
 800d354:	0800e5b5 	.word	0x0800e5b5
 800d358:	0800e63c 	.word	0x0800e63c

0800d35c <__lshift>:
 800d35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d360:	460c      	mov	r4, r1
 800d362:	6849      	ldr	r1, [r1, #4]
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d36a:	68a3      	ldr	r3, [r4, #8]
 800d36c:	4607      	mov	r7, r0
 800d36e:	4691      	mov	r9, r2
 800d370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d374:	f108 0601 	add.w	r6, r8, #1
 800d378:	42b3      	cmp	r3, r6
 800d37a:	db0b      	blt.n	800d394 <__lshift+0x38>
 800d37c:	4638      	mov	r0, r7
 800d37e:	f7ff fddb 	bl	800cf38 <_Balloc>
 800d382:	4605      	mov	r5, r0
 800d384:	b948      	cbnz	r0, 800d39a <__lshift+0x3e>
 800d386:	4602      	mov	r2, r0
 800d388:	4b28      	ldr	r3, [pc, #160]	; (800d42c <__lshift+0xd0>)
 800d38a:	4829      	ldr	r0, [pc, #164]	; (800d430 <__lshift+0xd4>)
 800d38c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d390:	f000 faba 	bl	800d908 <__assert_func>
 800d394:	3101      	adds	r1, #1
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	e7ee      	b.n	800d378 <__lshift+0x1c>
 800d39a:	2300      	movs	r3, #0
 800d39c:	f100 0114 	add.w	r1, r0, #20
 800d3a0:	f100 0210 	add.w	r2, r0, #16
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	4553      	cmp	r3, sl
 800d3a8:	db33      	blt.n	800d412 <__lshift+0xb6>
 800d3aa:	6920      	ldr	r0, [r4, #16]
 800d3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3b0:	f104 0314 	add.w	r3, r4, #20
 800d3b4:	f019 091f 	ands.w	r9, r9, #31
 800d3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3c0:	d02b      	beq.n	800d41a <__lshift+0xbe>
 800d3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d3c6:	468a      	mov	sl, r1
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	6818      	ldr	r0, [r3, #0]
 800d3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d3d0:	4302      	orrs	r2, r0
 800d3d2:	f84a 2b04 	str.w	r2, [sl], #4
 800d3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3da:	459c      	cmp	ip, r3
 800d3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3e0:	d8f3      	bhi.n	800d3ca <__lshift+0x6e>
 800d3e2:	ebac 0304 	sub.w	r3, ip, r4
 800d3e6:	3b15      	subs	r3, #21
 800d3e8:	f023 0303 	bic.w	r3, r3, #3
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	f104 0015 	add.w	r0, r4, #21
 800d3f2:	4584      	cmp	ip, r0
 800d3f4:	bf38      	it	cc
 800d3f6:	2304      	movcc	r3, #4
 800d3f8:	50ca      	str	r2, [r1, r3]
 800d3fa:	b10a      	cbz	r2, 800d400 <__lshift+0xa4>
 800d3fc:	f108 0602 	add.w	r6, r8, #2
 800d400:	3e01      	subs	r6, #1
 800d402:	4638      	mov	r0, r7
 800d404:	612e      	str	r6, [r5, #16]
 800d406:	4621      	mov	r1, r4
 800d408:	f7ff fdd6 	bl	800cfb8 <_Bfree>
 800d40c:	4628      	mov	r0, r5
 800d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d412:	f842 0f04 	str.w	r0, [r2, #4]!
 800d416:	3301      	adds	r3, #1
 800d418:	e7c5      	b.n	800d3a6 <__lshift+0x4a>
 800d41a:	3904      	subs	r1, #4
 800d41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d420:	f841 2f04 	str.w	r2, [r1, #4]!
 800d424:	459c      	cmp	ip, r3
 800d426:	d8f9      	bhi.n	800d41c <__lshift+0xc0>
 800d428:	e7ea      	b.n	800d400 <__lshift+0xa4>
 800d42a:	bf00      	nop
 800d42c:	0800e62b 	.word	0x0800e62b
 800d430:	0800e63c 	.word	0x0800e63c

0800d434 <__mcmp>:
 800d434:	b530      	push	{r4, r5, lr}
 800d436:	6902      	ldr	r2, [r0, #16]
 800d438:	690c      	ldr	r4, [r1, #16]
 800d43a:	1b12      	subs	r2, r2, r4
 800d43c:	d10e      	bne.n	800d45c <__mcmp+0x28>
 800d43e:	f100 0314 	add.w	r3, r0, #20
 800d442:	3114      	adds	r1, #20
 800d444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d44c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d454:	42a5      	cmp	r5, r4
 800d456:	d003      	beq.n	800d460 <__mcmp+0x2c>
 800d458:	d305      	bcc.n	800d466 <__mcmp+0x32>
 800d45a:	2201      	movs	r2, #1
 800d45c:	4610      	mov	r0, r2
 800d45e:	bd30      	pop	{r4, r5, pc}
 800d460:	4283      	cmp	r3, r0
 800d462:	d3f3      	bcc.n	800d44c <__mcmp+0x18>
 800d464:	e7fa      	b.n	800d45c <__mcmp+0x28>
 800d466:	f04f 32ff 	mov.w	r2, #4294967295
 800d46a:	e7f7      	b.n	800d45c <__mcmp+0x28>

0800d46c <__mdiff>:
 800d46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	460c      	mov	r4, r1
 800d472:	4606      	mov	r6, r0
 800d474:	4611      	mov	r1, r2
 800d476:	4620      	mov	r0, r4
 800d478:	4617      	mov	r7, r2
 800d47a:	f7ff ffdb 	bl	800d434 <__mcmp>
 800d47e:	1e05      	subs	r5, r0, #0
 800d480:	d110      	bne.n	800d4a4 <__mdiff+0x38>
 800d482:	4629      	mov	r1, r5
 800d484:	4630      	mov	r0, r6
 800d486:	f7ff fd57 	bl	800cf38 <_Balloc>
 800d48a:	b930      	cbnz	r0, 800d49a <__mdiff+0x2e>
 800d48c:	4b39      	ldr	r3, [pc, #228]	; (800d574 <__mdiff+0x108>)
 800d48e:	4602      	mov	r2, r0
 800d490:	f240 2132 	movw	r1, #562	; 0x232
 800d494:	4838      	ldr	r0, [pc, #224]	; (800d578 <__mdiff+0x10c>)
 800d496:	f000 fa37 	bl	800d908 <__assert_func>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	bfa4      	itt	ge
 800d4a6:	463b      	movge	r3, r7
 800d4a8:	4627      	movge	r7, r4
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	bfa6      	itte	ge
 800d4b0:	461c      	movge	r4, r3
 800d4b2:	2500      	movge	r5, #0
 800d4b4:	2501      	movlt	r5, #1
 800d4b6:	f7ff fd3f 	bl	800cf38 <_Balloc>
 800d4ba:	b920      	cbnz	r0, 800d4c6 <__mdiff+0x5a>
 800d4bc:	4b2d      	ldr	r3, [pc, #180]	; (800d574 <__mdiff+0x108>)
 800d4be:	4602      	mov	r2, r0
 800d4c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d4c4:	e7e6      	b.n	800d494 <__mdiff+0x28>
 800d4c6:	693e      	ldr	r6, [r7, #16]
 800d4c8:	60c5      	str	r5, [r0, #12]
 800d4ca:	6925      	ldr	r5, [r4, #16]
 800d4cc:	f107 0114 	add.w	r1, r7, #20
 800d4d0:	f104 0914 	add.w	r9, r4, #20
 800d4d4:	f100 0e14 	add.w	lr, r0, #20
 800d4d8:	f107 0210 	add.w	r2, r7, #16
 800d4dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d4e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d4e4:	46f2      	mov	sl, lr
 800d4e6:	2700      	movs	r7, #0
 800d4e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4f0:	fa1f f883 	uxth.w	r8, r3
 800d4f4:	fa17 f78b 	uxtah	r7, r7, fp
 800d4f8:	0c1b      	lsrs	r3, r3, #16
 800d4fa:	eba7 0808 	sub.w	r8, r7, r8
 800d4fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d506:	fa1f f888 	uxth.w	r8, r8
 800d50a:	141f      	asrs	r7, r3, #16
 800d50c:	454d      	cmp	r5, r9
 800d50e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d512:	f84a 3b04 	str.w	r3, [sl], #4
 800d516:	d8e7      	bhi.n	800d4e8 <__mdiff+0x7c>
 800d518:	1b2b      	subs	r3, r5, r4
 800d51a:	3b15      	subs	r3, #21
 800d51c:	f023 0303 	bic.w	r3, r3, #3
 800d520:	3304      	adds	r3, #4
 800d522:	3415      	adds	r4, #21
 800d524:	42a5      	cmp	r5, r4
 800d526:	bf38      	it	cc
 800d528:	2304      	movcc	r3, #4
 800d52a:	4419      	add	r1, r3
 800d52c:	4473      	add	r3, lr
 800d52e:	469e      	mov	lr, r3
 800d530:	460d      	mov	r5, r1
 800d532:	4565      	cmp	r5, ip
 800d534:	d30e      	bcc.n	800d554 <__mdiff+0xe8>
 800d536:	f10c 0203 	add.w	r2, ip, #3
 800d53a:	1a52      	subs	r2, r2, r1
 800d53c:	f022 0203 	bic.w	r2, r2, #3
 800d540:	3903      	subs	r1, #3
 800d542:	458c      	cmp	ip, r1
 800d544:	bf38      	it	cc
 800d546:	2200      	movcc	r2, #0
 800d548:	441a      	add	r2, r3
 800d54a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d54e:	b17b      	cbz	r3, 800d570 <__mdiff+0x104>
 800d550:	6106      	str	r6, [r0, #16]
 800d552:	e7a5      	b.n	800d4a0 <__mdiff+0x34>
 800d554:	f855 8b04 	ldr.w	r8, [r5], #4
 800d558:	fa17 f488 	uxtah	r4, r7, r8
 800d55c:	1422      	asrs	r2, r4, #16
 800d55e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d562:	b2a4      	uxth	r4, r4
 800d564:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d568:	f84e 4b04 	str.w	r4, [lr], #4
 800d56c:	1417      	asrs	r7, r2, #16
 800d56e:	e7e0      	b.n	800d532 <__mdiff+0xc6>
 800d570:	3e01      	subs	r6, #1
 800d572:	e7ea      	b.n	800d54a <__mdiff+0xde>
 800d574:	0800e62b 	.word	0x0800e62b
 800d578:	0800e63c 	.word	0x0800e63c

0800d57c <__d2b>:
 800d57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d580:	4689      	mov	r9, r1
 800d582:	2101      	movs	r1, #1
 800d584:	ec57 6b10 	vmov	r6, r7, d0
 800d588:	4690      	mov	r8, r2
 800d58a:	f7ff fcd5 	bl	800cf38 <_Balloc>
 800d58e:	4604      	mov	r4, r0
 800d590:	b930      	cbnz	r0, 800d5a0 <__d2b+0x24>
 800d592:	4602      	mov	r2, r0
 800d594:	4b25      	ldr	r3, [pc, #148]	; (800d62c <__d2b+0xb0>)
 800d596:	4826      	ldr	r0, [pc, #152]	; (800d630 <__d2b+0xb4>)
 800d598:	f240 310a 	movw	r1, #778	; 0x30a
 800d59c:	f000 f9b4 	bl	800d908 <__assert_func>
 800d5a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d5a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5a8:	bb35      	cbnz	r5, 800d5f8 <__d2b+0x7c>
 800d5aa:	2e00      	cmp	r6, #0
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	d028      	beq.n	800d602 <__d2b+0x86>
 800d5b0:	4668      	mov	r0, sp
 800d5b2:	9600      	str	r6, [sp, #0]
 800d5b4:	f7ff fd8c 	bl	800d0d0 <__lo0bits>
 800d5b8:	9900      	ldr	r1, [sp, #0]
 800d5ba:	b300      	cbz	r0, 800d5fe <__d2b+0x82>
 800d5bc:	9a01      	ldr	r2, [sp, #4]
 800d5be:	f1c0 0320 	rsb	r3, r0, #32
 800d5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5c6:	430b      	orrs	r3, r1
 800d5c8:	40c2      	lsrs	r2, r0
 800d5ca:	6163      	str	r3, [r4, #20]
 800d5cc:	9201      	str	r2, [sp, #4]
 800d5ce:	9b01      	ldr	r3, [sp, #4]
 800d5d0:	61a3      	str	r3, [r4, #24]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	bf14      	ite	ne
 800d5d6:	2202      	movne	r2, #2
 800d5d8:	2201      	moveq	r2, #1
 800d5da:	6122      	str	r2, [r4, #16]
 800d5dc:	b1d5      	cbz	r5, 800d614 <__d2b+0x98>
 800d5de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5e2:	4405      	add	r5, r0
 800d5e4:	f8c9 5000 	str.w	r5, [r9]
 800d5e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5ec:	f8c8 0000 	str.w	r0, [r8]
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	b003      	add	sp, #12
 800d5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5fc:	e7d5      	b.n	800d5aa <__d2b+0x2e>
 800d5fe:	6161      	str	r1, [r4, #20]
 800d600:	e7e5      	b.n	800d5ce <__d2b+0x52>
 800d602:	a801      	add	r0, sp, #4
 800d604:	f7ff fd64 	bl	800d0d0 <__lo0bits>
 800d608:	9b01      	ldr	r3, [sp, #4]
 800d60a:	6163      	str	r3, [r4, #20]
 800d60c:	2201      	movs	r2, #1
 800d60e:	6122      	str	r2, [r4, #16]
 800d610:	3020      	adds	r0, #32
 800d612:	e7e3      	b.n	800d5dc <__d2b+0x60>
 800d614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d61c:	f8c9 0000 	str.w	r0, [r9]
 800d620:	6918      	ldr	r0, [r3, #16]
 800d622:	f7ff fd35 	bl	800d090 <__hi0bits>
 800d626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d62a:	e7df      	b.n	800d5ec <__d2b+0x70>
 800d62c:	0800e62b 	.word	0x0800e62b
 800d630:	0800e63c 	.word	0x0800e63c

0800d634 <_calloc_r>:
 800d634:	b513      	push	{r0, r1, r4, lr}
 800d636:	434a      	muls	r2, r1
 800d638:	4611      	mov	r1, r2
 800d63a:	9201      	str	r2, [sp, #4]
 800d63c:	f7fe f900 	bl	800b840 <_malloc_r>
 800d640:	4604      	mov	r4, r0
 800d642:	b118      	cbz	r0, 800d64c <_calloc_r+0x18>
 800d644:	9a01      	ldr	r2, [sp, #4]
 800d646:	2100      	movs	r1, #0
 800d648:	f7fe f8a2 	bl	800b790 <memset>
 800d64c:	4620      	mov	r0, r4
 800d64e:	b002      	add	sp, #8
 800d650:	bd10      	pop	{r4, pc}

0800d652 <__ssputs_r>:
 800d652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d656:	688e      	ldr	r6, [r1, #8]
 800d658:	429e      	cmp	r6, r3
 800d65a:	4682      	mov	sl, r0
 800d65c:	460c      	mov	r4, r1
 800d65e:	4690      	mov	r8, r2
 800d660:	461f      	mov	r7, r3
 800d662:	d838      	bhi.n	800d6d6 <__ssputs_r+0x84>
 800d664:	898a      	ldrh	r2, [r1, #12]
 800d666:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d66a:	d032      	beq.n	800d6d2 <__ssputs_r+0x80>
 800d66c:	6825      	ldr	r5, [r4, #0]
 800d66e:	6909      	ldr	r1, [r1, #16]
 800d670:	eba5 0901 	sub.w	r9, r5, r1
 800d674:	6965      	ldr	r5, [r4, #20]
 800d676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d67a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d67e:	3301      	adds	r3, #1
 800d680:	444b      	add	r3, r9
 800d682:	106d      	asrs	r5, r5, #1
 800d684:	429d      	cmp	r5, r3
 800d686:	bf38      	it	cc
 800d688:	461d      	movcc	r5, r3
 800d68a:	0553      	lsls	r3, r2, #21
 800d68c:	d531      	bpl.n	800d6f2 <__ssputs_r+0xa0>
 800d68e:	4629      	mov	r1, r5
 800d690:	f7fe f8d6 	bl	800b840 <_malloc_r>
 800d694:	4606      	mov	r6, r0
 800d696:	b950      	cbnz	r0, 800d6ae <__ssputs_r+0x5c>
 800d698:	230c      	movs	r3, #12
 800d69a:	f8ca 3000 	str.w	r3, [sl]
 800d69e:	89a3      	ldrh	r3, [r4, #12]
 800d6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6a4:	81a3      	strh	r3, [r4, #12]
 800d6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ae:	6921      	ldr	r1, [r4, #16]
 800d6b0:	464a      	mov	r2, r9
 800d6b2:	f7fe f85f 	bl	800b774 <memcpy>
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c0:	81a3      	strh	r3, [r4, #12]
 800d6c2:	6126      	str	r6, [r4, #16]
 800d6c4:	6165      	str	r5, [r4, #20]
 800d6c6:	444e      	add	r6, r9
 800d6c8:	eba5 0509 	sub.w	r5, r5, r9
 800d6cc:	6026      	str	r6, [r4, #0]
 800d6ce:	60a5      	str	r5, [r4, #8]
 800d6d0:	463e      	mov	r6, r7
 800d6d2:	42be      	cmp	r6, r7
 800d6d4:	d900      	bls.n	800d6d8 <__ssputs_r+0x86>
 800d6d6:	463e      	mov	r6, r7
 800d6d8:	4632      	mov	r2, r6
 800d6da:	6820      	ldr	r0, [r4, #0]
 800d6dc:	4641      	mov	r1, r8
 800d6de:	f000 f958 	bl	800d992 <memmove>
 800d6e2:	68a3      	ldr	r3, [r4, #8]
 800d6e4:	6822      	ldr	r2, [r4, #0]
 800d6e6:	1b9b      	subs	r3, r3, r6
 800d6e8:	4432      	add	r2, r6
 800d6ea:	60a3      	str	r3, [r4, #8]
 800d6ec:	6022      	str	r2, [r4, #0]
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	e7db      	b.n	800d6aa <__ssputs_r+0x58>
 800d6f2:	462a      	mov	r2, r5
 800d6f4:	f000 f967 	bl	800d9c6 <_realloc_r>
 800d6f8:	4606      	mov	r6, r0
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d1e1      	bne.n	800d6c2 <__ssputs_r+0x70>
 800d6fe:	6921      	ldr	r1, [r4, #16]
 800d700:	4650      	mov	r0, sl
 800d702:	f7fe f84d 	bl	800b7a0 <_free_r>
 800d706:	e7c7      	b.n	800d698 <__ssputs_r+0x46>

0800d708 <_svfiprintf_r>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	4698      	mov	r8, r3
 800d70e:	898b      	ldrh	r3, [r1, #12]
 800d710:	061b      	lsls	r3, r3, #24
 800d712:	b09d      	sub	sp, #116	; 0x74
 800d714:	4607      	mov	r7, r0
 800d716:	460d      	mov	r5, r1
 800d718:	4614      	mov	r4, r2
 800d71a:	d50e      	bpl.n	800d73a <_svfiprintf_r+0x32>
 800d71c:	690b      	ldr	r3, [r1, #16]
 800d71e:	b963      	cbnz	r3, 800d73a <_svfiprintf_r+0x32>
 800d720:	2140      	movs	r1, #64	; 0x40
 800d722:	f7fe f88d 	bl	800b840 <_malloc_r>
 800d726:	6028      	str	r0, [r5, #0]
 800d728:	6128      	str	r0, [r5, #16]
 800d72a:	b920      	cbnz	r0, 800d736 <_svfiprintf_r+0x2e>
 800d72c:	230c      	movs	r3, #12
 800d72e:	603b      	str	r3, [r7, #0]
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	e0d1      	b.n	800d8da <_svfiprintf_r+0x1d2>
 800d736:	2340      	movs	r3, #64	; 0x40
 800d738:	616b      	str	r3, [r5, #20]
 800d73a:	2300      	movs	r3, #0
 800d73c:	9309      	str	r3, [sp, #36]	; 0x24
 800d73e:	2320      	movs	r3, #32
 800d740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d744:	f8cd 800c 	str.w	r8, [sp, #12]
 800d748:	2330      	movs	r3, #48	; 0x30
 800d74a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8f4 <_svfiprintf_r+0x1ec>
 800d74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d752:	f04f 0901 	mov.w	r9, #1
 800d756:	4623      	mov	r3, r4
 800d758:	469a      	mov	sl, r3
 800d75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d75e:	b10a      	cbz	r2, 800d764 <_svfiprintf_r+0x5c>
 800d760:	2a25      	cmp	r2, #37	; 0x25
 800d762:	d1f9      	bne.n	800d758 <_svfiprintf_r+0x50>
 800d764:	ebba 0b04 	subs.w	fp, sl, r4
 800d768:	d00b      	beq.n	800d782 <_svfiprintf_r+0x7a>
 800d76a:	465b      	mov	r3, fp
 800d76c:	4622      	mov	r2, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	4638      	mov	r0, r7
 800d772:	f7ff ff6e 	bl	800d652 <__ssputs_r>
 800d776:	3001      	adds	r0, #1
 800d778:	f000 80aa 	beq.w	800d8d0 <_svfiprintf_r+0x1c8>
 800d77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d77e:	445a      	add	r2, fp
 800d780:	9209      	str	r2, [sp, #36]	; 0x24
 800d782:	f89a 3000 	ldrb.w	r3, [sl]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f000 80a2 	beq.w	800d8d0 <_svfiprintf_r+0x1c8>
 800d78c:	2300      	movs	r3, #0
 800d78e:	f04f 32ff 	mov.w	r2, #4294967295
 800d792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d796:	f10a 0a01 	add.w	sl, sl, #1
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	9307      	str	r3, [sp, #28]
 800d79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d7a4:	4654      	mov	r4, sl
 800d7a6:	2205      	movs	r2, #5
 800d7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ac:	4851      	ldr	r0, [pc, #324]	; (800d8f4 <_svfiprintf_r+0x1ec>)
 800d7ae:	f7f2 fd17 	bl	80001e0 <memchr>
 800d7b2:	9a04      	ldr	r2, [sp, #16]
 800d7b4:	b9d8      	cbnz	r0, 800d7ee <_svfiprintf_r+0xe6>
 800d7b6:	06d0      	lsls	r0, r2, #27
 800d7b8:	bf44      	itt	mi
 800d7ba:	2320      	movmi	r3, #32
 800d7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7c0:	0711      	lsls	r1, r2, #28
 800d7c2:	bf44      	itt	mi
 800d7c4:	232b      	movmi	r3, #43	; 0x2b
 800d7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d0:	d015      	beq.n	800d7fe <_svfiprintf_r+0xf6>
 800d7d2:	9a07      	ldr	r2, [sp, #28]
 800d7d4:	4654      	mov	r4, sl
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	f04f 0c0a 	mov.w	ip, #10
 800d7dc:	4621      	mov	r1, r4
 800d7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7e2:	3b30      	subs	r3, #48	; 0x30
 800d7e4:	2b09      	cmp	r3, #9
 800d7e6:	d94e      	bls.n	800d886 <_svfiprintf_r+0x17e>
 800d7e8:	b1b0      	cbz	r0, 800d818 <_svfiprintf_r+0x110>
 800d7ea:	9207      	str	r2, [sp, #28]
 800d7ec:	e014      	b.n	800d818 <_svfiprintf_r+0x110>
 800d7ee:	eba0 0308 	sub.w	r3, r0, r8
 800d7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	9304      	str	r3, [sp, #16]
 800d7fa:	46a2      	mov	sl, r4
 800d7fc:	e7d2      	b.n	800d7a4 <_svfiprintf_r+0x9c>
 800d7fe:	9b03      	ldr	r3, [sp, #12]
 800d800:	1d19      	adds	r1, r3, #4
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	9103      	str	r1, [sp, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	bfbb      	ittet	lt
 800d80a:	425b      	neglt	r3, r3
 800d80c:	f042 0202 	orrlt.w	r2, r2, #2
 800d810:	9307      	strge	r3, [sp, #28]
 800d812:	9307      	strlt	r3, [sp, #28]
 800d814:	bfb8      	it	lt
 800d816:	9204      	strlt	r2, [sp, #16]
 800d818:	7823      	ldrb	r3, [r4, #0]
 800d81a:	2b2e      	cmp	r3, #46	; 0x2e
 800d81c:	d10c      	bne.n	800d838 <_svfiprintf_r+0x130>
 800d81e:	7863      	ldrb	r3, [r4, #1]
 800d820:	2b2a      	cmp	r3, #42	; 0x2a
 800d822:	d135      	bne.n	800d890 <_svfiprintf_r+0x188>
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	1d1a      	adds	r2, r3, #4
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	9203      	str	r2, [sp, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	bfb8      	it	lt
 800d830:	f04f 33ff 	movlt.w	r3, #4294967295
 800d834:	3402      	adds	r4, #2
 800d836:	9305      	str	r3, [sp, #20]
 800d838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d904 <_svfiprintf_r+0x1fc>
 800d83c:	7821      	ldrb	r1, [r4, #0]
 800d83e:	2203      	movs	r2, #3
 800d840:	4650      	mov	r0, sl
 800d842:	f7f2 fccd 	bl	80001e0 <memchr>
 800d846:	b140      	cbz	r0, 800d85a <_svfiprintf_r+0x152>
 800d848:	2340      	movs	r3, #64	; 0x40
 800d84a:	eba0 000a 	sub.w	r0, r0, sl
 800d84e:	fa03 f000 	lsl.w	r0, r3, r0
 800d852:	9b04      	ldr	r3, [sp, #16]
 800d854:	4303      	orrs	r3, r0
 800d856:	3401      	adds	r4, #1
 800d858:	9304      	str	r3, [sp, #16]
 800d85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d85e:	4826      	ldr	r0, [pc, #152]	; (800d8f8 <_svfiprintf_r+0x1f0>)
 800d860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d864:	2206      	movs	r2, #6
 800d866:	f7f2 fcbb 	bl	80001e0 <memchr>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d038      	beq.n	800d8e0 <_svfiprintf_r+0x1d8>
 800d86e:	4b23      	ldr	r3, [pc, #140]	; (800d8fc <_svfiprintf_r+0x1f4>)
 800d870:	bb1b      	cbnz	r3, 800d8ba <_svfiprintf_r+0x1b2>
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	3307      	adds	r3, #7
 800d876:	f023 0307 	bic.w	r3, r3, #7
 800d87a:	3308      	adds	r3, #8
 800d87c:	9303      	str	r3, [sp, #12]
 800d87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d880:	4433      	add	r3, r6
 800d882:	9309      	str	r3, [sp, #36]	; 0x24
 800d884:	e767      	b.n	800d756 <_svfiprintf_r+0x4e>
 800d886:	fb0c 3202 	mla	r2, ip, r2, r3
 800d88a:	460c      	mov	r4, r1
 800d88c:	2001      	movs	r0, #1
 800d88e:	e7a5      	b.n	800d7dc <_svfiprintf_r+0xd4>
 800d890:	2300      	movs	r3, #0
 800d892:	3401      	adds	r4, #1
 800d894:	9305      	str	r3, [sp, #20]
 800d896:	4619      	mov	r1, r3
 800d898:	f04f 0c0a 	mov.w	ip, #10
 800d89c:	4620      	mov	r0, r4
 800d89e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8a2:	3a30      	subs	r2, #48	; 0x30
 800d8a4:	2a09      	cmp	r2, #9
 800d8a6:	d903      	bls.n	800d8b0 <_svfiprintf_r+0x1a8>
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d0c5      	beq.n	800d838 <_svfiprintf_r+0x130>
 800d8ac:	9105      	str	r1, [sp, #20]
 800d8ae:	e7c3      	b.n	800d838 <_svfiprintf_r+0x130>
 800d8b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e7f0      	b.n	800d89c <_svfiprintf_r+0x194>
 800d8ba:	ab03      	add	r3, sp, #12
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	462a      	mov	r2, r5
 800d8c0:	4b0f      	ldr	r3, [pc, #60]	; (800d900 <_svfiprintf_r+0x1f8>)
 800d8c2:	a904      	add	r1, sp, #16
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	f7fe f8b5 	bl	800ba34 <_printf_float>
 800d8ca:	1c42      	adds	r2, r0, #1
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	d1d6      	bne.n	800d87e <_svfiprintf_r+0x176>
 800d8d0:	89ab      	ldrh	r3, [r5, #12]
 800d8d2:	065b      	lsls	r3, r3, #25
 800d8d4:	f53f af2c 	bmi.w	800d730 <_svfiprintf_r+0x28>
 800d8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8da:	b01d      	add	sp, #116	; 0x74
 800d8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e0:	ab03      	add	r3, sp, #12
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	462a      	mov	r2, r5
 800d8e6:	4b06      	ldr	r3, [pc, #24]	; (800d900 <_svfiprintf_r+0x1f8>)
 800d8e8:	a904      	add	r1, sp, #16
 800d8ea:	4638      	mov	r0, r7
 800d8ec:	f7fe fb46 	bl	800bf7c <_printf_i>
 800d8f0:	e7eb      	b.n	800d8ca <_svfiprintf_r+0x1c2>
 800d8f2:	bf00      	nop
 800d8f4:	0800e79c 	.word	0x0800e79c
 800d8f8:	0800e7a6 	.word	0x0800e7a6
 800d8fc:	0800ba35 	.word	0x0800ba35
 800d900:	0800d653 	.word	0x0800d653
 800d904:	0800e7a2 	.word	0x0800e7a2

0800d908 <__assert_func>:
 800d908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d90a:	4614      	mov	r4, r2
 800d90c:	461a      	mov	r2, r3
 800d90e:	4b09      	ldr	r3, [pc, #36]	; (800d934 <__assert_func+0x2c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4605      	mov	r5, r0
 800d914:	68d8      	ldr	r0, [r3, #12]
 800d916:	b14c      	cbz	r4, 800d92c <__assert_func+0x24>
 800d918:	4b07      	ldr	r3, [pc, #28]	; (800d938 <__assert_func+0x30>)
 800d91a:	9100      	str	r1, [sp, #0]
 800d91c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d920:	4906      	ldr	r1, [pc, #24]	; (800d93c <__assert_func+0x34>)
 800d922:	462b      	mov	r3, r5
 800d924:	f000 f80e 	bl	800d944 <fiprintf>
 800d928:	f000 fa9a 	bl	800de60 <abort>
 800d92c:	4b04      	ldr	r3, [pc, #16]	; (800d940 <__assert_func+0x38>)
 800d92e:	461c      	mov	r4, r3
 800d930:	e7f3      	b.n	800d91a <__assert_func+0x12>
 800d932:	bf00      	nop
 800d934:	2000003c 	.word	0x2000003c
 800d938:	0800e7ad 	.word	0x0800e7ad
 800d93c:	0800e7ba 	.word	0x0800e7ba
 800d940:	0800e7e8 	.word	0x0800e7e8

0800d944 <fiprintf>:
 800d944:	b40e      	push	{r1, r2, r3}
 800d946:	b503      	push	{r0, r1, lr}
 800d948:	4601      	mov	r1, r0
 800d94a:	ab03      	add	r3, sp, #12
 800d94c:	4805      	ldr	r0, [pc, #20]	; (800d964 <fiprintf+0x20>)
 800d94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d952:	6800      	ldr	r0, [r0, #0]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	f000 f885 	bl	800da64 <_vfiprintf_r>
 800d95a:	b002      	add	sp, #8
 800d95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d960:	b003      	add	sp, #12
 800d962:	4770      	bx	lr
 800d964:	2000003c 	.word	0x2000003c

0800d968 <__retarget_lock_init_recursive>:
 800d968:	4770      	bx	lr

0800d96a <__retarget_lock_acquire_recursive>:
 800d96a:	4770      	bx	lr

0800d96c <__retarget_lock_release_recursive>:
 800d96c:	4770      	bx	lr

0800d96e <__ascii_mbtowc>:
 800d96e:	b082      	sub	sp, #8
 800d970:	b901      	cbnz	r1, 800d974 <__ascii_mbtowc+0x6>
 800d972:	a901      	add	r1, sp, #4
 800d974:	b142      	cbz	r2, 800d988 <__ascii_mbtowc+0x1a>
 800d976:	b14b      	cbz	r3, 800d98c <__ascii_mbtowc+0x1e>
 800d978:	7813      	ldrb	r3, [r2, #0]
 800d97a:	600b      	str	r3, [r1, #0]
 800d97c:	7812      	ldrb	r2, [r2, #0]
 800d97e:	1e10      	subs	r0, r2, #0
 800d980:	bf18      	it	ne
 800d982:	2001      	movne	r0, #1
 800d984:	b002      	add	sp, #8
 800d986:	4770      	bx	lr
 800d988:	4610      	mov	r0, r2
 800d98a:	e7fb      	b.n	800d984 <__ascii_mbtowc+0x16>
 800d98c:	f06f 0001 	mvn.w	r0, #1
 800d990:	e7f8      	b.n	800d984 <__ascii_mbtowc+0x16>

0800d992 <memmove>:
 800d992:	4288      	cmp	r0, r1
 800d994:	b510      	push	{r4, lr}
 800d996:	eb01 0402 	add.w	r4, r1, r2
 800d99a:	d902      	bls.n	800d9a2 <memmove+0x10>
 800d99c:	4284      	cmp	r4, r0
 800d99e:	4623      	mov	r3, r4
 800d9a0:	d807      	bhi.n	800d9b2 <memmove+0x20>
 800d9a2:	1e43      	subs	r3, r0, #1
 800d9a4:	42a1      	cmp	r1, r4
 800d9a6:	d008      	beq.n	800d9ba <memmove+0x28>
 800d9a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9b0:	e7f8      	b.n	800d9a4 <memmove+0x12>
 800d9b2:	4402      	add	r2, r0
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	428a      	cmp	r2, r1
 800d9b8:	d100      	bne.n	800d9bc <memmove+0x2a>
 800d9ba:	bd10      	pop	{r4, pc}
 800d9bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9c4:	e7f7      	b.n	800d9b6 <memmove+0x24>

0800d9c6 <_realloc_r>:
 800d9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c8:	4607      	mov	r7, r0
 800d9ca:	4614      	mov	r4, r2
 800d9cc:	460e      	mov	r6, r1
 800d9ce:	b921      	cbnz	r1, 800d9da <_realloc_r+0x14>
 800d9d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	f7fd bf33 	b.w	800b840 <_malloc_r>
 800d9da:	b922      	cbnz	r2, 800d9e6 <_realloc_r+0x20>
 800d9dc:	f7fd fee0 	bl	800b7a0 <_free_r>
 800d9e0:	4625      	mov	r5, r4
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9e6:	f000 fc5f 	bl	800e2a8 <_malloc_usable_size_r>
 800d9ea:	42a0      	cmp	r0, r4
 800d9ec:	d20f      	bcs.n	800da0e <_realloc_r+0x48>
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	4638      	mov	r0, r7
 800d9f2:	f7fd ff25 	bl	800b840 <_malloc_r>
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d0f2      	beq.n	800d9e2 <_realloc_r+0x1c>
 800d9fc:	4631      	mov	r1, r6
 800d9fe:	4622      	mov	r2, r4
 800da00:	f7fd feb8 	bl	800b774 <memcpy>
 800da04:	4631      	mov	r1, r6
 800da06:	4638      	mov	r0, r7
 800da08:	f7fd feca 	bl	800b7a0 <_free_r>
 800da0c:	e7e9      	b.n	800d9e2 <_realloc_r+0x1c>
 800da0e:	4635      	mov	r5, r6
 800da10:	e7e7      	b.n	800d9e2 <_realloc_r+0x1c>

0800da12 <__sfputc_r>:
 800da12:	6893      	ldr	r3, [r2, #8]
 800da14:	3b01      	subs	r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	b410      	push	{r4}
 800da1a:	6093      	str	r3, [r2, #8]
 800da1c:	da08      	bge.n	800da30 <__sfputc_r+0x1e>
 800da1e:	6994      	ldr	r4, [r2, #24]
 800da20:	42a3      	cmp	r3, r4
 800da22:	db01      	blt.n	800da28 <__sfputc_r+0x16>
 800da24:	290a      	cmp	r1, #10
 800da26:	d103      	bne.n	800da30 <__sfputc_r+0x1e>
 800da28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da2c:	f000 b94a 	b.w	800dcc4 <__swbuf_r>
 800da30:	6813      	ldr	r3, [r2, #0]
 800da32:	1c58      	adds	r0, r3, #1
 800da34:	6010      	str	r0, [r2, #0]
 800da36:	7019      	strb	r1, [r3, #0]
 800da38:	4608      	mov	r0, r1
 800da3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <__sfputs_r>:
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da42:	4606      	mov	r6, r0
 800da44:	460f      	mov	r7, r1
 800da46:	4614      	mov	r4, r2
 800da48:	18d5      	adds	r5, r2, r3
 800da4a:	42ac      	cmp	r4, r5
 800da4c:	d101      	bne.n	800da52 <__sfputs_r+0x12>
 800da4e:	2000      	movs	r0, #0
 800da50:	e007      	b.n	800da62 <__sfputs_r+0x22>
 800da52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da56:	463a      	mov	r2, r7
 800da58:	4630      	mov	r0, r6
 800da5a:	f7ff ffda 	bl	800da12 <__sfputc_r>
 800da5e:	1c43      	adds	r3, r0, #1
 800da60:	d1f3      	bne.n	800da4a <__sfputs_r+0xa>
 800da62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da64 <_vfiprintf_r>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	460d      	mov	r5, r1
 800da6a:	b09d      	sub	sp, #116	; 0x74
 800da6c:	4614      	mov	r4, r2
 800da6e:	4698      	mov	r8, r3
 800da70:	4606      	mov	r6, r0
 800da72:	b118      	cbz	r0, 800da7c <_vfiprintf_r+0x18>
 800da74:	6983      	ldr	r3, [r0, #24]
 800da76:	b90b      	cbnz	r3, 800da7c <_vfiprintf_r+0x18>
 800da78:	f000 fb14 	bl	800e0a4 <__sinit>
 800da7c:	4b89      	ldr	r3, [pc, #548]	; (800dca4 <_vfiprintf_r+0x240>)
 800da7e:	429d      	cmp	r5, r3
 800da80:	d11b      	bne.n	800daba <_vfiprintf_r+0x56>
 800da82:	6875      	ldr	r5, [r6, #4]
 800da84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da86:	07d9      	lsls	r1, r3, #31
 800da88:	d405      	bmi.n	800da96 <_vfiprintf_r+0x32>
 800da8a:	89ab      	ldrh	r3, [r5, #12]
 800da8c:	059a      	lsls	r2, r3, #22
 800da8e:	d402      	bmi.n	800da96 <_vfiprintf_r+0x32>
 800da90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da92:	f7ff ff6a 	bl	800d96a <__retarget_lock_acquire_recursive>
 800da96:	89ab      	ldrh	r3, [r5, #12]
 800da98:	071b      	lsls	r3, r3, #28
 800da9a:	d501      	bpl.n	800daa0 <_vfiprintf_r+0x3c>
 800da9c:	692b      	ldr	r3, [r5, #16]
 800da9e:	b9eb      	cbnz	r3, 800dadc <_vfiprintf_r+0x78>
 800daa0:	4629      	mov	r1, r5
 800daa2:	4630      	mov	r0, r6
 800daa4:	f000 f96e 	bl	800dd84 <__swsetup_r>
 800daa8:	b1c0      	cbz	r0, 800dadc <_vfiprintf_r+0x78>
 800daaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800daac:	07dc      	lsls	r4, r3, #31
 800daae:	d50e      	bpl.n	800dace <_vfiprintf_r+0x6a>
 800dab0:	f04f 30ff 	mov.w	r0, #4294967295
 800dab4:	b01d      	add	sp, #116	; 0x74
 800dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daba:	4b7b      	ldr	r3, [pc, #492]	; (800dca8 <_vfiprintf_r+0x244>)
 800dabc:	429d      	cmp	r5, r3
 800dabe:	d101      	bne.n	800dac4 <_vfiprintf_r+0x60>
 800dac0:	68b5      	ldr	r5, [r6, #8]
 800dac2:	e7df      	b.n	800da84 <_vfiprintf_r+0x20>
 800dac4:	4b79      	ldr	r3, [pc, #484]	; (800dcac <_vfiprintf_r+0x248>)
 800dac6:	429d      	cmp	r5, r3
 800dac8:	bf08      	it	eq
 800daca:	68f5      	ldreq	r5, [r6, #12]
 800dacc:	e7da      	b.n	800da84 <_vfiprintf_r+0x20>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	0598      	lsls	r0, r3, #22
 800dad2:	d4ed      	bmi.n	800dab0 <_vfiprintf_r+0x4c>
 800dad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dad6:	f7ff ff49 	bl	800d96c <__retarget_lock_release_recursive>
 800dada:	e7e9      	b.n	800dab0 <_vfiprintf_r+0x4c>
 800dadc:	2300      	movs	r3, #0
 800dade:	9309      	str	r3, [sp, #36]	; 0x24
 800dae0:	2320      	movs	r3, #32
 800dae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daea:	2330      	movs	r3, #48	; 0x30
 800daec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcb0 <_vfiprintf_r+0x24c>
 800daf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daf4:	f04f 0901 	mov.w	r9, #1
 800daf8:	4623      	mov	r3, r4
 800dafa:	469a      	mov	sl, r3
 800dafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db00:	b10a      	cbz	r2, 800db06 <_vfiprintf_r+0xa2>
 800db02:	2a25      	cmp	r2, #37	; 0x25
 800db04:	d1f9      	bne.n	800dafa <_vfiprintf_r+0x96>
 800db06:	ebba 0b04 	subs.w	fp, sl, r4
 800db0a:	d00b      	beq.n	800db24 <_vfiprintf_r+0xc0>
 800db0c:	465b      	mov	r3, fp
 800db0e:	4622      	mov	r2, r4
 800db10:	4629      	mov	r1, r5
 800db12:	4630      	mov	r0, r6
 800db14:	f7ff ff94 	bl	800da40 <__sfputs_r>
 800db18:	3001      	adds	r0, #1
 800db1a:	f000 80aa 	beq.w	800dc72 <_vfiprintf_r+0x20e>
 800db1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db20:	445a      	add	r2, fp
 800db22:	9209      	str	r2, [sp, #36]	; 0x24
 800db24:	f89a 3000 	ldrb.w	r3, [sl]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 80a2 	beq.w	800dc72 <_vfiprintf_r+0x20e>
 800db2e:	2300      	movs	r3, #0
 800db30:	f04f 32ff 	mov.w	r2, #4294967295
 800db34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db38:	f10a 0a01 	add.w	sl, sl, #1
 800db3c:	9304      	str	r3, [sp, #16]
 800db3e:	9307      	str	r3, [sp, #28]
 800db40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db44:	931a      	str	r3, [sp, #104]	; 0x68
 800db46:	4654      	mov	r4, sl
 800db48:	2205      	movs	r2, #5
 800db4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4e:	4858      	ldr	r0, [pc, #352]	; (800dcb0 <_vfiprintf_r+0x24c>)
 800db50:	f7f2 fb46 	bl	80001e0 <memchr>
 800db54:	9a04      	ldr	r2, [sp, #16]
 800db56:	b9d8      	cbnz	r0, 800db90 <_vfiprintf_r+0x12c>
 800db58:	06d1      	lsls	r1, r2, #27
 800db5a:	bf44      	itt	mi
 800db5c:	2320      	movmi	r3, #32
 800db5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db62:	0713      	lsls	r3, r2, #28
 800db64:	bf44      	itt	mi
 800db66:	232b      	movmi	r3, #43	; 0x2b
 800db68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db6c:	f89a 3000 	ldrb.w	r3, [sl]
 800db70:	2b2a      	cmp	r3, #42	; 0x2a
 800db72:	d015      	beq.n	800dba0 <_vfiprintf_r+0x13c>
 800db74:	9a07      	ldr	r2, [sp, #28]
 800db76:	4654      	mov	r4, sl
 800db78:	2000      	movs	r0, #0
 800db7a:	f04f 0c0a 	mov.w	ip, #10
 800db7e:	4621      	mov	r1, r4
 800db80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db84:	3b30      	subs	r3, #48	; 0x30
 800db86:	2b09      	cmp	r3, #9
 800db88:	d94e      	bls.n	800dc28 <_vfiprintf_r+0x1c4>
 800db8a:	b1b0      	cbz	r0, 800dbba <_vfiprintf_r+0x156>
 800db8c:	9207      	str	r2, [sp, #28]
 800db8e:	e014      	b.n	800dbba <_vfiprintf_r+0x156>
 800db90:	eba0 0308 	sub.w	r3, r0, r8
 800db94:	fa09 f303 	lsl.w	r3, r9, r3
 800db98:	4313      	orrs	r3, r2
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	46a2      	mov	sl, r4
 800db9e:	e7d2      	b.n	800db46 <_vfiprintf_r+0xe2>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	1d19      	adds	r1, r3, #4
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	9103      	str	r1, [sp, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	bfbb      	ittet	lt
 800dbac:	425b      	neglt	r3, r3
 800dbae:	f042 0202 	orrlt.w	r2, r2, #2
 800dbb2:	9307      	strge	r3, [sp, #28]
 800dbb4:	9307      	strlt	r3, [sp, #28]
 800dbb6:	bfb8      	it	lt
 800dbb8:	9204      	strlt	r2, [sp, #16]
 800dbba:	7823      	ldrb	r3, [r4, #0]
 800dbbc:	2b2e      	cmp	r3, #46	; 0x2e
 800dbbe:	d10c      	bne.n	800dbda <_vfiprintf_r+0x176>
 800dbc0:	7863      	ldrb	r3, [r4, #1]
 800dbc2:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc4:	d135      	bne.n	800dc32 <_vfiprintf_r+0x1ce>
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	1d1a      	adds	r2, r3, #4
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	9203      	str	r2, [sp, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	bfb8      	it	lt
 800dbd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbd6:	3402      	adds	r4, #2
 800dbd8:	9305      	str	r3, [sp, #20]
 800dbda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dcc0 <_vfiprintf_r+0x25c>
 800dbde:	7821      	ldrb	r1, [r4, #0]
 800dbe0:	2203      	movs	r2, #3
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	f7f2 fafc 	bl	80001e0 <memchr>
 800dbe8:	b140      	cbz	r0, 800dbfc <_vfiprintf_r+0x198>
 800dbea:	2340      	movs	r3, #64	; 0x40
 800dbec:	eba0 000a 	sub.w	r0, r0, sl
 800dbf0:	fa03 f000 	lsl.w	r0, r3, r0
 800dbf4:	9b04      	ldr	r3, [sp, #16]
 800dbf6:	4303      	orrs	r3, r0
 800dbf8:	3401      	adds	r4, #1
 800dbfa:	9304      	str	r3, [sp, #16]
 800dbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc00:	482c      	ldr	r0, [pc, #176]	; (800dcb4 <_vfiprintf_r+0x250>)
 800dc02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc06:	2206      	movs	r2, #6
 800dc08:	f7f2 faea 	bl	80001e0 <memchr>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d03f      	beq.n	800dc90 <_vfiprintf_r+0x22c>
 800dc10:	4b29      	ldr	r3, [pc, #164]	; (800dcb8 <_vfiprintf_r+0x254>)
 800dc12:	bb1b      	cbnz	r3, 800dc5c <_vfiprintf_r+0x1f8>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	3307      	adds	r3, #7
 800dc18:	f023 0307 	bic.w	r3, r3, #7
 800dc1c:	3308      	adds	r3, #8
 800dc1e:	9303      	str	r3, [sp, #12]
 800dc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc22:	443b      	add	r3, r7
 800dc24:	9309      	str	r3, [sp, #36]	; 0x24
 800dc26:	e767      	b.n	800daf8 <_vfiprintf_r+0x94>
 800dc28:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	2001      	movs	r0, #1
 800dc30:	e7a5      	b.n	800db7e <_vfiprintf_r+0x11a>
 800dc32:	2300      	movs	r3, #0
 800dc34:	3401      	adds	r4, #1
 800dc36:	9305      	str	r3, [sp, #20]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f04f 0c0a 	mov.w	ip, #10
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc44:	3a30      	subs	r2, #48	; 0x30
 800dc46:	2a09      	cmp	r2, #9
 800dc48:	d903      	bls.n	800dc52 <_vfiprintf_r+0x1ee>
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d0c5      	beq.n	800dbda <_vfiprintf_r+0x176>
 800dc4e:	9105      	str	r1, [sp, #20]
 800dc50:	e7c3      	b.n	800dbda <_vfiprintf_r+0x176>
 800dc52:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc56:	4604      	mov	r4, r0
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e7f0      	b.n	800dc3e <_vfiprintf_r+0x1da>
 800dc5c:	ab03      	add	r3, sp, #12
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	462a      	mov	r2, r5
 800dc62:	4b16      	ldr	r3, [pc, #88]	; (800dcbc <_vfiprintf_r+0x258>)
 800dc64:	a904      	add	r1, sp, #16
 800dc66:	4630      	mov	r0, r6
 800dc68:	f7fd fee4 	bl	800ba34 <_printf_float>
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	1c78      	adds	r0, r7, #1
 800dc70:	d1d6      	bne.n	800dc20 <_vfiprintf_r+0x1bc>
 800dc72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc74:	07d9      	lsls	r1, r3, #31
 800dc76:	d405      	bmi.n	800dc84 <_vfiprintf_r+0x220>
 800dc78:	89ab      	ldrh	r3, [r5, #12]
 800dc7a:	059a      	lsls	r2, r3, #22
 800dc7c:	d402      	bmi.n	800dc84 <_vfiprintf_r+0x220>
 800dc7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc80:	f7ff fe74 	bl	800d96c <__retarget_lock_release_recursive>
 800dc84:	89ab      	ldrh	r3, [r5, #12]
 800dc86:	065b      	lsls	r3, r3, #25
 800dc88:	f53f af12 	bmi.w	800dab0 <_vfiprintf_r+0x4c>
 800dc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8e:	e711      	b.n	800dab4 <_vfiprintf_r+0x50>
 800dc90:	ab03      	add	r3, sp, #12
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	462a      	mov	r2, r5
 800dc96:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <_vfiprintf_r+0x258>)
 800dc98:	a904      	add	r1, sp, #16
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f7fe f96e 	bl	800bf7c <_printf_i>
 800dca0:	e7e4      	b.n	800dc6c <_vfiprintf_r+0x208>
 800dca2:	bf00      	nop
 800dca4:	0800e914 	.word	0x0800e914
 800dca8:	0800e934 	.word	0x0800e934
 800dcac:	0800e8f4 	.word	0x0800e8f4
 800dcb0:	0800e79c 	.word	0x0800e79c
 800dcb4:	0800e7a6 	.word	0x0800e7a6
 800dcb8:	0800ba35 	.word	0x0800ba35
 800dcbc:	0800da41 	.word	0x0800da41
 800dcc0:	0800e7a2 	.word	0x0800e7a2

0800dcc4 <__swbuf_r>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	460e      	mov	r6, r1
 800dcc8:	4614      	mov	r4, r2
 800dcca:	4605      	mov	r5, r0
 800dccc:	b118      	cbz	r0, 800dcd6 <__swbuf_r+0x12>
 800dcce:	6983      	ldr	r3, [r0, #24]
 800dcd0:	b90b      	cbnz	r3, 800dcd6 <__swbuf_r+0x12>
 800dcd2:	f000 f9e7 	bl	800e0a4 <__sinit>
 800dcd6:	4b21      	ldr	r3, [pc, #132]	; (800dd5c <__swbuf_r+0x98>)
 800dcd8:	429c      	cmp	r4, r3
 800dcda:	d12b      	bne.n	800dd34 <__swbuf_r+0x70>
 800dcdc:	686c      	ldr	r4, [r5, #4]
 800dcde:	69a3      	ldr	r3, [r4, #24]
 800dce0:	60a3      	str	r3, [r4, #8]
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	071a      	lsls	r2, r3, #28
 800dce6:	d52f      	bpl.n	800dd48 <__swbuf_r+0x84>
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	b36b      	cbz	r3, 800dd48 <__swbuf_r+0x84>
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	6820      	ldr	r0, [r4, #0]
 800dcf0:	1ac0      	subs	r0, r0, r3
 800dcf2:	6963      	ldr	r3, [r4, #20]
 800dcf4:	b2f6      	uxtb	r6, r6
 800dcf6:	4283      	cmp	r3, r0
 800dcf8:	4637      	mov	r7, r6
 800dcfa:	dc04      	bgt.n	800dd06 <__swbuf_r+0x42>
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	4628      	mov	r0, r5
 800dd00:	f000 f93c 	bl	800df7c <_fflush_r>
 800dd04:	bb30      	cbnz	r0, 800dd54 <__swbuf_r+0x90>
 800dd06:	68a3      	ldr	r3, [r4, #8]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	60a3      	str	r3, [r4, #8]
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	6022      	str	r2, [r4, #0]
 800dd12:	701e      	strb	r6, [r3, #0]
 800dd14:	6963      	ldr	r3, [r4, #20]
 800dd16:	3001      	adds	r0, #1
 800dd18:	4283      	cmp	r3, r0
 800dd1a:	d004      	beq.n	800dd26 <__swbuf_r+0x62>
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	07db      	lsls	r3, r3, #31
 800dd20:	d506      	bpl.n	800dd30 <__swbuf_r+0x6c>
 800dd22:	2e0a      	cmp	r6, #10
 800dd24:	d104      	bne.n	800dd30 <__swbuf_r+0x6c>
 800dd26:	4621      	mov	r1, r4
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f000 f927 	bl	800df7c <_fflush_r>
 800dd2e:	b988      	cbnz	r0, 800dd54 <__swbuf_r+0x90>
 800dd30:	4638      	mov	r0, r7
 800dd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd34:	4b0a      	ldr	r3, [pc, #40]	; (800dd60 <__swbuf_r+0x9c>)
 800dd36:	429c      	cmp	r4, r3
 800dd38:	d101      	bne.n	800dd3e <__swbuf_r+0x7a>
 800dd3a:	68ac      	ldr	r4, [r5, #8]
 800dd3c:	e7cf      	b.n	800dcde <__swbuf_r+0x1a>
 800dd3e:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <__swbuf_r+0xa0>)
 800dd40:	429c      	cmp	r4, r3
 800dd42:	bf08      	it	eq
 800dd44:	68ec      	ldreq	r4, [r5, #12]
 800dd46:	e7ca      	b.n	800dcde <__swbuf_r+0x1a>
 800dd48:	4621      	mov	r1, r4
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	f000 f81a 	bl	800dd84 <__swsetup_r>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d0cb      	beq.n	800dcec <__swbuf_r+0x28>
 800dd54:	f04f 37ff 	mov.w	r7, #4294967295
 800dd58:	e7ea      	b.n	800dd30 <__swbuf_r+0x6c>
 800dd5a:	bf00      	nop
 800dd5c:	0800e914 	.word	0x0800e914
 800dd60:	0800e934 	.word	0x0800e934
 800dd64:	0800e8f4 	.word	0x0800e8f4

0800dd68 <__ascii_wctomb>:
 800dd68:	b149      	cbz	r1, 800dd7e <__ascii_wctomb+0x16>
 800dd6a:	2aff      	cmp	r2, #255	; 0xff
 800dd6c:	bf85      	ittet	hi
 800dd6e:	238a      	movhi	r3, #138	; 0x8a
 800dd70:	6003      	strhi	r3, [r0, #0]
 800dd72:	700a      	strbls	r2, [r1, #0]
 800dd74:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd78:	bf98      	it	ls
 800dd7a:	2001      	movls	r0, #1
 800dd7c:	4770      	bx	lr
 800dd7e:	4608      	mov	r0, r1
 800dd80:	4770      	bx	lr
	...

0800dd84 <__swsetup_r>:
 800dd84:	4b32      	ldr	r3, [pc, #200]	; (800de50 <__swsetup_r+0xcc>)
 800dd86:	b570      	push	{r4, r5, r6, lr}
 800dd88:	681d      	ldr	r5, [r3, #0]
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	b125      	cbz	r5, 800dd9a <__swsetup_r+0x16>
 800dd90:	69ab      	ldr	r3, [r5, #24]
 800dd92:	b913      	cbnz	r3, 800dd9a <__swsetup_r+0x16>
 800dd94:	4628      	mov	r0, r5
 800dd96:	f000 f985 	bl	800e0a4 <__sinit>
 800dd9a:	4b2e      	ldr	r3, [pc, #184]	; (800de54 <__swsetup_r+0xd0>)
 800dd9c:	429c      	cmp	r4, r3
 800dd9e:	d10f      	bne.n	800ddc0 <__swsetup_r+0x3c>
 800dda0:	686c      	ldr	r4, [r5, #4]
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dda8:	0719      	lsls	r1, r3, #28
 800ddaa:	d42c      	bmi.n	800de06 <__swsetup_r+0x82>
 800ddac:	06dd      	lsls	r5, r3, #27
 800ddae:	d411      	bmi.n	800ddd4 <__swsetup_r+0x50>
 800ddb0:	2309      	movs	r3, #9
 800ddb2:	6033      	str	r3, [r6, #0]
 800ddb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddb8:	81a3      	strh	r3, [r4, #12]
 800ddba:	f04f 30ff 	mov.w	r0, #4294967295
 800ddbe:	e03e      	b.n	800de3e <__swsetup_r+0xba>
 800ddc0:	4b25      	ldr	r3, [pc, #148]	; (800de58 <__swsetup_r+0xd4>)
 800ddc2:	429c      	cmp	r4, r3
 800ddc4:	d101      	bne.n	800ddca <__swsetup_r+0x46>
 800ddc6:	68ac      	ldr	r4, [r5, #8]
 800ddc8:	e7eb      	b.n	800dda2 <__swsetup_r+0x1e>
 800ddca:	4b24      	ldr	r3, [pc, #144]	; (800de5c <__swsetup_r+0xd8>)
 800ddcc:	429c      	cmp	r4, r3
 800ddce:	bf08      	it	eq
 800ddd0:	68ec      	ldreq	r4, [r5, #12]
 800ddd2:	e7e6      	b.n	800dda2 <__swsetup_r+0x1e>
 800ddd4:	0758      	lsls	r0, r3, #29
 800ddd6:	d512      	bpl.n	800ddfe <__swsetup_r+0x7a>
 800ddd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddda:	b141      	cbz	r1, 800ddee <__swsetup_r+0x6a>
 800dddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde0:	4299      	cmp	r1, r3
 800dde2:	d002      	beq.n	800ddea <__swsetup_r+0x66>
 800dde4:	4630      	mov	r0, r6
 800dde6:	f7fd fcdb 	bl	800b7a0 <_free_r>
 800ddea:	2300      	movs	r3, #0
 800ddec:	6363      	str	r3, [r4, #52]	; 0x34
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddf4:	81a3      	strh	r3, [r4, #12]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	6063      	str	r3, [r4, #4]
 800ddfa:	6923      	ldr	r3, [r4, #16]
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	f043 0308 	orr.w	r3, r3, #8
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	6923      	ldr	r3, [r4, #16]
 800de08:	b94b      	cbnz	r3, 800de1e <__swsetup_r+0x9a>
 800de0a:	89a3      	ldrh	r3, [r4, #12]
 800de0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de14:	d003      	beq.n	800de1e <__swsetup_r+0x9a>
 800de16:	4621      	mov	r1, r4
 800de18:	4630      	mov	r0, r6
 800de1a:	f000 fa05 	bl	800e228 <__smakebuf_r>
 800de1e:	89a0      	ldrh	r0, [r4, #12]
 800de20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de24:	f010 0301 	ands.w	r3, r0, #1
 800de28:	d00a      	beq.n	800de40 <__swsetup_r+0xbc>
 800de2a:	2300      	movs	r3, #0
 800de2c:	60a3      	str	r3, [r4, #8]
 800de2e:	6963      	ldr	r3, [r4, #20]
 800de30:	425b      	negs	r3, r3
 800de32:	61a3      	str	r3, [r4, #24]
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	b943      	cbnz	r3, 800de4a <__swsetup_r+0xc6>
 800de38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de3c:	d1ba      	bne.n	800ddb4 <__swsetup_r+0x30>
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	0781      	lsls	r1, r0, #30
 800de42:	bf58      	it	pl
 800de44:	6963      	ldrpl	r3, [r4, #20]
 800de46:	60a3      	str	r3, [r4, #8]
 800de48:	e7f4      	b.n	800de34 <__swsetup_r+0xb0>
 800de4a:	2000      	movs	r0, #0
 800de4c:	e7f7      	b.n	800de3e <__swsetup_r+0xba>
 800de4e:	bf00      	nop
 800de50:	2000003c 	.word	0x2000003c
 800de54:	0800e914 	.word	0x0800e914
 800de58:	0800e934 	.word	0x0800e934
 800de5c:	0800e8f4 	.word	0x0800e8f4

0800de60 <abort>:
 800de60:	b508      	push	{r3, lr}
 800de62:	2006      	movs	r0, #6
 800de64:	f000 fa50 	bl	800e308 <raise>
 800de68:	2001      	movs	r0, #1
 800de6a:	f7f3 ff93 	bl	8001d94 <_exit>
	...

0800de70 <__sflush_r>:
 800de70:	898a      	ldrh	r2, [r1, #12]
 800de72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de76:	4605      	mov	r5, r0
 800de78:	0710      	lsls	r0, r2, #28
 800de7a:	460c      	mov	r4, r1
 800de7c:	d458      	bmi.n	800df30 <__sflush_r+0xc0>
 800de7e:	684b      	ldr	r3, [r1, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	dc05      	bgt.n	800de90 <__sflush_r+0x20>
 800de84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de86:	2b00      	cmp	r3, #0
 800de88:	dc02      	bgt.n	800de90 <__sflush_r+0x20>
 800de8a:	2000      	movs	r0, #0
 800de8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de92:	2e00      	cmp	r6, #0
 800de94:	d0f9      	beq.n	800de8a <__sflush_r+0x1a>
 800de96:	2300      	movs	r3, #0
 800de98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de9c:	682f      	ldr	r7, [r5, #0]
 800de9e:	602b      	str	r3, [r5, #0]
 800dea0:	d032      	beq.n	800df08 <__sflush_r+0x98>
 800dea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	075a      	lsls	r2, r3, #29
 800dea8:	d505      	bpl.n	800deb6 <__sflush_r+0x46>
 800deaa:	6863      	ldr	r3, [r4, #4]
 800deac:	1ac0      	subs	r0, r0, r3
 800deae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deb0:	b10b      	cbz	r3, 800deb6 <__sflush_r+0x46>
 800deb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deb4:	1ac0      	subs	r0, r0, r3
 800deb6:	2300      	movs	r3, #0
 800deb8:	4602      	mov	r2, r0
 800deba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800debc:	6a21      	ldr	r1, [r4, #32]
 800debe:	4628      	mov	r0, r5
 800dec0:	47b0      	blx	r6
 800dec2:	1c43      	adds	r3, r0, #1
 800dec4:	89a3      	ldrh	r3, [r4, #12]
 800dec6:	d106      	bne.n	800ded6 <__sflush_r+0x66>
 800dec8:	6829      	ldr	r1, [r5, #0]
 800deca:	291d      	cmp	r1, #29
 800decc:	d82c      	bhi.n	800df28 <__sflush_r+0xb8>
 800dece:	4a2a      	ldr	r2, [pc, #168]	; (800df78 <__sflush_r+0x108>)
 800ded0:	40ca      	lsrs	r2, r1
 800ded2:	07d6      	lsls	r6, r2, #31
 800ded4:	d528      	bpl.n	800df28 <__sflush_r+0xb8>
 800ded6:	2200      	movs	r2, #0
 800ded8:	6062      	str	r2, [r4, #4]
 800deda:	04d9      	lsls	r1, r3, #19
 800dedc:	6922      	ldr	r2, [r4, #16]
 800dede:	6022      	str	r2, [r4, #0]
 800dee0:	d504      	bpl.n	800deec <__sflush_r+0x7c>
 800dee2:	1c42      	adds	r2, r0, #1
 800dee4:	d101      	bne.n	800deea <__sflush_r+0x7a>
 800dee6:	682b      	ldr	r3, [r5, #0]
 800dee8:	b903      	cbnz	r3, 800deec <__sflush_r+0x7c>
 800deea:	6560      	str	r0, [r4, #84]	; 0x54
 800deec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800deee:	602f      	str	r7, [r5, #0]
 800def0:	2900      	cmp	r1, #0
 800def2:	d0ca      	beq.n	800de8a <__sflush_r+0x1a>
 800def4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800def8:	4299      	cmp	r1, r3
 800defa:	d002      	beq.n	800df02 <__sflush_r+0x92>
 800defc:	4628      	mov	r0, r5
 800defe:	f7fd fc4f 	bl	800b7a0 <_free_r>
 800df02:	2000      	movs	r0, #0
 800df04:	6360      	str	r0, [r4, #52]	; 0x34
 800df06:	e7c1      	b.n	800de8c <__sflush_r+0x1c>
 800df08:	6a21      	ldr	r1, [r4, #32]
 800df0a:	2301      	movs	r3, #1
 800df0c:	4628      	mov	r0, r5
 800df0e:	47b0      	blx	r6
 800df10:	1c41      	adds	r1, r0, #1
 800df12:	d1c7      	bne.n	800dea4 <__sflush_r+0x34>
 800df14:	682b      	ldr	r3, [r5, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0c4      	beq.n	800dea4 <__sflush_r+0x34>
 800df1a:	2b1d      	cmp	r3, #29
 800df1c:	d001      	beq.n	800df22 <__sflush_r+0xb2>
 800df1e:	2b16      	cmp	r3, #22
 800df20:	d101      	bne.n	800df26 <__sflush_r+0xb6>
 800df22:	602f      	str	r7, [r5, #0]
 800df24:	e7b1      	b.n	800de8a <__sflush_r+0x1a>
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df2c:	81a3      	strh	r3, [r4, #12]
 800df2e:	e7ad      	b.n	800de8c <__sflush_r+0x1c>
 800df30:	690f      	ldr	r7, [r1, #16]
 800df32:	2f00      	cmp	r7, #0
 800df34:	d0a9      	beq.n	800de8a <__sflush_r+0x1a>
 800df36:	0793      	lsls	r3, r2, #30
 800df38:	680e      	ldr	r6, [r1, #0]
 800df3a:	bf08      	it	eq
 800df3c:	694b      	ldreq	r3, [r1, #20]
 800df3e:	600f      	str	r7, [r1, #0]
 800df40:	bf18      	it	ne
 800df42:	2300      	movne	r3, #0
 800df44:	eba6 0807 	sub.w	r8, r6, r7
 800df48:	608b      	str	r3, [r1, #8]
 800df4a:	f1b8 0f00 	cmp.w	r8, #0
 800df4e:	dd9c      	ble.n	800de8a <__sflush_r+0x1a>
 800df50:	6a21      	ldr	r1, [r4, #32]
 800df52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df54:	4643      	mov	r3, r8
 800df56:	463a      	mov	r2, r7
 800df58:	4628      	mov	r0, r5
 800df5a:	47b0      	blx	r6
 800df5c:	2800      	cmp	r0, #0
 800df5e:	dc06      	bgt.n	800df6e <__sflush_r+0xfe>
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	e78e      	b.n	800de8c <__sflush_r+0x1c>
 800df6e:	4407      	add	r7, r0
 800df70:	eba8 0800 	sub.w	r8, r8, r0
 800df74:	e7e9      	b.n	800df4a <__sflush_r+0xda>
 800df76:	bf00      	nop
 800df78:	20400001 	.word	0x20400001

0800df7c <_fflush_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	690b      	ldr	r3, [r1, #16]
 800df80:	4605      	mov	r5, r0
 800df82:	460c      	mov	r4, r1
 800df84:	b913      	cbnz	r3, 800df8c <_fflush_r+0x10>
 800df86:	2500      	movs	r5, #0
 800df88:	4628      	mov	r0, r5
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	b118      	cbz	r0, 800df96 <_fflush_r+0x1a>
 800df8e:	6983      	ldr	r3, [r0, #24]
 800df90:	b90b      	cbnz	r3, 800df96 <_fflush_r+0x1a>
 800df92:	f000 f887 	bl	800e0a4 <__sinit>
 800df96:	4b14      	ldr	r3, [pc, #80]	; (800dfe8 <_fflush_r+0x6c>)
 800df98:	429c      	cmp	r4, r3
 800df9a:	d11b      	bne.n	800dfd4 <_fflush_r+0x58>
 800df9c:	686c      	ldr	r4, [r5, #4]
 800df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d0ef      	beq.n	800df86 <_fflush_r+0xa>
 800dfa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfa8:	07d0      	lsls	r0, r2, #31
 800dfaa:	d404      	bmi.n	800dfb6 <_fflush_r+0x3a>
 800dfac:	0599      	lsls	r1, r3, #22
 800dfae:	d402      	bmi.n	800dfb6 <_fflush_r+0x3a>
 800dfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfb2:	f7ff fcda 	bl	800d96a <__retarget_lock_acquire_recursive>
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	4621      	mov	r1, r4
 800dfba:	f7ff ff59 	bl	800de70 <__sflush_r>
 800dfbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfc0:	07da      	lsls	r2, r3, #31
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	d4e0      	bmi.n	800df88 <_fflush_r+0xc>
 800dfc6:	89a3      	ldrh	r3, [r4, #12]
 800dfc8:	059b      	lsls	r3, r3, #22
 800dfca:	d4dd      	bmi.n	800df88 <_fflush_r+0xc>
 800dfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfce:	f7ff fccd 	bl	800d96c <__retarget_lock_release_recursive>
 800dfd2:	e7d9      	b.n	800df88 <_fflush_r+0xc>
 800dfd4:	4b05      	ldr	r3, [pc, #20]	; (800dfec <_fflush_r+0x70>)
 800dfd6:	429c      	cmp	r4, r3
 800dfd8:	d101      	bne.n	800dfde <_fflush_r+0x62>
 800dfda:	68ac      	ldr	r4, [r5, #8]
 800dfdc:	e7df      	b.n	800df9e <_fflush_r+0x22>
 800dfde:	4b04      	ldr	r3, [pc, #16]	; (800dff0 <_fflush_r+0x74>)
 800dfe0:	429c      	cmp	r4, r3
 800dfe2:	bf08      	it	eq
 800dfe4:	68ec      	ldreq	r4, [r5, #12]
 800dfe6:	e7da      	b.n	800df9e <_fflush_r+0x22>
 800dfe8:	0800e914 	.word	0x0800e914
 800dfec:	0800e934 	.word	0x0800e934
 800dff0:	0800e8f4 	.word	0x0800e8f4

0800dff4 <std>:
 800dff4:	2300      	movs	r3, #0
 800dff6:	b510      	push	{r4, lr}
 800dff8:	4604      	mov	r4, r0
 800dffa:	e9c0 3300 	strd	r3, r3, [r0]
 800dffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e002:	6083      	str	r3, [r0, #8]
 800e004:	8181      	strh	r1, [r0, #12]
 800e006:	6643      	str	r3, [r0, #100]	; 0x64
 800e008:	81c2      	strh	r2, [r0, #14]
 800e00a:	6183      	str	r3, [r0, #24]
 800e00c:	4619      	mov	r1, r3
 800e00e:	2208      	movs	r2, #8
 800e010:	305c      	adds	r0, #92	; 0x5c
 800e012:	f7fd fbbd 	bl	800b790 <memset>
 800e016:	4b05      	ldr	r3, [pc, #20]	; (800e02c <std+0x38>)
 800e018:	6263      	str	r3, [r4, #36]	; 0x24
 800e01a:	4b05      	ldr	r3, [pc, #20]	; (800e030 <std+0x3c>)
 800e01c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e01e:	4b05      	ldr	r3, [pc, #20]	; (800e034 <std+0x40>)
 800e020:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e022:	4b05      	ldr	r3, [pc, #20]	; (800e038 <std+0x44>)
 800e024:	6224      	str	r4, [r4, #32]
 800e026:	6323      	str	r3, [r4, #48]	; 0x30
 800e028:	bd10      	pop	{r4, pc}
 800e02a:	bf00      	nop
 800e02c:	0800e341 	.word	0x0800e341
 800e030:	0800e363 	.word	0x0800e363
 800e034:	0800e39b 	.word	0x0800e39b
 800e038:	0800e3bf 	.word	0x0800e3bf

0800e03c <_cleanup_r>:
 800e03c:	4901      	ldr	r1, [pc, #4]	; (800e044 <_cleanup_r+0x8>)
 800e03e:	f000 b8af 	b.w	800e1a0 <_fwalk_reent>
 800e042:	bf00      	nop
 800e044:	0800df7d 	.word	0x0800df7d

0800e048 <__sfmoreglue>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	1e4a      	subs	r2, r1, #1
 800e04c:	2568      	movs	r5, #104	; 0x68
 800e04e:	4355      	muls	r5, r2
 800e050:	460e      	mov	r6, r1
 800e052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e056:	f7fd fbf3 	bl	800b840 <_malloc_r>
 800e05a:	4604      	mov	r4, r0
 800e05c:	b140      	cbz	r0, 800e070 <__sfmoreglue+0x28>
 800e05e:	2100      	movs	r1, #0
 800e060:	e9c0 1600 	strd	r1, r6, [r0]
 800e064:	300c      	adds	r0, #12
 800e066:	60a0      	str	r0, [r4, #8]
 800e068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e06c:	f7fd fb90 	bl	800b790 <memset>
 800e070:	4620      	mov	r0, r4
 800e072:	bd70      	pop	{r4, r5, r6, pc}

0800e074 <__sfp_lock_acquire>:
 800e074:	4801      	ldr	r0, [pc, #4]	; (800e07c <__sfp_lock_acquire+0x8>)
 800e076:	f7ff bc78 	b.w	800d96a <__retarget_lock_acquire_recursive>
 800e07a:	bf00      	nop
 800e07c:	20000b60 	.word	0x20000b60

0800e080 <__sfp_lock_release>:
 800e080:	4801      	ldr	r0, [pc, #4]	; (800e088 <__sfp_lock_release+0x8>)
 800e082:	f7ff bc73 	b.w	800d96c <__retarget_lock_release_recursive>
 800e086:	bf00      	nop
 800e088:	20000b60 	.word	0x20000b60

0800e08c <__sinit_lock_acquire>:
 800e08c:	4801      	ldr	r0, [pc, #4]	; (800e094 <__sinit_lock_acquire+0x8>)
 800e08e:	f7ff bc6c 	b.w	800d96a <__retarget_lock_acquire_recursive>
 800e092:	bf00      	nop
 800e094:	20000b5b 	.word	0x20000b5b

0800e098 <__sinit_lock_release>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__sinit_lock_release+0x8>)
 800e09a:	f7ff bc67 	b.w	800d96c <__retarget_lock_release_recursive>
 800e09e:	bf00      	nop
 800e0a0:	20000b5b 	.word	0x20000b5b

0800e0a4 <__sinit>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	f7ff fff0 	bl	800e08c <__sinit_lock_acquire>
 800e0ac:	69a3      	ldr	r3, [r4, #24]
 800e0ae:	b11b      	cbz	r3, 800e0b8 <__sinit+0x14>
 800e0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0b4:	f7ff bff0 	b.w	800e098 <__sinit_lock_release>
 800e0b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0bc:	6523      	str	r3, [r4, #80]	; 0x50
 800e0be:	4b13      	ldr	r3, [pc, #76]	; (800e10c <__sinit+0x68>)
 800e0c0:	4a13      	ldr	r2, [pc, #76]	; (800e110 <__sinit+0x6c>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0c6:	42a3      	cmp	r3, r4
 800e0c8:	bf04      	itt	eq
 800e0ca:	2301      	moveq	r3, #1
 800e0cc:	61a3      	streq	r3, [r4, #24]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 f820 	bl	800e114 <__sfp>
 800e0d4:	6060      	str	r0, [r4, #4]
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 f81c 	bl	800e114 <__sfp>
 800e0dc:	60a0      	str	r0, [r4, #8]
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 f818 	bl	800e114 <__sfp>
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	60e0      	str	r0, [r4, #12]
 800e0e8:	2104      	movs	r1, #4
 800e0ea:	6860      	ldr	r0, [r4, #4]
 800e0ec:	f7ff ff82 	bl	800dff4 <std>
 800e0f0:	68a0      	ldr	r0, [r4, #8]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	2109      	movs	r1, #9
 800e0f6:	f7ff ff7d 	bl	800dff4 <std>
 800e0fa:	68e0      	ldr	r0, [r4, #12]
 800e0fc:	2202      	movs	r2, #2
 800e0fe:	2112      	movs	r1, #18
 800e100:	f7ff ff78 	bl	800dff4 <std>
 800e104:	2301      	movs	r3, #1
 800e106:	61a3      	str	r3, [r4, #24]
 800e108:	e7d2      	b.n	800e0b0 <__sinit+0xc>
 800e10a:	bf00      	nop
 800e10c:	0800e570 	.word	0x0800e570
 800e110:	0800e03d 	.word	0x0800e03d

0800e114 <__sfp>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	4607      	mov	r7, r0
 800e118:	f7ff ffac 	bl	800e074 <__sfp_lock_acquire>
 800e11c:	4b1e      	ldr	r3, [pc, #120]	; (800e198 <__sfp+0x84>)
 800e11e:	681e      	ldr	r6, [r3, #0]
 800e120:	69b3      	ldr	r3, [r6, #24]
 800e122:	b913      	cbnz	r3, 800e12a <__sfp+0x16>
 800e124:	4630      	mov	r0, r6
 800e126:	f7ff ffbd 	bl	800e0a4 <__sinit>
 800e12a:	3648      	adds	r6, #72	; 0x48
 800e12c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e130:	3b01      	subs	r3, #1
 800e132:	d503      	bpl.n	800e13c <__sfp+0x28>
 800e134:	6833      	ldr	r3, [r6, #0]
 800e136:	b30b      	cbz	r3, 800e17c <__sfp+0x68>
 800e138:	6836      	ldr	r6, [r6, #0]
 800e13a:	e7f7      	b.n	800e12c <__sfp+0x18>
 800e13c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e140:	b9d5      	cbnz	r5, 800e178 <__sfp+0x64>
 800e142:	4b16      	ldr	r3, [pc, #88]	; (800e19c <__sfp+0x88>)
 800e144:	60e3      	str	r3, [r4, #12]
 800e146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e14a:	6665      	str	r5, [r4, #100]	; 0x64
 800e14c:	f7ff fc0c 	bl	800d968 <__retarget_lock_init_recursive>
 800e150:	f7ff ff96 	bl	800e080 <__sfp_lock_release>
 800e154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e15c:	6025      	str	r5, [r4, #0]
 800e15e:	61a5      	str	r5, [r4, #24]
 800e160:	2208      	movs	r2, #8
 800e162:	4629      	mov	r1, r5
 800e164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e168:	f7fd fb12 	bl	800b790 <memset>
 800e16c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e174:	4620      	mov	r0, r4
 800e176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e178:	3468      	adds	r4, #104	; 0x68
 800e17a:	e7d9      	b.n	800e130 <__sfp+0x1c>
 800e17c:	2104      	movs	r1, #4
 800e17e:	4638      	mov	r0, r7
 800e180:	f7ff ff62 	bl	800e048 <__sfmoreglue>
 800e184:	4604      	mov	r4, r0
 800e186:	6030      	str	r0, [r6, #0]
 800e188:	2800      	cmp	r0, #0
 800e18a:	d1d5      	bne.n	800e138 <__sfp+0x24>
 800e18c:	f7ff ff78 	bl	800e080 <__sfp_lock_release>
 800e190:	230c      	movs	r3, #12
 800e192:	603b      	str	r3, [r7, #0]
 800e194:	e7ee      	b.n	800e174 <__sfp+0x60>
 800e196:	bf00      	nop
 800e198:	0800e570 	.word	0x0800e570
 800e19c:	ffff0001 	.word	0xffff0001

0800e1a0 <_fwalk_reent>:
 800e1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	4688      	mov	r8, r1
 800e1a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1ac:	2700      	movs	r7, #0
 800e1ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1b2:	f1b9 0901 	subs.w	r9, r9, #1
 800e1b6:	d505      	bpl.n	800e1c4 <_fwalk_reent+0x24>
 800e1b8:	6824      	ldr	r4, [r4, #0]
 800e1ba:	2c00      	cmp	r4, #0
 800e1bc:	d1f7      	bne.n	800e1ae <_fwalk_reent+0xe>
 800e1be:	4638      	mov	r0, r7
 800e1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1c4:	89ab      	ldrh	r3, [r5, #12]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d907      	bls.n	800e1da <_fwalk_reent+0x3a>
 800e1ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	d003      	beq.n	800e1da <_fwalk_reent+0x3a>
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	47c0      	blx	r8
 800e1d8:	4307      	orrs	r7, r0
 800e1da:	3568      	adds	r5, #104	; 0x68
 800e1dc:	e7e9      	b.n	800e1b2 <_fwalk_reent+0x12>

0800e1de <__swhatbuf_r>:
 800e1de:	b570      	push	{r4, r5, r6, lr}
 800e1e0:	460e      	mov	r6, r1
 800e1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e6:	2900      	cmp	r1, #0
 800e1e8:	b096      	sub	sp, #88	; 0x58
 800e1ea:	4614      	mov	r4, r2
 800e1ec:	461d      	mov	r5, r3
 800e1ee:	da07      	bge.n	800e200 <__swhatbuf_r+0x22>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	602b      	str	r3, [r5, #0]
 800e1f4:	89b3      	ldrh	r3, [r6, #12]
 800e1f6:	061a      	lsls	r2, r3, #24
 800e1f8:	d410      	bmi.n	800e21c <__swhatbuf_r+0x3e>
 800e1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1fe:	e00e      	b.n	800e21e <__swhatbuf_r+0x40>
 800e200:	466a      	mov	r2, sp
 800e202:	f000 f903 	bl	800e40c <_fstat_r>
 800e206:	2800      	cmp	r0, #0
 800e208:	dbf2      	blt.n	800e1f0 <__swhatbuf_r+0x12>
 800e20a:	9a01      	ldr	r2, [sp, #4]
 800e20c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e214:	425a      	negs	r2, r3
 800e216:	415a      	adcs	r2, r3
 800e218:	602a      	str	r2, [r5, #0]
 800e21a:	e7ee      	b.n	800e1fa <__swhatbuf_r+0x1c>
 800e21c:	2340      	movs	r3, #64	; 0x40
 800e21e:	2000      	movs	r0, #0
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	b016      	add	sp, #88	; 0x58
 800e224:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e228 <__smakebuf_r>:
 800e228:	898b      	ldrh	r3, [r1, #12]
 800e22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e22c:	079d      	lsls	r5, r3, #30
 800e22e:	4606      	mov	r6, r0
 800e230:	460c      	mov	r4, r1
 800e232:	d507      	bpl.n	800e244 <__smakebuf_r+0x1c>
 800e234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	6123      	str	r3, [r4, #16]
 800e23c:	2301      	movs	r3, #1
 800e23e:	6163      	str	r3, [r4, #20]
 800e240:	b002      	add	sp, #8
 800e242:	bd70      	pop	{r4, r5, r6, pc}
 800e244:	ab01      	add	r3, sp, #4
 800e246:	466a      	mov	r2, sp
 800e248:	f7ff ffc9 	bl	800e1de <__swhatbuf_r>
 800e24c:	9900      	ldr	r1, [sp, #0]
 800e24e:	4605      	mov	r5, r0
 800e250:	4630      	mov	r0, r6
 800e252:	f7fd faf5 	bl	800b840 <_malloc_r>
 800e256:	b948      	cbnz	r0, 800e26c <__smakebuf_r+0x44>
 800e258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e25c:	059a      	lsls	r2, r3, #22
 800e25e:	d4ef      	bmi.n	800e240 <__smakebuf_r+0x18>
 800e260:	f023 0303 	bic.w	r3, r3, #3
 800e264:	f043 0302 	orr.w	r3, r3, #2
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	e7e3      	b.n	800e234 <__smakebuf_r+0xc>
 800e26c:	4b0d      	ldr	r3, [pc, #52]	; (800e2a4 <__smakebuf_r+0x7c>)
 800e26e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	6020      	str	r0, [r4, #0]
 800e274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	9b00      	ldr	r3, [sp, #0]
 800e27c:	6163      	str	r3, [r4, #20]
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	6120      	str	r0, [r4, #16]
 800e282:	b15b      	cbz	r3, 800e29c <__smakebuf_r+0x74>
 800e284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e288:	4630      	mov	r0, r6
 800e28a:	f000 f8d1 	bl	800e430 <_isatty_r>
 800e28e:	b128      	cbz	r0, 800e29c <__smakebuf_r+0x74>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f023 0303 	bic.w	r3, r3, #3
 800e296:	f043 0301 	orr.w	r3, r3, #1
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	89a0      	ldrh	r0, [r4, #12]
 800e29e:	4305      	orrs	r5, r0
 800e2a0:	81a5      	strh	r5, [r4, #12]
 800e2a2:	e7cd      	b.n	800e240 <__smakebuf_r+0x18>
 800e2a4:	0800e03d 	.word	0x0800e03d

0800e2a8 <_malloc_usable_size_r>:
 800e2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2ac:	1f18      	subs	r0, r3, #4
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	bfbc      	itt	lt
 800e2b2:	580b      	ldrlt	r3, [r1, r0]
 800e2b4:	18c0      	addlt	r0, r0, r3
 800e2b6:	4770      	bx	lr

0800e2b8 <_raise_r>:
 800e2b8:	291f      	cmp	r1, #31
 800e2ba:	b538      	push	{r3, r4, r5, lr}
 800e2bc:	4604      	mov	r4, r0
 800e2be:	460d      	mov	r5, r1
 800e2c0:	d904      	bls.n	800e2cc <_raise_r+0x14>
 800e2c2:	2316      	movs	r3, #22
 800e2c4:	6003      	str	r3, [r0, #0]
 800e2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2ce:	b112      	cbz	r2, 800e2d6 <_raise_r+0x1e>
 800e2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d4:	b94b      	cbnz	r3, 800e2ea <_raise_r+0x32>
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 f830 	bl	800e33c <_getpid_r>
 800e2dc:	462a      	mov	r2, r5
 800e2de:	4601      	mov	r1, r0
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e6:	f000 b817 	b.w	800e318 <_kill_r>
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d00a      	beq.n	800e304 <_raise_r+0x4c>
 800e2ee:	1c59      	adds	r1, r3, #1
 800e2f0:	d103      	bne.n	800e2fa <_raise_r+0x42>
 800e2f2:	2316      	movs	r3, #22
 800e2f4:	6003      	str	r3, [r0, #0]
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	e7e7      	b.n	800e2ca <_raise_r+0x12>
 800e2fa:	2400      	movs	r4, #0
 800e2fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e300:	4628      	mov	r0, r5
 800e302:	4798      	blx	r3
 800e304:	2000      	movs	r0, #0
 800e306:	e7e0      	b.n	800e2ca <_raise_r+0x12>

0800e308 <raise>:
 800e308:	4b02      	ldr	r3, [pc, #8]	; (800e314 <raise+0xc>)
 800e30a:	4601      	mov	r1, r0
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	f7ff bfd3 	b.w	800e2b8 <_raise_r>
 800e312:	bf00      	nop
 800e314:	2000003c 	.word	0x2000003c

0800e318 <_kill_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d07      	ldr	r5, [pc, #28]	; (800e338 <_kill_r+0x20>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	4611      	mov	r1, r2
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	f7f3 fd25 	bl	8001d74 <_kill>
 800e32a:	1c43      	adds	r3, r0, #1
 800e32c:	d102      	bne.n	800e334 <_kill_r+0x1c>
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	b103      	cbz	r3, 800e334 <_kill_r+0x1c>
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	bd38      	pop	{r3, r4, r5, pc}
 800e336:	bf00      	nop
 800e338:	20000b54 	.word	0x20000b54

0800e33c <_getpid_r>:
 800e33c:	f7f3 bd12 	b.w	8001d64 <_getpid>

0800e340 <__sread>:
 800e340:	b510      	push	{r4, lr}
 800e342:	460c      	mov	r4, r1
 800e344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e348:	f000 f894 	bl	800e474 <_read_r>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	bfab      	itete	ge
 800e350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e352:	89a3      	ldrhlt	r3, [r4, #12]
 800e354:	181b      	addge	r3, r3, r0
 800e356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e35a:	bfac      	ite	ge
 800e35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e35e:	81a3      	strhlt	r3, [r4, #12]
 800e360:	bd10      	pop	{r4, pc}

0800e362 <__swrite>:
 800e362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e366:	461f      	mov	r7, r3
 800e368:	898b      	ldrh	r3, [r1, #12]
 800e36a:	05db      	lsls	r3, r3, #23
 800e36c:	4605      	mov	r5, r0
 800e36e:	460c      	mov	r4, r1
 800e370:	4616      	mov	r6, r2
 800e372:	d505      	bpl.n	800e380 <__swrite+0x1e>
 800e374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e378:	2302      	movs	r3, #2
 800e37a:	2200      	movs	r2, #0
 800e37c:	f000 f868 	bl	800e450 <_lseek_r>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	4632      	mov	r2, r6
 800e38e:	463b      	mov	r3, r7
 800e390:	4628      	mov	r0, r5
 800e392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e396:	f000 b817 	b.w	800e3c8 <_write_r>

0800e39a <__sseek>:
 800e39a:	b510      	push	{r4, lr}
 800e39c:	460c      	mov	r4, r1
 800e39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a2:	f000 f855 	bl	800e450 <_lseek_r>
 800e3a6:	1c43      	adds	r3, r0, #1
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	bf15      	itete	ne
 800e3ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3b6:	81a3      	strheq	r3, [r4, #12]
 800e3b8:	bf18      	it	ne
 800e3ba:	81a3      	strhne	r3, [r4, #12]
 800e3bc:	bd10      	pop	{r4, pc}

0800e3be <__sclose>:
 800e3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c2:	f000 b813 	b.w	800e3ec <_close_r>
	...

0800e3c8 <_write_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d07      	ldr	r5, [pc, #28]	; (800e3e8 <_write_r+0x20>)
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	602a      	str	r2, [r5, #0]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f7f3 fd03 	bl	8001de2 <_write>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_write_r+0x1e>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_write_r+0x1e>
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20000b54 	.word	0x20000b54

0800e3ec <_close_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4d06      	ldr	r5, [pc, #24]	; (800e408 <_close_r+0x1c>)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	602b      	str	r3, [r5, #0]
 800e3f8:	f7f3 fd0f 	bl	8001e1a <_close>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_close_r+0x1a>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	b103      	cbz	r3, 800e406 <_close_r+0x1a>
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20000b54 	.word	0x20000b54

0800e40c <_fstat_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d07      	ldr	r5, [pc, #28]	; (800e42c <_fstat_r+0x20>)
 800e410:	2300      	movs	r3, #0
 800e412:	4604      	mov	r4, r0
 800e414:	4608      	mov	r0, r1
 800e416:	4611      	mov	r1, r2
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	f7f3 fd0a 	bl	8001e32 <_fstat>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d102      	bne.n	800e428 <_fstat_r+0x1c>
 800e422:	682b      	ldr	r3, [r5, #0]
 800e424:	b103      	cbz	r3, 800e428 <_fstat_r+0x1c>
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	bd38      	pop	{r3, r4, r5, pc}
 800e42a:	bf00      	nop
 800e42c:	20000b54 	.word	0x20000b54

0800e430 <_isatty_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4d06      	ldr	r5, [pc, #24]	; (800e44c <_isatty_r+0x1c>)
 800e434:	2300      	movs	r3, #0
 800e436:	4604      	mov	r4, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	f7f3 fd09 	bl	8001e52 <_isatty>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	d102      	bne.n	800e44a <_isatty_r+0x1a>
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	b103      	cbz	r3, 800e44a <_isatty_r+0x1a>
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	20000b54 	.word	0x20000b54

0800e450 <_lseek_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4d07      	ldr	r5, [pc, #28]	; (800e470 <_lseek_r+0x20>)
 800e454:	4604      	mov	r4, r0
 800e456:	4608      	mov	r0, r1
 800e458:	4611      	mov	r1, r2
 800e45a:	2200      	movs	r2, #0
 800e45c:	602a      	str	r2, [r5, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	f7f3 fd02 	bl	8001e68 <_lseek>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d102      	bne.n	800e46e <_lseek_r+0x1e>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	b103      	cbz	r3, 800e46e <_lseek_r+0x1e>
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	bd38      	pop	{r3, r4, r5, pc}
 800e470:	20000b54 	.word	0x20000b54

0800e474 <_read_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4d07      	ldr	r5, [pc, #28]	; (800e494 <_read_r+0x20>)
 800e478:	4604      	mov	r4, r0
 800e47a:	4608      	mov	r0, r1
 800e47c:	4611      	mov	r1, r2
 800e47e:	2200      	movs	r2, #0
 800e480:	602a      	str	r2, [r5, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	f7f3 fc90 	bl	8001da8 <_read>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_read_r+0x1e>
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_read_r+0x1e>
 800e490:	6023      	str	r3, [r4, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	20000b54 	.word	0x20000b54

0800e498 <_init>:
 800e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49a:	bf00      	nop
 800e49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e49e:	bc08      	pop	{r3}
 800e4a0:	469e      	mov	lr, r3
 800e4a2:	4770      	bx	lr

0800e4a4 <_fini>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	bf00      	nop
 800e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4aa:	bc08      	pop	{r3}
 800e4ac:	469e      	mov	lr, r3
 800e4ae:	4770      	bx	lr
